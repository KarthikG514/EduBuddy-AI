{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/schemas.ts"],"sourcesContent":["\n\n/**\n * @fileOverview Shared Zod schemas and TypeScript types for AI flows.\n */\nimport {z} from 'zod';\n\n// === Question Generator Schemas ===\n\nexport const GenerateQuestionsInputSchema = z.object({\n  subject: z.string().describe('The course or subject of the questions.'),\n  topic: z.string().describe('The topic or module title for the questions.'),\n  numberOfQuestions: z.number().int().positive().describe('The number of questions to generate.'),\n  difficulty: z.enum(['Easy', 'Moderate', 'Advanced']).describe('The academic complexity level of the questions.'),\n});\n\nexport type GenerateQuestionsInput = z.infer<typeof GenerateQuestionsInputSchema>;\n\nexport const MCQQuestionSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.object({\n    A: z.string(),\n    B: z.string(),\n    C: z.string(),\n    D: z.string(),\n  }).describe('The four multiple-choice options.'),\n  answer: z.enum(['A', 'B', 'C', 'D']).describe('The key of the correct option.'),\n});\n\nexport type MCQQuestion = z.infer<typeof MCQQuestionSchema>;\n\nexport const GenerateQuestionsOutputSchema = z.object({\n  questions: z.array(MCQQuestionSchema).describe('An array of generated multiple-choice questions.'),\n});\n\nexport type GenerateQuestionsOutput = z.infer<typeof GenerateQuestionsOutputSchema>;\n\n\n// === Question Generator From File Schemas ===\n\nexport const GenerateQuestionsFromFileInputSchema = z.object({\n  fileDataUri: z\n    .string()\n    .describe(\n      \"The notes or syllabus file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  topic: z.string().optional().describe(\"The topic of the quiz, often derived from the filename.\"),\n  numberOfQuestions: z.number().int().positive().describe('The number of questions to generate.'),\n  difficulty: z.enum(['Easy', 'Moderate', 'Advanced']).describe('The academic complexity level of the questions.'),\n});\n\nexport type GenerateQuestionsFromFileInput = z.infer<typeof GenerateQuestionsFromFileInputSchema>;\n\n\n// === Feedback Generator Schemas ===\n\nexport const GenerateFeedbackInputSchema = z.object({\n  studentName: z.string().describe('The name of the student.'),\n  subjects: z.array(z.string()).describe('A list of all subjects.'),\n  marks: z.record(z.string(), z.number()).describe('An object containing subjects as keys and marks as values.'),\n});\n\nexport type GenerateFeedbackInput = z.infer<typeof GenerateFeedbackInputSchema>;\n\nconst DailyPlanSchema = z.object({\n  topic: z.string().describe(\"The specific topic or subject to focus on for the day.\"),\n  task: z.string().describe(\"A concrete task or activity for the student to complete.\"),\n});\n\nexport const GenerateFeedbackOutputSchema = z.object({\n  strengths: z.array(z.string()).describe('A list of subjects where the student scored above 85. These are the student\\'s strong areas.'),\n  weaknesses: z.array(z.string()).describe('A list of subjects where the student scored below 75. These are the areas needing improvement.'),\n  improvementTips: z.string().describe('Actionable, concise tips for the student to improve in their weak areas.'),\n  studyPlan: z.object({\n    day1: DailyPlanSchema,\n    day2: DailyPlanSchema,\n    day3: DailyPlanSchema,\n    day4: DailyPlanSchema,\n    day5: DailyPlanSchema,\n    day6: DailyPlanSchema,\n    day7: DailyPlanSchema,\n  }).describe('A personalized 7-day study plan to help the student improve.'),\n});\n\nexport type GenerateFeedbackOutput = z.infer<typeof GenerateFeedbackOutputSchema>;\n\n\n// === Teaching Plan Advisor Schemas ===\n\nexport const GenerateAdviceInputSchema = z.object({\n  subject: z.string().optional().describe('The subject or course for which advice is being generated.'),\n  text: z.string().optional().describe('The syllabus or lecture notes provided by the user as pasted text.'),\n  fileDataUri: z.string().optional().describe(\"The syllabus or lecture notes file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n}).refine(data => data.text || data.fileDataUri, {\n  message: \"Either text or a file must be provided.\",\n});\n\nexport type GenerateAdviceInput = z.infer<typeof GenerateAdviceInputSchema>;\n\n\nexport const GenerateAdviceOutputSchema = z.object({\n  coveredTopics: z.array(z.string()).describe('A list of topics that have been covered in the provided text.'),\n  nextTopic: z.string().describe('The single, most logical topic to teach next based on the covered topics.'),\n  suggestedRevisions: z.array(z.string()).describe('A list of topics that should be revised before a test.'),\n  skippedConcepts: z.array(z.string()).describe('A list of important concepts that may have been missed or are unclear.'),\n});\n\nexport type GenerateAdviceOutput = z.infer<typeof GenerateAdviceOutputSchema>;\n\n// === Question Paper Generator Schemas ===\n\nexport const GenerateQuestionPaperInputSchema = z.object({\n  subject: z.string().describe('The course or subject of the question paper.'),\n  unit: z.string().optional().describe('The unit or topic for the question paper.'),\n  fileDataUri: z.string().optional().describe(\"The syllabus or notes file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n}).refine(data => data.unit || data.fileDataUri, {\n    message: \"Either a topic or a file must be provided.\",\n});\n\nexport type GenerateQuestionPaperInput = z.infer<typeof GenerateQuestionPaperInputSchema>;\n\nexport const QuestionPaperMCQSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.object({\n    a: z.string(),\n    b: z.string(),\n    c: z.string(),\n    d: z.string(),\n  }).describe('The four multiple-choice options with keys a, b, c, d.'),\n  answer: z.string().describe('The correct answer description.'),\n});\n\nexport type QuestionPaperMCQ = z.infer<typeof QuestionPaperMCQSchema>;\n\nexport const GenerateQuestionPaperOutputSchema = z.object({\n  oneMarkQuestions: z.array(QuestionPaperMCQSchema).describe('An array of 10 one-mark MCQs.'),\n  twoMarkQuestions: z.array(z.string()).describe('An array of 10 two-mark short answer questions.'),\n  tenMarkQuestions: z.array(z.string()).describe('An array of 4 ten-mark descriptive questions.'),\n});\n\nexport type GenerateQuestionPaperOutput = z.infer<typeof GenerateQuestionPaperOutputSchema>;\n\n\n// === Attendance Report Generator Schemas ===\n\nexport const GenerateAttendanceReportInputSchema = z.object({\n  studentName: z.string().describe(\"The name of the student.\"),\n  totalDays: z.number().int().positive().describe(\"The total number of days attendance was tracked.\"),\n  presentDays: z.number().int().describe(\"The number of days the student was present.\"),\n  behaviorTags: z.array(z.string()).describe(\"A list of behavioral tags observed.\"),\n});\n\nexport type GenerateAttendanceReportInput = z.infer<typeof GenerateAttendanceReportInputSchema>;\n\nexport const GenerateAttendanceReportOutputSchema = z.object({\n  report: z.string().describe(\"A concise, one-sentence summary of the student's attendance and behavior.\"),\n});\n\nexport type GenerateAttendanceReportOutput = z.infer<typeof GenerateAttendanceReportOutputSchema>;\n\n// === Manual Attendance Entry Schemas ===\nexport const SaveAttendanceInputSchema = z.object({\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format.\"),\n  subject: z.string().min(1, \"Subject is required.\"),\n  period: z.string().min(1, \"Period is required.\"),\n  status: z.enum([\"Present\", \"Absent\", \"Late\"]),\n  remark: z.string().optional(),\n  behavior_tags: z.string().optional(), // Comma-separated\n});\nexport type SaveAttendanceInput = z.infer<typeof SaveAttendanceInputSchema>;\n\n\n// === Mark Calculator Schemas ===\n\nexport const SaveInternalMarksInputSchema = z.object({\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  subject: z.string().min(1, \"Subject is required.\"),\n  test1: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  test2: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  assignment: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  attendance: z.coerce.number().min(0).max(100, \"Must be between 0 and 100.\"),\n});\nexport type SaveInternalMarksInput = z.infer<typeof SaveInternalMarksInputSchema>;\n\n\nexport const GenerateMarkFeedbackInputSchema = z.object({\n    studentName: z.string(),\n    internalScore: z.number(),\n    grade: z.string(),\n    attendance: z.number(),\n});\nexport type GenerateMarkFeedbackInput = z.infer<typeof GenerateMarkFeedbackInputSchema>;\n\nexport const GenerateMarkFeedbackOutputSchema = z.object({\n    feedback: z.string().describe(\"A concise, one-line summary of the student's performance.\"),\n});\nexport type GenerateMarkFeedbackOutput = z.infer<typeof GenerateMarkFeedbackOutputSchema>;\n\n\n// === Syllabus Tracker Schemas ===\nexport const SaveSyllabusTrackerInputSchema = z.object({\n  subject: z.string().min(3, \"Subject is required.\"),\n  topic: z.string().min(3, \"Topic is required.\"),\n});\n\nexport type SaveSyllabusTrackerInput = z.infer<typeof SaveSyllabusTrackerInputSchema>;\n\n// === Student Profile Schemas ===\nexport const StudentInfoSchema = z.object({\n  student_name: z.string(),\n  roll_no: z.string(),\n});\nexport type StudentInfo = z.infer<typeof StudentInfoSchema>;\n\nexport const TeacherRemarkRecordSchema = z.object({\n  id: z.string(),\n  created_at: z.string(),\n  student_name: z.string().nullable(),\n  roll_no: z.string().nullable(),\n  subject: z.string().nullable(),\n  remark: z.string().nullable(),\n});\n\nexport const StudentProfileDataSchema = z.object({\n  studentName: z.string(),\n  rollNo: z.string(),\n  attendance: z.object({\n    percentage: z.number(),\n    presentDays: z.number(),\n    totalDays: z.number(),\n  }),\n  behaviorTags: z.array(z.string()),\n  marks: z.array(z.object({\n      subject: z.string(),\n      internal_score: z.number(),\n      grade: z.string(),\n  })),\n  remarks: z.array(TeacherRemarkRecordSchema),\n  aiFeedback: z.string().nullable(),\n});\nexport type StudentProfileData = z.infer<typeof StudentProfileDataSchema>;\n\n\n// === Academic Calendar Schemas ===\nexport const SaveAcademicEventInputSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters long.\"),\n  description: z.string().optional(),\n  event_date: z.date({ required_error: \"Please select a date.\" }),\n  event_type: z.enum([\"exam\", \"holiday\", \"meeting\"]),\n});\n\nexport type SaveAcademicEventInput = z.infer<typeof SaveAcademicEventInputSchema>;\n\n// === Assignment Grader Schemas ===\nexport const GradeAssignmentInputSchema = z.object({\n  studentName: z.string().describe(\"The name of the student who submitted the assignment.\"),\n  subject: z.string().describe(\"The subject of the assignment.\"),\n  fileDataUri: z\n    .string()\n    .describe(\n      \"The assignment document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type GradeAssignmentInput = z.infer<typeof GradeAssignmentInputSchema>;\n\nexport const GradeAssignmentOutputSchema = z.object({\n  score: z.number().min(0).max(10).describe(\"The numerical score for the assignment, out of 10.\"),\n  feedback: z.string().describe(\"Concise, constructive feedback for the student, explaining the score.\"),\n});\nexport type GradeAssignmentOutput = z.infer<typeof GradeAssignmentOutputSchema>;\n\n// === Project Tracker Schemas ===\nexport const ProjectTrackerInputSchema = z.object({\n  id: z.string().optional(),\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  project_title: z.string().min(5, \"Project title is required.\"),\n  mentor_name: z.string().min(1, \"Mentor name is required.\"),\n  topic_selected: z.boolean().default(false),\n  review1_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  review1_feedback: z.string().optional().nullable(),\n  review2_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  review2_feedback: z.string().optional().nullable(),\n  final_submission: z.boolean().default(false),\n  final_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  final_feedback: z.string().optional().nullable(),\n});\nexport type ProjectTrackerInput = z.infer<typeof ProjectTrackerInputSchema>;\n\n\n// === Student Document Vault Schemas ===\nexport const UploadStudentDocumentInputSchema = z.object({\n  student_name: z.string().min(2, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  doc_type: z.enum([\"Bonafide\", \"Report\", \"Certificate\", \"Other\"], {\n    required_error: \"Please select a document type.\"\n  }),\n});\nexport type UploadStudentDocumentInput = z.infer<typeof UploadStudentDocumentInputSchema>;\n\n\n// === Classroom Gamifier Schemas ===\nexport const GenerateClassroomGameInputSchema = z.object({\n  topic: z.string().describe(\"The topic to generate a game for.\"),\n});\nexport type GenerateClassroomGameInput = z.infer<typeof GenerateClassroomGameInputSchema>;\n\nexport const GameQuizQuestionSchema = z.object({\n  question: z.string().describe(\"The quiz question text.\"),\n  options: z.object({\n    A: z.string(),\n    B: z.string(),\n    C: z.string(),\n    D: z.string(),\n  }).describe(\"The four multiple-choice options.\"),\n  answer: z.enum(['A', 'B', 'C', 'D']).describe(\"The key of the correct option.\"),\n});\nexport type GameQuizQuestion = z.infer<typeof GameQuizQuestionSchema>;\n\nexport const GamePuzzleSchema = z.object({\n  scrambled: z.string().describe(\"The scrambled word puzzle.\"),\n  answer: z.string().describe(\"The unscrambled correct word.\"),\n});\nexport type GamePuzzle = z.infer<typeof GamePuzzleSchema>;\n\nexport const GenerateClassroomGameOutputSchema = z.object({\n  quiz: z.array(GameQuizQuestionSchema).describe(\"An array of 5 quiz questions.\"),\n  puzzle: GamePuzzleSchema.describe(\"A word scramble puzzle.\"),\n});\nexport type GenerateClassroomGameOutput = z.infer<typeof GenerateClassroomGameOutputSchema>;\n\nexport const SaveGameScoreInputSchema = z.object({\n    player_name: z.string().min(2, \"Player name must be at least 2 characters.\"),\n    topic: z.string(),\n    score: z.number().int().min(0),\n});\nexport type SaveGameScoreInput = z.infer<typeof SaveGameScoreInputSchema>;\n\nexport const CustomQuizQuestionSchema = z.object({\n    question: z.string().min(1, \"Question text cannot be empty.\"),\n    options: z.object({\n        A: z.string().min(1, \"Option A cannot be empty.\"),\n        B: z.string().min(1, \"Option B cannot be empty.\"),\n        C: z.string().min(1, \"Option C cannot be empty.\"),\n        D: z.string().min(1, \"Option D cannot be empty.\"),\n    }),\n    answer: z.enum([\"A\", \"B\", \"C\", \"D\"]),\n});\nexport type CustomQuizQuestion = z.infer<typeof CustomQuizQuestionSchema>;\n\nexport const CreateCustomQuizInputSchema = z.object({\n    topic: z.string().min(3, \"Topic must be at least 3 characters long.\"),\n    questions: z.array(CustomQuizQuestionSchema).min(1, \"You must add at least one question.\"),\n});\nexport type CreateCustomQuizInput = z.infer<typeof CreateCustomQuizInputSchema>;\n\n\n// === Knowledge Galaxy Schemas ===\nexport const GenerateKnowledgeGalaxyInputSchema = z.object({\n  subject: z.string().optional().describe(\"The subject to generate the knowledge galaxy for.\"),\n  fileDataUri: z.string().optional().describe(\"The syllabus file to generate the knowledge galaxy from, as a data URI.\"),\n}).refine(data => data.subject || data.fileDataUri, {\n    message: \"Either a subject or a file must be provided.\",\n});\nexport type GenerateKnowledgeGalaxyInput = z.infer<typeof GenerateKnowledgeGalaxyInputSchema>;\n\nconst MoonSchema = z.object({\n  name: z.string().describe(\"Name of the sub-topic (moon).\"),\n  description: z.string().describe(\"A brief, one-sentence description of the sub-topic.\"),\n});\nexport type Moon = z.infer<typeof MoonSchema>;\n\nconst PlanetSchema = z.object({\n  name: z.string().describe(\"Name of the core concept (planet).\"),\n  description: z.string().describe(\"A brief, one-sentence description of the core concept.\"),\n  moons: z.array(MoonSchema).describe(\"An array of related sub-topics (moons).\"),\n});\nexport type Planet = z.infer<typeof PlanetSchema>;\n\nexport const GenerateKnowledgeGalaxyOutputSchema = z.object({\n  subject: z.string().describe(\"The subject of the generated galaxy.\"),\n  planets: z.array(PlanetSchema).describe(\"An array of core concepts (planets) for the subject.\"),\n});\nexport type GenerateKnowledgeGalaxyOutput = z.infer<typeof GenerateKnowledgeGalaxyOutputSchema>;\n\n\n// === Plagiarism Checker Schemas ===\nexport const PlagiarismCheckInputSchema = z.object({\n    doc1Name: z.string().describe(\"The filename of the first document.\"),\n    doc1Content: z.string().describe(\"The content of the first document, either as a data URI or as extracted text.\"),\n    doc1MimeType: z.string().describe(\"The MIME type of the first document.\"),\n    doc2Name: z.string().describe(\"The filename of the second document.\"),\n    doc2Content: z.string().describe(\"The content of the second document, either as a data URI or as extracted text.\"),\n    doc2MimeType: z.string().describe(\"The MIME type of the second document.\"),\n});\nexport type PlagiarismCheckInput = z.infer<typeof PlagiarismCheckInputSchema>;\n\nexport const PlagiarismCheckOutputSchema = z.object({\n    similarityPercentage: z.number().min(0).max(100).describe(\"The percentage of similarity between the two documents.\"),\n    analysis: z.string().describe(\"A detailed breakdown of the similarities found between the two documents.\"),\n    verdict: z.enum([\"No Plagiarism Detected\", \"Low Similarity\", \"Moderate Similarity\", \"High Similarity\", \"Likely Plagiarized\"]).describe(\"The final conclusion on the similarity level.\"),\n});\nexport type PlagiarismCheckOutput = z.infer<typeof PlagiarismCheckOutputSchema>;\n\n\n// === Supabase Table Record Types ===\n\nexport type PerformanceReport = {\n  id: string;\n  created_at: string;\n  student_name: string;\n  subject: string | null;\n  score: number | null;\n  total: number | null;\n  feedback: string | Record<string, any>;\n  improvement_plan: string | Record<string, any>;\n};\n\nexport type AttendanceRecord = {\n    id: string;\n    date: string;\n    subject: string;\n    student_name: string;\n    roll_no: string;\n    status: 'Present' | 'Absent' | 'Late';\n    remark: string | null;\n    behavior_tags: string | null;\n    created_at: string;\n};\n\nexport type InternalMarksRecord = {\n    id: string;\n    student_name: string;\n    roll_no: string;\n    subject: string;\n    test1: number;\n    test2: number;\n    assignment: number;\n    attendance: number;\n    internal_score: number;\n    grade: string;\n    feedback: string;\n    created_at: string;\n};\n\nexport type SyllabusTrackerRecord = {\n  id: string;\n  subject: string;\n  topic: string;\n  completed: boolean;\n  uploaded_by: string | null;\n  created_at: string;\n};\n\nexport type TeacherRemarkRecord = {\n  id: string;\n  created_at: string;\n  student_name: string | null;\n  roll_no: string | null;\n  subject: string | null;\n  remark: string | null;\n};\n\nexport type AcademicEventRecord = {\n  id: string;\n  created_at: string;\n  title: string | null;\n  description: string | null;\n  event_date: string; // YYYY-MM-DD\n  event_type: 'exam' | 'holiday' | 'meeting' | null;\n  posted_by: string | null;\n};\n\nexport type AssignmentScoreRecord = {\n  id: string;\n  created_at: string;\n  student_name: string;\n  subject: string;\n  score: number;\n  feedback: string;\n};\n\nexport type ProjectTrackerRecord = {\n  id: string;\n  student_name: string;\n  roll_no: string;\n  project_title: string;\n  mentor_name: string;\n  topic_selected: boolean;\n  review1_score: number | null;\n  review1_feedback: string | null;\n  review2_score: number | null;\n  review2_feedback: string | null;\n  final_submission: boolean;\n  final_score: number | null;\n  final_feedback: string | null;\n  updated_at: string;\n};\n\nexport type StudentDocumentRecord = {\n  id: string;\n  uploaded_at: string;\n  student_name: string;\n  roll_no: string;\n  doc_type: string;\n  file_url: string;\n  file_path: string | null;\n  uploaded_by: string;\n  verified: boolean;\n};\n\nexport type ClassroomGameRecord = {\n  id: string;\n  created_at: string;\n  topic: string;\n  game_data: GenerateClassroomGameOutput;\n};\n\nexport type GameLeaderboardRecord = {\n    id: string;\n    created_at: string;\n    player_name: string;\n    topic: string;\n    score: number;\n};\n\nexport type CustomQuizRecord = {\n    id: string;\n    created_at: string;\n    topic: string;\n    questions: CustomQuizQuestion[];\n    created_by: string | null;\n};\n\n\n// === Auth Schemas ===\nexport const LoginSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(1, { message: \"Password is required.\" }),\n});\nexport type LoginInput = z.infer<typeof LoginSchema>;\n\n\nexport const RegisterSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(6, { message: \"Password must be at least 6 characters.\" }),\n  confirmPassword: z.string().min(6, { message: \"Password must be at least 6 characters.\" }),\n  department: z.string().min(2, { message: \"Department is required.\" }),\n  college_name: z.string().min(3, { message: \"College name is required.\" }),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match.\",\n  path: [\"confirmPassword\"],\n});\nexport type RegisterInput = z.infer<typeof RegisterSchema>;\n"],"names":[],"mappings":"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","debugId":null}}]
}