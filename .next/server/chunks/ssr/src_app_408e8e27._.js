module.exports = {

"[project]/src/app/data:4f97f6 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40f650b05981e40161626499b34dc6181b639c5a9f":"generateQuestionsAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateQuestionsAction": (()=>generateQuestionsAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateQuestionsAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40f650b05981e40161626499b34dc6181b639c5a9f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateQuestionsAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:800d15 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ed7ed3546442b22df4cc28e32432e6a0ee01dc59":"generateQuestionsFromFileAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateQuestionsFromFileAction": (()=>generateQuestionsFromFileAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateQuestionsFromFileAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ed7ed3546442b22df4cc28e32432e6a0ee01dc59", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateQuestionsFromFileAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:a71d31 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40cc978934b5b114d90d85a3b36888afdcea2ada31":"generateFeedbackAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateFeedbackAction": (()=>generateFeedbackAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateFeedbackAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40cc978934b5b114d90d85a3b36888afdcea2ada31", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateFeedbackAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:5136da [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40f68a98d83e3d1882e37935b05c4883db334cca48":"generateAdviceAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateAdviceAction": (()=>generateAdviceAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateAdviceAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40f68a98d83e3d1882e37935b05c4883db334cca48", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateAdviceAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:c20b59 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"005e55c92be8a1dc150c3310fff4b15e1ca5939299":"getPerformanceReports"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getPerformanceReports": (()=>getPerformanceReports)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getPerformanceReports = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("005e55c92be8a1dc150c3310fff4b15e1ca5939299", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getPerformanceReports"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:0adaf5 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"401400a6e18bca2ea83d5270232ff04473e1236ffa":"generateQuestionPaperAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateQuestionPaperAction": (()=>generateQuestionPaperAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateQuestionPaperAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("401400a6e18bca2ea83d5270232ff04473e1236ffa", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateQuestionPaperAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:466167 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"002b65b4b4dc82e42d9334c115d6e0819dda0d88e1":"getAttendanceRecords"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAttendanceRecords": (()=>getAttendanceRecords)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAttendanceRecords = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("002b65b4b4dc82e42d9334c115d6e0819dda0d88e1", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAttendanceRecords"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:926174 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4023a7c6abb0208ea9c02edf3ca9942360ad2e6476":"generateAttendanceReportAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateAttendanceReportAction": (()=>generateAttendanceReportAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateAttendanceReportAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4023a7c6abb0208ea9c02edf3ca9942360ad2e6476", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateAttendanceReportAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:7de965 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"405d8267c8443e130deee27819438e00d91f229832":"saveAttendanceAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "saveAttendanceAction": (()=>saveAttendanceAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var saveAttendanceAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("405d8267c8443e130deee27819438e00d91f229832", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "saveAttendanceAction"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblwidXNlIHNlcnZlclwiO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9ucyB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVGZWVkYmFjayB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlIH0gZnJvbSBcIkAvYWkvZmxvd3MvZ2VuZXJhdGUtcXVlc3Rpb25zLWZyb20tZmlsZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVBZHZpY2UgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hZHZpY2VcIjtcbmltcG9ydCB7IGdlbmVyYXRlUXVlc3Rpb25QYXBlciB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uLXBhcGVyXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hdHRlbmRhbmNlLXJlcG9ydFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVNYXJrRmVlZGJhY2sgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1tYXJrLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBncmFkZUFzc2lnbm1lbnQgfSBmcm9tIFwiQC9haS9mbG93cy9ncmFkZS1hc3NpZ25tZW50LWZsb3dcIjtcbmltcG9ydCB7IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWNsYXNzcm9vbS1nYW1lXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUtub3dsZWRnZUdhbGF4eSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWtub3dsZWRnZS1nYWxheHlcIjtcbmltcG9ydCB7IGNoZWNrUGxhZ2lhcmlzbSB9IGZyb20gXCJAL2FpL2Zsb3dzL2NoZWNrLXBsYWdpYXJpc21cIjtcbmltcG9ydCB7IFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEsXG4gICAgR2VuZXJhdGVGZWVkYmFja0lucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUFkdmljZUlucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25QYXBlcklucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLFxuICAgIFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEsXG4gICAgU2F2ZUludGVybmFsTWFya3NJbnB1dFNjaGVtYSxcbiAgICBTYXZlU3lsbGFidXNUcmFja2VySW5wdXRTY2hlbWEsXG4gICAgU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYSxcbiAgICBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYSxcbiAgICBQcm9qZWN0VHJhY2tlcklucHV0U2NoZW1hLFxuICAgIFVwbG9hZFN0dWRlbnREb2N1bWVudElucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZUlucHV0U2NoZW1hLFxuICAgIFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLFxuICAgIENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYSxcbiAgICBMb2dpblNjaGVtYSxcbiAgICBSZWdpc3RlclNjaGVtYSxcbiAgICBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYSxcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXQsIFxuICAgIHR5cGUgR2VuZXJhdGVGZWVkYmFja0lucHV0LCBcbiAgICB0eXBlIEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQsXG4gICAgdHlwZSBNQ1FRdWVzdGlvbixcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQWR2aWNlT3V0cHV0LFxuICAgIHR5cGUgR2VuZXJhdGVRdWVzdGlvblBhcGVySW5wdXQsXG4gICAgdHlwZSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsXG4gICAgdHlwZSBHZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dCxcbiAgICB0eXBlIFNhdmVBdHRlbmRhbmNlSW5wdXQsXG4gICAgdHlwZSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0LFxuICAgIHR5cGUgUGVyZm9ybWFuY2VSZXBvcnQsXG4gICAgdHlwZSBBdHRlbmRhbmNlUmVjb3JkLFxuICAgIHR5cGUgU3lsbGFidXNUcmFja2VyUmVjb3JkLFxuICAgIHR5cGUgU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0LFxuICAgIHR5cGUgVGVhY2hlclJlbWFya1JlY29yZCxcbiAgICB0eXBlIFN0dWRlbnRJbmZvLFxuICAgIHR5cGUgU3R1ZGVudFByb2ZpbGVEYXRhLFxuICAgIHR5cGUgQWNhZGVtaWNFdmVudFJlY29yZCxcbiAgICB0eXBlIEdyYWRlQXNzaWdubWVudE91dHB1dCxcbiAgICB0eXBlIFByb2plY3RUcmFja2VySW5wdXQsXG4gICAgdHlwZSBQcm9qZWN0VHJhY2tlclJlY29yZCxcbiAgICB0eXBlIFN0dWRlbnREb2N1bWVudFJlY29yZCxcbiAgICB0eXBlIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCxcbiAgICB0eXBlIEdhbWVMZWFkZXJib2FyZFJlY29yZCxcbiAgICB0eXBlIFNhdmVHYW1lU2NvcmVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LFxuICAgIHR5cGUgQ3JlYXRlQ3VzdG9tUXVpeklucHV0LFxuICAgIHR5cGUgQ3VzdG9tUXVpelJlY29yZCxcbiAgICB0eXBlIExvZ2luSW5wdXQsXG4gICAgdHlwZSBSZWdpc3RlcklucHV0LFxuICAgIHR5cGUgR2VuZXJhdGVLbm93bGVkZ2VHYWxheHlJbnB1dCxcbiAgICB0eXBlIFBsYWdpYXJpc21DaGVja0lucHV0LFxuICAgIHR5cGUgUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LFxufSBmcm9tIFwiQC9haS9zY2hlbWFzXCI7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUFkbWluIH0gZnJvbSBcIkAvbGliL3N1cGFiYXNlL2FkbWluXCI7XG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXJDbGllbnQgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2Uvc2VydmVyXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IHJldmFsaWRhdGVQYXRoIH0gZnJvbSBcIm5leHQvY2FjaGVcIjtcbmltcG9ydCB7IHJlZGlyZWN0IH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2UvY2xpZW50XCI7XG5pbXBvcnQgbWFtbW90aCBmcm9tICdtYW1tb3RoJztcblxuLy8gPT09IFF1ZXN0aW9uIEFjdGlvbnMgPT09XG50eXBlIFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2UgPSB7XG4gIHF1ZXN0aW9ucz86IE1DUVF1ZXN0aW9uW107XG4gIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uc1RvU3VwYWJhc2UocXVlc3Rpb25zOiBNQ1FRdWVzdGlvbltdLCB0b3BpYz86IHN0cmluZykge1xuICAgIGlmICghdG9waWMgfHwgcXVlc3Rpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcXVlc3Rpb25zVG9JbnNlcnQgPSBxdWVzdGlvbnMubWFwKHEgPT4gKHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBxdWVzdGlvbl90ZXh0OiBxLnF1ZXN0aW9uLFxuICAgICAgICBvcHRpb25fYTogcS5vcHRpb25zLkEsXG4gICAgICAgIG9wdGlvbl9iOiBxLm9wdGlvbnMuQixcbiAgICAgICAgb3B0aW9uX2M6IHEub3B0aW9ucy5DLFxuICAgICAgICBvcHRpb25fZDogcS5vcHRpb25zLkQsXG4gICAgICAgIGNvcnJlY3Rfb3B0aW9uOiBxLmFuc3dlclxuICAgIH0pKTtcblxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdtY3FfcXVlc3Rpb25zJykuaW5zZXJ0KHF1ZXN0aW9uc1RvSW5zZXJ0KTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBxdWVzdGlvbnMgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0FjdGlvbihpbnB1dDogR2VuZXJhdGVRdWVzdGlvbnNJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25BY3Rpb25SZXNwb25zZT4ge1xuICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlUXVlc3Rpb25zKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcXVlc3Rpb25zLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXQpOiBQcm9taXNlPFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2U+IHtcbiAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbiBmcm9tIGZpbGU6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnMgZnJvbSBmaWxlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHF1ZXN0aW9ucyBmcm9tIHRoZSBmaWxlLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVGZWVkYmFja1RvU3VwYWJhc2UoZmVlZGJhY2tEYXRhOiBHZW5lcmF0ZUZlZWRiYWNrT3V0cHV0LCBpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KSB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHNjb3JlID0gT2JqZWN0LnZhbHVlcyhpbnB1dC5tYXJrcykucmVkdWNlKChzdW0sIG1hcmspID0+IHN1bSArIG1hcmssIDApO1xuICAgIGNvbnN0IHRvdGFsID0gaW5wdXQuc3ViamVjdHMubGVuZ3RoICogMTAwOyAvLyBBc3N1bWluZyAxMDAgbWF4IG1hcmtzIHBlciBzdWJqZWN0LCBjb25zaXN0ZW50IHdpdGggZ3JhZGUtYW5hbHl6ZXJcbiAgICBjb25zdCBzdWJqZWN0ID0gaW5wdXQuc3ViamVjdHMuam9pbignLCAnKTtcblxuICAgIGNvbnN0IHJlcG9ydFRvSW5zZXJ0ID0ge1xuICAgICAgc3R1ZGVudF9uYW1lOiBpbnB1dC5zdHVkZW50TmFtZSxcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICBzY29yZTogc2NvcmUsXG4gICAgICB0b3RhbDogdG90YWwsXG4gICAgICBmZWVkYmFjazogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN0cmVuZ3RoczogZmVlZGJhY2tEYXRhLnN0cmVuZ3RocyxcbiAgICAgICAgICB3ZWFrbmVzc2VzOiBmZWVkYmFja0RhdGEud2Vha25lc3NlcyxcbiAgICAgICAgICBpbXByb3ZlbWVudFRpcHM6IGZlZWRiYWNrRGF0YS5pbXByb3ZlbWVudFRpcHMsXG4gICAgICB9KSxcbiAgICAgIGltcHJvdmVtZW50X3BsYW46IEpTT04uc3RyaW5naWZ5KGZlZWRiYWNrRGF0YS5zdHVkeVBsYW4pLFxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpLmluc2VydChbcmVwb3J0VG9JbnNlcnRdKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBwZXJmb3JtYW5jZSByZXBvcnQgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbnR5cGUgRmVlZGJhY2tBY3Rpb25SZXNwb25zZSA9IHtcbiAgICBmZWVkYmFjaz86IEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQ7XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVGZWVkYmFja0FjdGlvbihpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KTogUHJvbWlzZTxGZWVkYmFja0FjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUZlZWRiYWNrSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0IGZvciBmZWVkYmFjayBnZW5lcmF0aW9uLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVGZWVkYmFjayhwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICAgICAgYXdhaXQgc2F2ZUZlZWRiYWNrVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBvdXRwdXQgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBmZWVkYmFjazpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgQUkgZmVlZGJhY2suIFRoZSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIEFkdmljZUFjdGlvblJlc3BvbnNlID0ge1xuICAgIGFkdmljZT86IEdlbmVyYXRlQWR2aWNlT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUFkdmljZVRvU3VwYWJhc2UoYWR2aWNlOiBHZW5lcmF0ZUFkdmljZU91dHB1dCwgaW5wdXQ6IHsgc3ViamVjdD86IHN0cmluZzsgdGV4dD86IHN0cmluZzsgZmlsZURhdGFVcmk/OiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcblxuICAgIGNvbnN0IHBsYW5Ub0luc2VydCA9IHtcbiAgICAgIHRlYWNoZXJfaWQ6IG51bGwsIC8vIE5vIHVzZXIgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICAgIHN1YmplY3Q6IGlucHV0LnN1YmplY3QsXG4gICAgICB1cGxvYWRlZF9jb250ZW50OiBpbnB1dC5maWxlRGF0YVVyaSB8fCBpbnB1dC50ZXh0LFxuICAgICAgY292ZXJlZF90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5jb3ZlcmVkVG9waWNzKSxcbiAgICAgIG5leHRfdG9waWM6IGFkdmljZS5uZXh0VG9waWMsXG4gICAgICByZXZpc2lvbl90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5zdWdnZXN0ZWRSZXZpc2lvbnMpLFxuICAgICAgbWlzc2VkX2NvbmNlcHRzOiBKU09OLnN0cmluZ2lmeShhZHZpY2Uuc2tpcHBlZENvbmNlcHRzKVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgndGVhY2hpbmdfcGxhbnMnKS5pbnNlcnQoW3BsYW5Ub0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHRlYWNoaW5nIHBsYW4gdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUFkdmljZUFjdGlvbihpbnB1dDogeyBzdWJqZWN0Pzogc3RyaW5nOyB0ZXh0Pzogc3RyaW5nOyBmaWxlRGF0YVVyaT86IHN0cmluZyB9KTogUHJvbWlzZTxBZHZpY2VBY3Rpb25SZXNwb25zZT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVBZHZpY2VJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhZHZpY2UgZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlQWR2aWNlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlQWR2aWNlVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGFkdmljZTogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYWR2aWNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkZhaWxlZCB0byBnZW5lcmF0ZSB0ZWFjaGluZyBhZHZpY2UuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIFJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydHM/OiBQZXJmb3JtYW5jZVJlcG9ydFtdO1xuICAgIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGVyZm9ybWFuY2VSZXBvcnRzKCk6IFByb21pc2U8UmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInBlcmZvcm1hbmNlX3JlcG9ydHNcIilcbiAgICAgIC5zZWxlY3QoXCIqXCIpXG4gICAgICAub3JkZXIoXCJjcmVhdGVkX2F0XCIsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcGVyZm9ybWFuY2UgcmVwb3J0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcGVyZm9ybWFuY2UgcmVwb3J0cy4gUGxlYXNlIGVuc3VyZSB0aGUgJ3BlcmZvcm1hbmNlX3JlcG9ydHMnIHRhYmxlIGV4aXN0cyBhbmQgdGhhdCB5b3VyIFN1cGFiYXNlIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0LlwiIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVwb3J0czogZGF0YSBhcyBQZXJmb3JtYW5jZVJlcG9ydFtdIH07XG59XG5cbnR5cGUgUXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlID0ge1xuICAgIHBhcGVyPzogR2VuZXJhdGVRdWVzdGlvblBhcGVyT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uUGFwZXJUb1N1cGFiYXNlKHBhcGVyOiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsIGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBwYXBlclRvSW5zZXJ0ID0ge1xuICAgICAgdGVhY2hlcl9pZDogbnVsbCwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgICAgc3ViamVjdDogaW5wdXQuc3ViamVjdCxcbiAgICAgIHVuaXQ6IGlucHV0LnVuaXQgfHwgYEZpbGU6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXG4gICAgICBvbmVfbWFyazogcGFwZXIub25lTWFya1F1ZXN0aW9ucyxcbiAgICAgIHR3b19tYXJrOiBwYXBlci50d29NYXJrUXVlc3Rpb25zLFxuICAgICAgdGVuX21hcms6IHBhcGVyLnRlbk1hcmtRdWVzdGlvbnMsXG4gICAgfTtcblxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3F1ZXN0aW9uX3BhcGVyc192MicpLmluc2VydChbcGFwZXJUb0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHF1ZXN0aW9uIHBhcGVyIHRvIFN1cGFiYXNlOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVRdWVzdGlvblBhcGVyQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBxdWVzdGlvbiBwYXBlciBnZW5lcmF0aW9uOlwiLCBwYXJzZWRJbnB1dC5lcnJvci5mbGF0dGVuKCkpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVRdWVzdGlvblBhcGVyKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlUXVlc3Rpb25QYXBlclRvU3VwYWJhc2Uob3V0cHV0LCBwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwYXBlcjogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgcXVlc3Rpb24gcGFwZXI6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHRoZSBxdWVzdGlvbiBwYXBlci4gVGhlIEFJIG1vZGVsIG1heSBiZSB1bmF2YWlsYWJsZSBvciB0aGUgcmVxdWVzdCB0aW1lZCBvdXQuIFBsZWFzZSB0cnkgYWdhaW4uXCIgfTtcbiAgICB9XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlc3BvbnNlID0ge1xuICAgIHJlY29yZHM/OiBBdHRlbmRhbmNlUmVjb3JkW107XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXR0ZW5kYW5jZVJlY29yZHMoKTogUHJvbWlzZTxBdHRlbmRhbmNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdkYXRlJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGF0dGVuZGFuY2UgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhdHRlbmRhbmNlIGRhdGEuIFBsZWFzZSBlbnN1cmUgdGhlICdzdHVkZW50X2F0dGVuZGFuY2UnIHRhYmxlIGV4aXN0cy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgYXMgQXR0ZW5kYW5jZVJlY29yZFtdIH07XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydD86IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRBY3Rpb24oaW5wdXQ6IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0KTogUHJvbWlzZTxBdHRlbmRhbmNlUmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIGF0dGVuZGFuY2UgcmVwb3J0IGdlbmVyYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIHJldHVybiB7IHJlcG9ydDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYXR0ZW5kYW5jZSByZXBvcnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIGF0dGVuZGFuY2UgcmVwb3J0LiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVBdHRlbmRhbmNlQWN0aW9uKGlucHV0OiBTYXZlQXR0ZW5kYW5jZUlucHV0KTogUHJvbWlzZTx7IG1lc3NhZ2U/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IHBhcnNlZElucHV0O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBkYXRhLnN0dWRlbnRfbmFtZSxcbiAgICAgICAgcm9sbF9ubzogZGF0YS5yb2xsX25vLFxuICAgICAgICBkYXRlOiBkYXRhLmRhdGUsIFxuICAgICAgICBzdWJqZWN0OiBkYXRhLnN1YmplY3QsXG4gICAgICAgIHBlcmlvZDogZGF0YS5wZXJpb2QsXG4gICAgICAgIHN0YXR1czogZGF0YS5zdGF0dXMsXG4gICAgICAgIHJlbWFyazogZGF0YS5yZW1hcmsgfHwgbnVsbCxcbiAgICAgICAgYmVoYXZpb3JfdGFnczogZGF0YS5iZWhhdmlvcl90YWdzIHx8IG51bGwsXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhdHRlbmRhbmNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIGF0dGVuZGFuY2UgZGF0YSBkdWUgdG8gYSBkYXRhYmFzZSBlcnJvci5cIiB9O1xuICAgIH1cbiAgICBcbiAgICByZXZhbGlkYXRlUGF0aCgnLycpO1xuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTYXZlZCBhdHRlbmRhbmNlIGZvciAke2RhdGEuc3R1ZGVudF9uYW1lfSAoJHtkYXRhLnBlcmlvZH0pIOKAlCAke2RhdGEuc3RhdHVzfSBvbiAke2RhdGEuZGF0ZX1gfTtcbn1cblxudHlwZSBNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlID0ge1xuICAgIGZlZWRiYWNrPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVJbnRlcm5hbE1hcmtzQWN0aW9uKGlucHV0OiBTYXZlSW50ZXJuYWxNYXJrc0lucHV0KTogUHJvbWlzZTxNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIG1hcmsgY2FsY3VsYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN0dWRlbnRfbmFtZSwgcm9sbF9ubywgc3ViamVjdCwgdGVzdDEsIHRlc3QyLCBhc3NpZ25tZW50LCBhdHRlbmRhbmNlIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IGludGVybmFsX3Njb3JlID0gdGVzdDEgKyB0ZXN0MiArIGFzc2lnbm1lbnQ7XG4gICAgXG4gICAgbGV0IGdyYWRlID0gJ0YnO1xuICAgIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyNykgZ3JhZGUgPSAnQSsnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDI0KSBncmFkZSA9ICdBJztcbiAgICBlbHNlIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyMSkgZ3JhZGUgPSAnQic7XG4gICAgZWxzZSBpZiAoaW50ZXJuYWxfc2NvcmUgPj0gMTgpIGdyYWRlID0gJ0MnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDE1KSBncmFkZSA9ICdEJztcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIEdlbmVyYXRlIEFJIGZlZWRiYWNrXG4gICAgICAgIGNvbnN0IGZlZWRiYWNrUmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVNYXJrRmVlZGJhY2soe1xuICAgICAgICAgICAgc3R1ZGVudE5hbWU6IHN0dWRlbnRfbmFtZSxcbiAgICAgICAgICAgIGludGVybmFsU2NvcmU6IGludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgZ3JhZGU6IGdyYWRlLFxuICAgICAgICAgICAgYXR0ZW5kYW5jZTogYXR0ZW5kYW5jZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFmZWVkYmFja1Jlc3VsdC5mZWVkYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQUkgZmFpbGVkIHRvIGdlbmVyYXRlIGZlZWRiYWNrLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgICAgICAvLyBTYXZlIHRvIFN1cGFiYXNlXG4gICAgICAgIGNvbnN0IHJlY29yZFRvSW5zZXJ0ID0ge1xuICAgICAgICAgICAgc3R1ZGVudF9uYW1lLFxuICAgICAgICAgICAgcm9sbF9ubyxcbiAgICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgICB0ZXN0MSxcbiAgICAgICAgICAgIHRlc3QyLFxuICAgICAgICAgICAgYXNzaWdubWVudCxcbiAgICAgICAgICAgIGF0dGVuZGFuY2UsXG4gICAgICAgICAgICBpbnRlcm5hbF9zY29yZSxcbiAgICAgICAgICAgIGdyYWRlLFxuICAgICAgICAgICAgZmVlZGJhY2s6IGZlZWRiYWNrUmVzdWx0LmZlZWRiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBlcnJvcjogZGJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnaW50ZXJuYWxfbWFya3MnKS5pbnNlcnQoW3JlY29yZFRvSW5zZXJ0XSk7XG5cbiAgICAgICAgaWYgKGRiRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgaW50ZXJuYWwgbWFya3MgdG8gU3VwYWJhc2U6XCIsIGRiRXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHNhdmUgdGhlIHJlY29yZCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBmZWVkYmFja1Jlc3VsdC5mZWVkYmFjayB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBzYXZlSW50ZXJuYWxNYXJrc0FjdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZmVlZGJhY2sgZ2VuZXJhdGlvbiBvciBzYXZpbmcuXCI7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeWxsYWJ1c1RyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogU3lsbGFidXNUcmFja2VyUmVjb3JkW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N5bGxhYnVzX3RyYWNrZXInKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN5bGxhYnVzIHRyYWNrZXIgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzeWxsYWJ1cyB0cmFja2VyIGRhdGEuIFBsZWFzZSBjaGVjayB5b3VyIFJMUyBwb2xpY2llcy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVTeWxsYWJ1c1RyYWNrZXJBY3Rpb24oaW5wdXQ6IFNhdmVTeWxsYWJ1c1RyYWNrZXJJbnB1dCk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcblxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBzdWJqZWN0LCB0b3BpYyB9ID0gcGFyc2VkSW5wdXQuZGF0YTtcbiAgICBcbiAgICBjb25zdCByZWNvcmQgPSB7XG4gICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgY29tcGxldGVkOiBmYWxzZSwgLy8gQWx3YXlzIGZhbHNlIG9uIGNyZWF0aW9uXG4gICAgICAgIHVwbG9hZGVkX2J5OiBudWxsLCAvLyBObyB1c2VyIHRvIGFzc29jaWF0ZSB3aXRoXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdzeWxsYWJ1c190cmFja2VyJykuaW5zZXJ0KFtyZWNvcmRdKTtcbiAgICAgICAgICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW5zZXJ0aW5nIHN5bGxhYnVzIHRvcGljOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIHN5bGxhYnVzIGRhdGEgZHVlIHRvIGEgZGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBgQWRkZWQgdG9waWMgXCIke3RvcGljfVwiIHRvICR7c3ViamVjdH0uYH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTeWxsYWJ1c1RvcGljU3RhdHVzQWN0aW9uKGlkOiBzdHJpbmcsIGNvbXBsZXRlZDogYm9vbGVhbik6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3lsbGFidXNfdHJhY2tlcicpXG4gICAgICAgIC51cGRhdGUoeyBjb21wbGV0ZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgc3lsbGFidXMgdG9waWM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSB0b3BpYyBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBcIlRvcGljIHN0YXR1cyB1cGRhdGVkLlwiIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRMaXN0KCk6IFByb21pc2U8eyBzdHVkZW50cz86IFN0dWRlbnRJbmZvW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCdzdHVkZW50X25hbWUsIHJvbGxfbm8nKVxuICAgICAgICAub3JkZXIoJ3N0dWRlbnRfbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN0dWRlbnQgbGlzdDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiAnQ291bGQgbm90IGZldGNoIHN0dWRlbnQgbGlzdC4nIH07XG4gICAgfVxuXG4gICAgY29uc3QgdW5pcXVlU3R1ZGVudHMgPSBBcnJheS5mcm9tKG5ldyBNYXAoZGF0YS5tYXAoaXRlbSA9PiBbaXRlbS5yb2xsX25vLCBpdGVtXSkpLnZhbHVlcygpKTtcbiAgICBcbiAgICByZXR1cm4geyBzdHVkZW50czogdW5pcXVlU3R1ZGVudHMgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRQcm9maWxlRGF0YShyb2xsTm86IHN0cmluZyk6IFByb21pc2U8eyBwcm9maWxlPzogU3R1ZGVudFByb2ZpbGVEYXRhLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIGNvbnN0IHsgZGF0YTogYXR0ZW5kYW5jZURhdGEsIGVycm9yOiBhdHRlbmRhbmNlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N0YXR1cywgYmVoYXZpb3JfdGFncycpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pO1xuICAgICAgICBpZiAoYXR0ZW5kYW5jZUVycm9yKSB0aHJvdyBuZXcgRXJyb3IoYEF0dGVuZGFuY2UgZmV0Y2ggZmFpbGVkOiAke2F0dGVuZGFuY2VFcnJvci5tZXNzYWdlfWApO1xuXG4gICAgICAgIGNvbnN0IHRvdGFsRGF5cyA9IGF0dGVuZGFuY2VEYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcHJlc2VudERheXMgPSBhdHRlbmRhbmNlRGF0YS5maWx0ZXIociA9PiByLnN0YXR1cyA9PT0gJ1ByZXNlbnQnIHx8IHIuc3RhdHVzID09PSAnTGF0ZScpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYXR0ZW5kYW5jZVBlcmNlbnRhZ2UgPSB0b3RhbERheXMgPiAwID8gTWF0aC5yb3VuZCgocHJlc2VudERheXMgLyB0b3RhbERheXMpICogMTAwKSA6IDA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBiZWhhdmlvclRhZ3MgPSBbLi4ubmV3IFNldChcbiAgICAgICAgICAgIGF0dGVuZGFuY2VEYXRhXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAociA9PiAoci5iZWhhdmlvcl90YWdzID8gci5iZWhhdmlvcl90YWdzLnNwbGl0KCcsJykubWFwKHRhZyA9PiB0YWcudHJpbSgpKSA6IFtdKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICldO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBkYXRhOiBtYXJrc0RhdGEsIGVycm9yOiBtYXJrc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgICAgLmZyb20oJ2ludGVybmFsX21hcmtzJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N1YmplY3QsIGludGVybmFsX3Njb3JlLCBncmFkZSwgc3R1ZGVudF9uYW1lJylcbiAgICAgICAgICAgIC5lcSgncm9sbF9ubycsIHJvbGxObyk7XG4gICAgICAgIGlmIChtYXJrc0Vycm9yKSB0aHJvdyBuZXcgRXJyb3IoYE1hcmtzIGZldGNoIGZhaWxlZDogJHttYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiByZW1hcmtzRGF0YSwgZXJyb3I6IHJlbWFya3NFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgICAgIC5mcm9tKCd0ZWFjaGVyX3JlbWFya3MnKVxuICAgICAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pXG4gICAgICAgICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG4gICAgICAgIGlmIChyZW1hcmtzRXJyb3IpIHRocm93IG5ldyBFcnJvcihgUmVtYXJrcyBmZXRjaCBmYWlsZWQ6ICR7cmVtYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3Qgc3R1ZGVudE5hbWUgPSBtYXJrc0RhdGE/LlswXT8uc3R1ZGVudF9uYW1lIHx8IGF0dGVuZGFuY2VEYXRhPy5bMF0/LnN0dWRlbnRfbmFtZSB8fCAnTi9BJztcblxuICAgICAgICBjb25zdCB7IGRhdGE6IGZlZWRiYWNrRGF0YSwgZXJyb3I6IGZlZWRiYWNrRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpXG4gICAgICAgICAgICAuc2VsZWN0KCdmZWVkYmFjaycpXG4gICAgICAgICAgICAuZXEoJ3N0dWRlbnRfbmFtZScsIHN0dWRlbnROYW1lKVxuICAgICAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgICAgICAubGltaXQoMSlcbiAgICAgICAgICAgIC5zaW5nbGUoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBhaUZlZWRiYWNrID0gbnVsbDtcbiAgICAgICAgaWYgKGZlZWRiYWNrRGF0YT8uZmVlZGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkRmVlZGJhY2sgPSB0eXBlb2YgZmVlZGJhY2tEYXRhLmZlZWRiYWNrID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoZmVlZGJhY2tEYXRhLmZlZWRiYWNrKSA6IGZlZWRiYWNrRGF0YS5mZWVkYmFjaztcbiAgICAgICAgICAgICAgICBhaUZlZWRiYWNrID0gcGFyc2VkRmVlZGJhY2suaW1wcm92ZW1lbnRUaXBzIHx8IFwiTm8gc3BlY2lmaWMgdGlwcyBhdmFpbGFibGUuXCI7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYWlGZWVkYmFjayA9IFwiQ291bGQgbm90IHBhcnNlIEFJIGZlZWRiYWNrLlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvZmlsZTogU3R1ZGVudFByb2ZpbGVEYXRhID0ge1xuICAgICAgICAgICAgc3R1ZGVudE5hbWUsXG4gICAgICAgICAgICByb2xsTm86IHJvbGxObyxcbiAgICAgICAgICAgIGF0dGVuZGFuY2U6IHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiBhdHRlbmRhbmNlUGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICBwcmVzZW50RGF5czogcHJlc2VudERheXMsXG4gICAgICAgICAgICAgICAgdG90YWxEYXlzOiB0b3RhbERheXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3JUYWdzOiBiZWhhdmlvclRhZ3MsXG4gICAgICAgICAgICBtYXJrczogbWFya3NEYXRhLm1hcChtID0+ICh7XG4gICAgICAgICAgICAgICAgc3ViamVjdDogbS5zdWJqZWN0LFxuICAgICAgICAgICAgICAgIGludGVybmFsX3Njb3JlOiBtLmludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgICAgIGdyYWRlOiBtLmdyYWRlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICByZW1hcmtzOiByZW1hcmtzRGF0YSBhcyBUZWFjaGVyUmVtYXJrUmVjb3JkW10sXG4gICAgICAgICAgICBhaUZlZWRiYWNrOiBhaUZlZWRiYWNrLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IHByb2ZpbGUgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIGZldGNoaW5nIHByb2ZpbGUgZGF0YS5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldFN0dWRlbnRQcm9maWxlRGF0YTpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWNhZGVtaWNFdmVudHNBY3Rpb24oKTogUHJvbWlzZTx7IGV2ZW50cz86IEFjYWRlbWljRXZlbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZUFkbWluKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2FjYWRlbWljX2NhbGVuZGFyJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcignZXZlbnRfZGF0ZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFjYWRlbWljIGV2ZW50czonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhY2FkZW1pYyBldmVudHMgZGF0YS5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGV2ZW50czogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUFjYWRlbWljRXZlbnRBY3Rpb24oXG4gICAgaW5wdXQ6IE9taXQ8QWNhZGVtaWNFdmVudFJlY29yZCwgJ2lkJyB8ICdjcmVhdGVkX2F0JyB8ICdwb3N0ZWRfYnknIHwgJ2V2ZW50X2RhdGUnPiAmIHsgZXZlbnRfZGF0ZTogRGF0ZSB9XG4pOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIGV2ZW50X2RhdGUsIGV2ZW50X3R5cGUgfSA9IHBhcnNlZElucHV0LmRhdGE7XG4gICAgXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGZvcm1hdChldmVudF9kYXRlLCAneXl5eS1NTS1kZCcpO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB8fCBudWxsLFxuICAgICAgICBldmVudF9kYXRlOiBmb3JtYXR0ZWREYXRlLFxuICAgICAgICBldmVudF90eXBlLFxuICAgICAgICBwb3N0ZWRfYnk6IG51bGwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgIH07XG4gICAgXG4gICAgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4pIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pbi5mcm9tKCdhY2FkZW1pY19jYWxlbmRhcicpLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhY2FkZW1pYyBldmVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgaW5zZXJ0IG5ldyBldmVudCByZWNvcmQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcblxuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgYWRkZWQgZXZlbnQ6IFwiJHt0aXRsZX1cImB9O1xufVxuXG50eXBlIEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlc3VsdD86IEdyYWRlQXNzaWdubWVudE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBncmFkZUFzc2lnbm1lbnRBY3Rpb24oaW5wdXQ6IHsgc3R1ZGVudE5hbWU6IHN0cmluZzsgc3ViamVjdDogc3RyaW5nOyBmaWxlRGF0YVVyaTogc3RyaW5nIH0pOiBQcm9taXNlPEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhc3NpZ25tZW50IGdyYWRpbmc6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBncmFkZUFzc2lnbm1lbnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdG8gU3VwYWJhc2VcbiAgICAgICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICAgICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ2Fzc2lnbm1lbnRfc2NvcmVzJykuaW5zZXJ0KFt7XG4gICAgICAgICAgICAgICAgc3R1ZGVudF9uYW1lOiBwYXJzZWRJbnB1dC5kYXRhLnN0dWRlbnROYW1lLFxuICAgICAgICAgICAgICAgIHN1YmplY3Q6IHBhcnNlZElucHV0LmRhdGEuc3ViamVjdCxcbiAgICAgICAgICAgICAgICBzY29yZTogb3V0cHV0LnNjb3JlLFxuICAgICAgICAgICAgICAgIGZlZWRiYWNrOiBvdXRwdXQuZmVlZGJhY2ssXG4gICAgICAgICAgICB9XSk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgYXNzaWdubWVudCBzY29yZSB0byBTdXBhYmFzZTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBzYXZlIHRoZSBncmFkaW5nIHJlc3VsdCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IHJlc3VsdDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdyYWRpbmcgYXNzaWdubWVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ3JhZGUgdGhlIGFzc2lnbm1lbnQuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvamVjdFRyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogUHJvamVjdFRyYWNrZXJSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAub3JkZXIoJ3VwZGF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdCB0cmFja2VyIHJlY29yZHM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcHJvamVjdCB0cmFja2VyIGRhdGEuXCIgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVjb3JkczogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZU9yVXBkYXRlUHJvamVjdFRyYWNrZXJBY3Rpb24oaW5wdXQ6IFByb2plY3RUcmFja2VySW5wdXQpOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gUHJvamVjdFRyYWNrZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0OiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGlkLCByb2xsX25vLCAuLi5yZWNvcmREYXRhIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZFRvU2F2ZSA9IHsgcm9sbF9ubywgLi4ucmVjb3JkRGF0YSB9O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncHJvamVjdF90cmFja2VyJylcbiAgICAgICAgICAgIC51cGRhdGUocmVjb3JkVG9TYXZlKVxuICAgICAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB1cGRhdGluZyBwcm9qZWN0OlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgdXBkYXRlIHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogYFVwZGF0ZWQgcHJvamVjdCBmb3IgJHtyZWNvcmRUb1NhdmUuc3R1ZGVudF9uYW1lfS5gIH07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmcsIGVycm9yOiBzZWxlY3RFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLmVxKCdyb2xsX25vJywgcm9sbF9ubylcbiAgICAgICAgLmxpbWl0KDEpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoc2VsZWN0RXJyb3IgJiYgc2VsZWN0RXJyb3IuY29kZSAhPT0gJ1BHUlNUMTE2Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiREIgZXJyb3IgY2hlY2tpbmcgZm9yIGR1cGxpY2F0ZXM6XCIsIHNlbGVjdEVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBgQSBwcm9qZWN0IGZvciBSb2xsIE5vLiAke3JvbGxfbm99IGFscmVhZHkgZXhpc3RzLmAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGVycm9yOiBpbnNlcnRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5pbnNlcnQoW3JlY29yZFRvU2F2ZV0pO1xuICAgICAgICBcbiAgICBpZiAoaW5zZXJ0RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBwcm9qZWN0OlwiLCBpbnNlcnRFcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBpbnNlcnQgbmV3IHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogYEFkZGVkIHByb2plY3QgZm9yICR7cmVjb3JkVG9TYXZlLnN0dWRlbnRfbmFtZX0uYCB9O1xufVxuXG4vLyA9PT0gU3R1ZGVudCBEb2N1bWVudCBWYXVsdCBBY3Rpb25zID09PVxuXG4vLyBHZXQgYWxsIGRvY3VtZW50cyBmb3IgdGhlIHRlYWNoZXIgdmlld1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnREb2N1bWVudHNBY3Rpb24oKTogUHJvbWlzZTx7IHJlY29yZHM/OiBTdHVkZW50RG9jdW1lbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcigndXBsb2FkZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc3R1ZGVudCBkb2N1bWVudHM6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzdHVkZW50IGRvY3VtZW50cy4gUGxlYXNlIGNoZWNrIHlvdXIgU3VwYWJhc2UgU0VMRUNUIHBvbGljeSBvbiB0aGUgJ3N0dWRlbnRfZG9jdW1lbnRzJyB0YWJsZS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbi8vIFZlcmlmeSBvciB1bi12ZXJpZnkgYSBkb2N1bWVudFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50U3RhdHVzQWN0aW9uKGRvY3VtZW50SWQ6IHN0cmluZywgdmVyaWZpZWQ6IGJvb2xlYW4pOiBQcm9taXNlPHsgcmVjb3JkPzogU3R1ZGVudERvY3VtZW50UmVjb3JkLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9kb2N1bWVudHMnKVxuICAgICAgICAudXBkYXRlKHsgdmVyaWZpZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGRvY3VtZW50SWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgZG9jdW1lbnQgc3RhdHVzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSBkb2N1bWVudCBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyByZWNvcmQ6IGRhdGEgfTtcbn1cblxuLy8gVXBsb2FkIGEgbmV3IGRvY3VtZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkU3R1ZGVudERvY3VtZW50QWN0aW9uKGZvcm1EYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcmF3RGF0YSA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBmb3JtRGF0YS5nZXQoJ3N0dWRlbnRfbmFtZScpLFxuICAgICAgICByb2xsX25vOiBmb3JtRGF0YS5nZXQoJ3JvbGxfbm8nKSxcbiAgICAgICAgZG9jX3R5cGU6IGZvcm1EYXRhLmdldCgnZG9jX3R5cGUnKSxcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gVXBsb2FkU3R1ZGVudERvY3VtZW50SW5wdXRTY2hlbWEuc2FmZVBhcnNlKHJhd0RhdGEpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zdCBmaXJzdEVycm9yID0gcGFyc2VkSW5wdXQuZXJyb3IuZXJyb3JzWzBdPy5tZXNzYWdlIHx8ICdJbnZhbGlkIGlucHV0Lic7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBmaXJzdEVycm9yIH07XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldCgnZmlsZScpIGFzIEZpbGU7XG4gICAgaWYgKCFmaWxlIHx8IGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgaXMgcmVxdWlyZWQuJyB9O1xuICAgIH1cbiAgICBpZiAoZmlsZS5zaXplID4gNSAqIDEwMjQgKiAxMDI0KSB7IC8vIDVNQiBsaW1pdFxuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgc2l6ZSBtdXN0IGJlIGxlc3MgdGhhbiA1TUIuJyB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhbml0aXplZEZpbGVOYW1lID0gZmlsZS5uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05LlxcLV9dL2csICdfJyk7XG4gICAgICAgIGNvbnN0IGJhc2VQYXRoID0gJ3B1YmxpYyc7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7YmFzZVBhdGh9LyR7cGFyc2VkSW5wdXQuZGF0YS5yb2xsX25vfS8ke0RhdGUubm93KCl9LSR7c2FuaXRpemVkRmlsZU5hbWV9YDtcblxuICAgICAgICBjb25zdCBCVUNLRVRfTkFNRSA9ICdzdHVkZW50LWRvY3VtZW50cyc7XG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogdXBsb2FkRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgICAgICAgIC5mcm9tKEJVQ0tFVF9OQU1FKVxuICAgICAgICAgICAgLnVwbG9hZChmaWxlUGF0aCwgZmlsZSk7XG5cbiAgICAgICAgaWYgKHVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBTdG9yYWdlIFVwbG9hZCBFcnJvcjonLCB1cGxvYWRFcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0b3JhZ2UgZXJyb3I6ICR7dXBsb2FkRXJyb3IubWVzc2FnZX0uIFBsZWFzZSBlbnN1cmUgdGhlIGJ1Y2tldCAnJHtCVUNLRVRfTkFNRX0nIGV4aXN0cyBhbmQgaGFzIHRoZSBjb3JyZWN0IHBvbGljaWVzLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiB1cmxEYXRhIH0gPSBzdXBhYmFzZS5zdG9yYWdlXG4gICAgICAgICAgICAuZnJvbShCVUNLRVRfTkFNRSlcbiAgICAgICAgICAgIC5nZXRQdWJsaWNVcmwoZmlsZVBhdGgpO1xuXG4gICAgICAgIGlmICghdXJsRGF0YS5wdWJsaWNVcmwpIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2UuZnJvbShCVUNLRVRfTkFNRSkucmVtb3ZlKFtmaWxlUGF0aF0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCBwdWJsaWMgVVJMIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWNvcmRUb0luc2VydCA9IHtcbiAgICAgICAgICAgIC4uLnBhcnNlZElucHV0LmRhdGEsXG4gICAgICAgICAgICBmaWxlX3BhdGg6IGZpbGVQYXRoLFxuICAgICAgICAgICAgZmlsZV91cmw6IHVybERhdGEucHVibGljVXJsLFxuICAgICAgICAgICAgdXBsb2FkZWRfYnk6ICdzdHVkZW50JywgLy8gTm8gdXNlciBjb250ZXh0XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogaW5zZXJ0RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJykuaW5zZXJ0KFtyZWNvcmRUb0luc2VydF0pO1xuXG4gICAgICAgIGlmIChpbnNlcnRFcnJvcikge1xuICAgICAgICAgICAgYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZS5mcm9tKEJVQ0tFVF9OQU1FKS5yZW1vdmUoW2ZpbGVQYXRoXSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGFiYXNlIGVycm9yOiAke2luc2VydEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy91cGxvYWQnKTtcbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogXCJEb2N1bWVudCB1cGxvYWRlZCBzdWNjZXNzZnVsbHkhIEl0IHdpbGwgYmUgcmV2aWV3ZWQgYnkgeW91ciB0ZWFjaGVyLlwiIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHVwbG9hZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwbG9hZCBmYWlsZWQ6XCIsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbi8vID09PSBDbGFzc3Jvb20gR2FtaWZpZXIgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbihcbiAgICB0b3BpYzogc3RyaW5nXG4pOiBQcm9taXNlPHsgZ2FtZT86IEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVDbGFzc3Jvb21HYW1lSW5wdXRTY2hlbWEuc2FmZVBhcnNlKHsgdG9waWMgfSk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYW1lRGF0YSA9IGF3YWl0IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZShwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHsgZ2FtZTogZ2FtZURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbVF1aXpBY3Rpb24oaW5wdXQ6IENyZWF0ZUN1c3RvbVF1aXpJbnB1dCk6IFByb21pc2U8eyBxdWl6SWQ/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlLlwiIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY3VzdG9tX3F1aXp6ZXMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICAgIHRvcGljOiBwYXJzZWRJbnB1dC5kYXRhLnRvcGljLFxuICAgICAgICAgICAgcXVlc3Rpb25zOiBKU09OLnN0cmluZ2lmeShwYXJzZWRJbnB1dC5kYXRhLnF1ZXN0aW9ucyksXG4gICAgICAgICAgICBjcmVhdGVkX2J5OiBudWxsLCAvLyBObyBhdXRoXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY3VzdG9tIHF1aXo6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgdGhlIHF1aXogdG8gdGhlIGRhdGFiYXNlLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgcXVpeklkOiBkYXRhLmlkIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRRdWl6QWN0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHsgcXVpej86IEN1c3RvbVF1aXpSZWNvcmQsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVNlcnZlckNsaWVudCgpO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjdXN0b21fcXVpenplcycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAuZXEoJ2lkJywgaWQpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgcXVpeiAke2lkfTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgcXVpei5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyBxdWl6OiBkYXRhIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExlYWRlcmJvYXJkQWN0aW9uKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPHsgcmVjb3Jkcz86IEdhbWVMZWFkZXJib2FyZFJlY29yZFtdLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5lcSgndG9waWMnLCB0b3BpYylcbiAgICAgICAgLm9yZGVyKCdzY29yZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgICAubGltaXQoMTApO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBsZWFkZXJib2FyZDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggbGVhZGVyYm9hcmQgZGF0YS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlR2FtZVNjb3JlQWN0aW9uKGlucHV0OiBTYXZlR2FtZVNjb3JlSW5wdXQpOiBQcm9taXNlPHsgc3VjY2Vzcz86IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZS5cIiB9O1xuXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJykuaW5zZXJ0KFtwYXJzZWRJbnB1dC5kYXRhXSk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgc2NvcmU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgc2NvcmUuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG59XG5cblxuLy8gPT09IEtub3dsZWRnZSBHYWxheHkgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uKFxuICAgIGlucHV0OiBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0LFxuKTogUHJvbWlzZTx7IGdhbGF4eT86IEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYWxheHlEYXRhID0gYXdhaXQgZ2VuZXJhdGVLbm93bGVkZ2VHYWxheHkocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghZ2FsYXh5RGF0YSB8fCAhZ2FsYXh5RGF0YS5zdWJqZWN0KSB7XG4gICAgICAgICAgICAvLyBBZGQgYSBzdWJqZWN0IGlmIHRoZSBBSSBkaWRuJ3QgcHJvdmlkZSBvbmUgKGUuZy4sIGZyb20gYSBmaWxlKVxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tTdWJqZWN0ID0gaW5wdXQuc3ViamVjdCB8fCBcIlVwbG9hZGVkIFN5bGxhYnVzXCI7XG4gICAgICAgICAgICByZXR1cm4geyBnYWxheHk6IHsgLi4uZ2FsYXh5RGF0YSwgc3ViamVjdDogZmFsbGJhY2tTdWJqZWN0IH0gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBnYWxheHk6IGdhbGF4eURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uOlwiLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogZXJyb3JNZXNzYWdlIH07XG4gICAgfVxufVxuXG5cbi8vID09PSBQbGFnaWFyaXNtIENoZWNrZXIgQWN0aW9ucyA9PT1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RmlsZUNvbnRlbnRBc0RhdGFVcmkoZmlsZUNvbnRlbnQ6IHN0cmluZywgbWltZVR5cGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKG1pbWVUeXBlID09PSAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVDb250ZW50LnNwbGl0KCcsJylbMV0sICdiYXNlNjQnKTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgbWFtbW90aC5leHRyYWN0UmF3VGV4dCh7IGJ1ZmZlciB9KTtcbiAgICAgICAgcmV0dXJuIGBkYXRhOnRleHQvcGxhaW47YmFzZTY0LCR7QnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCdiYXNlNjQnKX1gO1xuICAgIH1cbiAgICAvLyBGb3IgUERGIGFuZCBUWFQsIHRoZSBjb250ZW50IGlzIGFscmVhZHkgYSB2YWxpZCBkYXRhIFVSSVxuICAgIHJldHVybiBmaWxlQ29udGVudDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbihpbnB1dDogUGxhZ2lhcmlzbUNoZWNrSW5wdXQpOiBQcm9taXNlPHsgcmVzdWx0PzogUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcGxhZ2lhcmlzbSBjaGVjazpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dCBmb3JtYXQgZm9yIEFJIG1vZGVsLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2RvYzFEYXRhVXJpLCBkb2MyRGF0YVVyaV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzFDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzFNaW1lVHlwZSksXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzJDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzJNaW1lVHlwZSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgY29uc3QgZmxvd0lucHV0ID0ge1xuICAgICAgICAgICAgLi4ucGFyc2VkSW5wdXQuZGF0YSxcbiAgICAgICAgICAgIGRvYzFDb250ZW50OiBkb2MxRGF0YVVyaSxcbiAgICAgICAgICAgIGRvYzJDb250ZW50OiBkb2MyRGF0YVVyaSxcbiAgICAgICAgfTtcbiAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaGVja1BsYWdpYXJpc20oZmxvd0lucHV0KTtcbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0IH07XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byBydW4gcGxhZ2lhcmlzbSBjaGVjay4gVGhlIEFJIG1vZGVsIG1heSBiZSBidXN5LlwiO1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cblxuLy8gPT09IEF1dGggQWN0aW9ucyA9PT1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dpbkFjdGlvbihpbnB1dDogTG9naW5JbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgcmVkaXJlY3QoJy8nKTtcbiAgICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlckFjdGlvbihpbnB1dDogUmVnaXN0ZXJJbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZywgc3VjY2Vzcz86IGJvb2xlYW4gfT4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduT3V0QWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImdTQWdXc0IifQ==
}}),
"[project]/src/app/data:011916 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4054db5c966332ae1b4e138ed1756aed0a377dbb95":"saveInternalMarksAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "saveInternalMarksAction": (()=>saveInternalMarksAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var saveInternalMarksAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4054db5c966332ae1b4e138ed1756aed0a377dbb95", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "saveInternalMarksAction"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblwidXNlIHNlcnZlclwiO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9ucyB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVGZWVkYmFjayB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlIH0gZnJvbSBcIkAvYWkvZmxvd3MvZ2VuZXJhdGUtcXVlc3Rpb25zLWZyb20tZmlsZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVBZHZpY2UgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hZHZpY2VcIjtcbmltcG9ydCB7IGdlbmVyYXRlUXVlc3Rpb25QYXBlciB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uLXBhcGVyXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hdHRlbmRhbmNlLXJlcG9ydFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVNYXJrRmVlZGJhY2sgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1tYXJrLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBncmFkZUFzc2lnbm1lbnQgfSBmcm9tIFwiQC9haS9mbG93cy9ncmFkZS1hc3NpZ25tZW50LWZsb3dcIjtcbmltcG9ydCB7IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWNsYXNzcm9vbS1nYW1lXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUtub3dsZWRnZUdhbGF4eSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWtub3dsZWRnZS1nYWxheHlcIjtcbmltcG9ydCB7IGNoZWNrUGxhZ2lhcmlzbSB9IGZyb20gXCJAL2FpL2Zsb3dzL2NoZWNrLXBsYWdpYXJpc21cIjtcbmltcG9ydCB7IFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEsXG4gICAgR2VuZXJhdGVGZWVkYmFja0lucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUFkdmljZUlucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25QYXBlcklucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLFxuICAgIFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEsXG4gICAgU2F2ZUludGVybmFsTWFya3NJbnB1dFNjaGVtYSxcbiAgICBTYXZlU3lsbGFidXNUcmFja2VySW5wdXRTY2hlbWEsXG4gICAgU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYSxcbiAgICBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYSxcbiAgICBQcm9qZWN0VHJhY2tlcklucHV0U2NoZW1hLFxuICAgIFVwbG9hZFN0dWRlbnREb2N1bWVudElucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZUlucHV0U2NoZW1hLFxuICAgIFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLFxuICAgIENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYSxcbiAgICBMb2dpblNjaGVtYSxcbiAgICBSZWdpc3RlclNjaGVtYSxcbiAgICBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYSxcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXQsIFxuICAgIHR5cGUgR2VuZXJhdGVGZWVkYmFja0lucHV0LCBcbiAgICB0eXBlIEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQsXG4gICAgdHlwZSBNQ1FRdWVzdGlvbixcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQWR2aWNlT3V0cHV0LFxuICAgIHR5cGUgR2VuZXJhdGVRdWVzdGlvblBhcGVySW5wdXQsXG4gICAgdHlwZSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsXG4gICAgdHlwZSBHZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dCxcbiAgICB0eXBlIFNhdmVBdHRlbmRhbmNlSW5wdXQsXG4gICAgdHlwZSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0LFxuICAgIHR5cGUgUGVyZm9ybWFuY2VSZXBvcnQsXG4gICAgdHlwZSBBdHRlbmRhbmNlUmVjb3JkLFxuICAgIHR5cGUgU3lsbGFidXNUcmFja2VyUmVjb3JkLFxuICAgIHR5cGUgU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0LFxuICAgIHR5cGUgVGVhY2hlclJlbWFya1JlY29yZCxcbiAgICB0eXBlIFN0dWRlbnRJbmZvLFxuICAgIHR5cGUgU3R1ZGVudFByb2ZpbGVEYXRhLFxuICAgIHR5cGUgQWNhZGVtaWNFdmVudFJlY29yZCxcbiAgICB0eXBlIEdyYWRlQXNzaWdubWVudE91dHB1dCxcbiAgICB0eXBlIFByb2plY3RUcmFja2VySW5wdXQsXG4gICAgdHlwZSBQcm9qZWN0VHJhY2tlclJlY29yZCxcbiAgICB0eXBlIFN0dWRlbnREb2N1bWVudFJlY29yZCxcbiAgICB0eXBlIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCxcbiAgICB0eXBlIEdhbWVMZWFkZXJib2FyZFJlY29yZCxcbiAgICB0eXBlIFNhdmVHYW1lU2NvcmVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LFxuICAgIHR5cGUgQ3JlYXRlQ3VzdG9tUXVpeklucHV0LFxuICAgIHR5cGUgQ3VzdG9tUXVpelJlY29yZCxcbiAgICB0eXBlIExvZ2luSW5wdXQsXG4gICAgdHlwZSBSZWdpc3RlcklucHV0LFxuICAgIHR5cGUgR2VuZXJhdGVLbm93bGVkZ2VHYWxheHlJbnB1dCxcbiAgICB0eXBlIFBsYWdpYXJpc21DaGVja0lucHV0LFxuICAgIHR5cGUgUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LFxufSBmcm9tIFwiQC9haS9zY2hlbWFzXCI7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUFkbWluIH0gZnJvbSBcIkAvbGliL3N1cGFiYXNlL2FkbWluXCI7XG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXJDbGllbnQgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2Uvc2VydmVyXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IHJldmFsaWRhdGVQYXRoIH0gZnJvbSBcIm5leHQvY2FjaGVcIjtcbmltcG9ydCB7IHJlZGlyZWN0IH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2UvY2xpZW50XCI7XG5pbXBvcnQgbWFtbW90aCBmcm9tICdtYW1tb3RoJztcblxuLy8gPT09IFF1ZXN0aW9uIEFjdGlvbnMgPT09XG50eXBlIFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2UgPSB7XG4gIHF1ZXN0aW9ucz86IE1DUVF1ZXN0aW9uW107XG4gIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uc1RvU3VwYWJhc2UocXVlc3Rpb25zOiBNQ1FRdWVzdGlvbltdLCB0b3BpYz86IHN0cmluZykge1xuICAgIGlmICghdG9waWMgfHwgcXVlc3Rpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcXVlc3Rpb25zVG9JbnNlcnQgPSBxdWVzdGlvbnMubWFwKHEgPT4gKHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBxdWVzdGlvbl90ZXh0OiBxLnF1ZXN0aW9uLFxuICAgICAgICBvcHRpb25fYTogcS5vcHRpb25zLkEsXG4gICAgICAgIG9wdGlvbl9iOiBxLm9wdGlvbnMuQixcbiAgICAgICAgb3B0aW9uX2M6IHEub3B0aW9ucy5DLFxuICAgICAgICBvcHRpb25fZDogcS5vcHRpb25zLkQsXG4gICAgICAgIGNvcnJlY3Rfb3B0aW9uOiBxLmFuc3dlclxuICAgIH0pKTtcblxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdtY3FfcXVlc3Rpb25zJykuaW5zZXJ0KHF1ZXN0aW9uc1RvSW5zZXJ0KTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBxdWVzdGlvbnMgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0FjdGlvbihpbnB1dDogR2VuZXJhdGVRdWVzdGlvbnNJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25BY3Rpb25SZXNwb25zZT4ge1xuICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlUXVlc3Rpb25zKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcXVlc3Rpb25zLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXQpOiBQcm9taXNlPFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2U+IHtcbiAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbiBmcm9tIGZpbGU6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnMgZnJvbSBmaWxlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHF1ZXN0aW9ucyBmcm9tIHRoZSBmaWxlLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVGZWVkYmFja1RvU3VwYWJhc2UoZmVlZGJhY2tEYXRhOiBHZW5lcmF0ZUZlZWRiYWNrT3V0cHV0LCBpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KSB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHNjb3JlID0gT2JqZWN0LnZhbHVlcyhpbnB1dC5tYXJrcykucmVkdWNlKChzdW0sIG1hcmspID0+IHN1bSArIG1hcmssIDApO1xuICAgIGNvbnN0IHRvdGFsID0gaW5wdXQuc3ViamVjdHMubGVuZ3RoICogMTAwOyAvLyBBc3N1bWluZyAxMDAgbWF4IG1hcmtzIHBlciBzdWJqZWN0LCBjb25zaXN0ZW50IHdpdGggZ3JhZGUtYW5hbHl6ZXJcbiAgICBjb25zdCBzdWJqZWN0ID0gaW5wdXQuc3ViamVjdHMuam9pbignLCAnKTtcblxuICAgIGNvbnN0IHJlcG9ydFRvSW5zZXJ0ID0ge1xuICAgICAgc3R1ZGVudF9uYW1lOiBpbnB1dC5zdHVkZW50TmFtZSxcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICBzY29yZTogc2NvcmUsXG4gICAgICB0b3RhbDogdG90YWwsXG4gICAgICBmZWVkYmFjazogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN0cmVuZ3RoczogZmVlZGJhY2tEYXRhLnN0cmVuZ3RocyxcbiAgICAgICAgICB3ZWFrbmVzc2VzOiBmZWVkYmFja0RhdGEud2Vha25lc3NlcyxcbiAgICAgICAgICBpbXByb3ZlbWVudFRpcHM6IGZlZWRiYWNrRGF0YS5pbXByb3ZlbWVudFRpcHMsXG4gICAgICB9KSxcbiAgICAgIGltcHJvdmVtZW50X3BsYW46IEpTT04uc3RyaW5naWZ5KGZlZWRiYWNrRGF0YS5zdHVkeVBsYW4pLFxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpLmluc2VydChbcmVwb3J0VG9JbnNlcnRdKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBwZXJmb3JtYW5jZSByZXBvcnQgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbnR5cGUgRmVlZGJhY2tBY3Rpb25SZXNwb25zZSA9IHtcbiAgICBmZWVkYmFjaz86IEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQ7XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVGZWVkYmFja0FjdGlvbihpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KTogUHJvbWlzZTxGZWVkYmFja0FjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUZlZWRiYWNrSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0IGZvciBmZWVkYmFjayBnZW5lcmF0aW9uLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVGZWVkYmFjayhwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICAgICAgYXdhaXQgc2F2ZUZlZWRiYWNrVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBvdXRwdXQgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBmZWVkYmFjazpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgQUkgZmVlZGJhY2suIFRoZSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIEFkdmljZUFjdGlvblJlc3BvbnNlID0ge1xuICAgIGFkdmljZT86IEdlbmVyYXRlQWR2aWNlT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUFkdmljZVRvU3VwYWJhc2UoYWR2aWNlOiBHZW5lcmF0ZUFkdmljZU91dHB1dCwgaW5wdXQ6IHsgc3ViamVjdD86IHN0cmluZzsgdGV4dD86IHN0cmluZzsgZmlsZURhdGFVcmk/OiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcblxuICAgIGNvbnN0IHBsYW5Ub0luc2VydCA9IHtcbiAgICAgIHRlYWNoZXJfaWQ6IG51bGwsIC8vIE5vIHVzZXIgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICAgIHN1YmplY3Q6IGlucHV0LnN1YmplY3QsXG4gICAgICB1cGxvYWRlZF9jb250ZW50OiBpbnB1dC5maWxlRGF0YVVyaSB8fCBpbnB1dC50ZXh0LFxuICAgICAgY292ZXJlZF90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5jb3ZlcmVkVG9waWNzKSxcbiAgICAgIG5leHRfdG9waWM6IGFkdmljZS5uZXh0VG9waWMsXG4gICAgICByZXZpc2lvbl90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5zdWdnZXN0ZWRSZXZpc2lvbnMpLFxuICAgICAgbWlzc2VkX2NvbmNlcHRzOiBKU09OLnN0cmluZ2lmeShhZHZpY2Uuc2tpcHBlZENvbmNlcHRzKVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgndGVhY2hpbmdfcGxhbnMnKS5pbnNlcnQoW3BsYW5Ub0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHRlYWNoaW5nIHBsYW4gdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUFkdmljZUFjdGlvbihpbnB1dDogeyBzdWJqZWN0Pzogc3RyaW5nOyB0ZXh0Pzogc3RyaW5nOyBmaWxlRGF0YVVyaT86IHN0cmluZyB9KTogUHJvbWlzZTxBZHZpY2VBY3Rpb25SZXNwb25zZT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVBZHZpY2VJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhZHZpY2UgZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlQWR2aWNlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlQWR2aWNlVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGFkdmljZTogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYWR2aWNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkZhaWxlZCB0byBnZW5lcmF0ZSB0ZWFjaGluZyBhZHZpY2UuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIFJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydHM/OiBQZXJmb3JtYW5jZVJlcG9ydFtdO1xuICAgIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGVyZm9ybWFuY2VSZXBvcnRzKCk6IFByb21pc2U8UmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInBlcmZvcm1hbmNlX3JlcG9ydHNcIilcbiAgICAgIC5zZWxlY3QoXCIqXCIpXG4gICAgICAub3JkZXIoXCJjcmVhdGVkX2F0XCIsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcGVyZm9ybWFuY2UgcmVwb3J0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcGVyZm9ybWFuY2UgcmVwb3J0cy4gUGxlYXNlIGVuc3VyZSB0aGUgJ3BlcmZvcm1hbmNlX3JlcG9ydHMnIHRhYmxlIGV4aXN0cyBhbmQgdGhhdCB5b3VyIFN1cGFiYXNlIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0LlwiIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVwb3J0czogZGF0YSBhcyBQZXJmb3JtYW5jZVJlcG9ydFtdIH07XG59XG5cbnR5cGUgUXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlID0ge1xuICAgIHBhcGVyPzogR2VuZXJhdGVRdWVzdGlvblBhcGVyT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uUGFwZXJUb1N1cGFiYXNlKHBhcGVyOiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsIGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBwYXBlclRvSW5zZXJ0ID0ge1xuICAgICAgdGVhY2hlcl9pZDogbnVsbCwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgICAgc3ViamVjdDogaW5wdXQuc3ViamVjdCxcbiAgICAgIHVuaXQ6IGlucHV0LnVuaXQgfHwgYEZpbGU6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXG4gICAgICBvbmVfbWFyazogcGFwZXIub25lTWFya1F1ZXN0aW9ucyxcbiAgICAgIHR3b19tYXJrOiBwYXBlci50d29NYXJrUXVlc3Rpb25zLFxuICAgICAgdGVuX21hcms6IHBhcGVyLnRlbk1hcmtRdWVzdGlvbnMsXG4gICAgfTtcblxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3F1ZXN0aW9uX3BhcGVyc192MicpLmluc2VydChbcGFwZXJUb0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHF1ZXN0aW9uIHBhcGVyIHRvIFN1cGFiYXNlOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVRdWVzdGlvblBhcGVyQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBxdWVzdGlvbiBwYXBlciBnZW5lcmF0aW9uOlwiLCBwYXJzZWRJbnB1dC5lcnJvci5mbGF0dGVuKCkpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVRdWVzdGlvblBhcGVyKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlUXVlc3Rpb25QYXBlclRvU3VwYWJhc2Uob3V0cHV0LCBwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwYXBlcjogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgcXVlc3Rpb24gcGFwZXI6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHRoZSBxdWVzdGlvbiBwYXBlci4gVGhlIEFJIG1vZGVsIG1heSBiZSB1bmF2YWlsYWJsZSBvciB0aGUgcmVxdWVzdCB0aW1lZCBvdXQuIFBsZWFzZSB0cnkgYWdhaW4uXCIgfTtcbiAgICB9XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlc3BvbnNlID0ge1xuICAgIHJlY29yZHM/OiBBdHRlbmRhbmNlUmVjb3JkW107XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXR0ZW5kYW5jZVJlY29yZHMoKTogUHJvbWlzZTxBdHRlbmRhbmNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdkYXRlJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGF0dGVuZGFuY2UgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhdHRlbmRhbmNlIGRhdGEuIFBsZWFzZSBlbnN1cmUgdGhlICdzdHVkZW50X2F0dGVuZGFuY2UnIHRhYmxlIGV4aXN0cy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgYXMgQXR0ZW5kYW5jZVJlY29yZFtdIH07XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydD86IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRBY3Rpb24oaW5wdXQ6IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0KTogUHJvbWlzZTxBdHRlbmRhbmNlUmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIGF0dGVuZGFuY2UgcmVwb3J0IGdlbmVyYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIHJldHVybiB7IHJlcG9ydDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYXR0ZW5kYW5jZSByZXBvcnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIGF0dGVuZGFuY2UgcmVwb3J0LiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVBdHRlbmRhbmNlQWN0aW9uKGlucHV0OiBTYXZlQXR0ZW5kYW5jZUlucHV0KTogUHJvbWlzZTx7IG1lc3NhZ2U/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IHBhcnNlZElucHV0O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBkYXRhLnN0dWRlbnRfbmFtZSxcbiAgICAgICAgcm9sbF9ubzogZGF0YS5yb2xsX25vLFxuICAgICAgICBkYXRlOiBkYXRhLmRhdGUsIFxuICAgICAgICBzdWJqZWN0OiBkYXRhLnN1YmplY3QsXG4gICAgICAgIHBlcmlvZDogZGF0YS5wZXJpb2QsXG4gICAgICAgIHN0YXR1czogZGF0YS5zdGF0dXMsXG4gICAgICAgIHJlbWFyazogZGF0YS5yZW1hcmsgfHwgbnVsbCxcbiAgICAgICAgYmVoYXZpb3JfdGFnczogZGF0YS5iZWhhdmlvcl90YWdzIHx8IG51bGwsXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhdHRlbmRhbmNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIGF0dGVuZGFuY2UgZGF0YSBkdWUgdG8gYSBkYXRhYmFzZSBlcnJvci5cIiB9O1xuICAgIH1cbiAgICBcbiAgICByZXZhbGlkYXRlUGF0aCgnLycpO1xuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTYXZlZCBhdHRlbmRhbmNlIGZvciAke2RhdGEuc3R1ZGVudF9uYW1lfSAoJHtkYXRhLnBlcmlvZH0pIOKAlCAke2RhdGEuc3RhdHVzfSBvbiAke2RhdGEuZGF0ZX1gfTtcbn1cblxudHlwZSBNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlID0ge1xuICAgIGZlZWRiYWNrPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVJbnRlcm5hbE1hcmtzQWN0aW9uKGlucHV0OiBTYXZlSW50ZXJuYWxNYXJrc0lucHV0KTogUHJvbWlzZTxNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIG1hcmsgY2FsY3VsYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN0dWRlbnRfbmFtZSwgcm9sbF9ubywgc3ViamVjdCwgdGVzdDEsIHRlc3QyLCBhc3NpZ25tZW50LCBhdHRlbmRhbmNlIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IGludGVybmFsX3Njb3JlID0gdGVzdDEgKyB0ZXN0MiArIGFzc2lnbm1lbnQ7XG4gICAgXG4gICAgbGV0IGdyYWRlID0gJ0YnO1xuICAgIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyNykgZ3JhZGUgPSAnQSsnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDI0KSBncmFkZSA9ICdBJztcbiAgICBlbHNlIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyMSkgZ3JhZGUgPSAnQic7XG4gICAgZWxzZSBpZiAoaW50ZXJuYWxfc2NvcmUgPj0gMTgpIGdyYWRlID0gJ0MnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDE1KSBncmFkZSA9ICdEJztcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIEdlbmVyYXRlIEFJIGZlZWRiYWNrXG4gICAgICAgIGNvbnN0IGZlZWRiYWNrUmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVNYXJrRmVlZGJhY2soe1xuICAgICAgICAgICAgc3R1ZGVudE5hbWU6IHN0dWRlbnRfbmFtZSxcbiAgICAgICAgICAgIGludGVybmFsU2NvcmU6IGludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgZ3JhZGU6IGdyYWRlLFxuICAgICAgICAgICAgYXR0ZW5kYW5jZTogYXR0ZW5kYW5jZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFmZWVkYmFja1Jlc3VsdC5mZWVkYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQUkgZmFpbGVkIHRvIGdlbmVyYXRlIGZlZWRiYWNrLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgICAgICAvLyBTYXZlIHRvIFN1cGFiYXNlXG4gICAgICAgIGNvbnN0IHJlY29yZFRvSW5zZXJ0ID0ge1xuICAgICAgICAgICAgc3R1ZGVudF9uYW1lLFxuICAgICAgICAgICAgcm9sbF9ubyxcbiAgICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgICB0ZXN0MSxcbiAgICAgICAgICAgIHRlc3QyLFxuICAgICAgICAgICAgYXNzaWdubWVudCxcbiAgICAgICAgICAgIGF0dGVuZGFuY2UsXG4gICAgICAgICAgICBpbnRlcm5hbF9zY29yZSxcbiAgICAgICAgICAgIGdyYWRlLFxuICAgICAgICAgICAgZmVlZGJhY2s6IGZlZWRiYWNrUmVzdWx0LmZlZWRiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBlcnJvcjogZGJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnaW50ZXJuYWxfbWFya3MnKS5pbnNlcnQoW3JlY29yZFRvSW5zZXJ0XSk7XG5cbiAgICAgICAgaWYgKGRiRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgaW50ZXJuYWwgbWFya3MgdG8gU3VwYWJhc2U6XCIsIGRiRXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHNhdmUgdGhlIHJlY29yZCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBmZWVkYmFja1Jlc3VsdC5mZWVkYmFjayB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBzYXZlSW50ZXJuYWxNYXJrc0FjdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZmVlZGJhY2sgZ2VuZXJhdGlvbiBvciBzYXZpbmcuXCI7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeWxsYWJ1c1RyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogU3lsbGFidXNUcmFja2VyUmVjb3JkW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N5bGxhYnVzX3RyYWNrZXInKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN5bGxhYnVzIHRyYWNrZXIgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzeWxsYWJ1cyB0cmFja2VyIGRhdGEuIFBsZWFzZSBjaGVjayB5b3VyIFJMUyBwb2xpY2llcy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVTeWxsYWJ1c1RyYWNrZXJBY3Rpb24oaW5wdXQ6IFNhdmVTeWxsYWJ1c1RyYWNrZXJJbnB1dCk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcblxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBzdWJqZWN0LCB0b3BpYyB9ID0gcGFyc2VkSW5wdXQuZGF0YTtcbiAgICBcbiAgICBjb25zdCByZWNvcmQgPSB7XG4gICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgY29tcGxldGVkOiBmYWxzZSwgLy8gQWx3YXlzIGZhbHNlIG9uIGNyZWF0aW9uXG4gICAgICAgIHVwbG9hZGVkX2J5OiBudWxsLCAvLyBObyB1c2VyIHRvIGFzc29jaWF0ZSB3aXRoXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdzeWxsYWJ1c190cmFja2VyJykuaW5zZXJ0KFtyZWNvcmRdKTtcbiAgICAgICAgICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW5zZXJ0aW5nIHN5bGxhYnVzIHRvcGljOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIHN5bGxhYnVzIGRhdGEgZHVlIHRvIGEgZGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBgQWRkZWQgdG9waWMgXCIke3RvcGljfVwiIHRvICR7c3ViamVjdH0uYH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTeWxsYWJ1c1RvcGljU3RhdHVzQWN0aW9uKGlkOiBzdHJpbmcsIGNvbXBsZXRlZDogYm9vbGVhbik6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3lsbGFidXNfdHJhY2tlcicpXG4gICAgICAgIC51cGRhdGUoeyBjb21wbGV0ZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgc3lsbGFidXMgdG9waWM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSB0b3BpYyBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBcIlRvcGljIHN0YXR1cyB1cGRhdGVkLlwiIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRMaXN0KCk6IFByb21pc2U8eyBzdHVkZW50cz86IFN0dWRlbnRJbmZvW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCdzdHVkZW50X25hbWUsIHJvbGxfbm8nKVxuICAgICAgICAub3JkZXIoJ3N0dWRlbnRfbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN0dWRlbnQgbGlzdDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiAnQ291bGQgbm90IGZldGNoIHN0dWRlbnQgbGlzdC4nIH07XG4gICAgfVxuXG4gICAgY29uc3QgdW5pcXVlU3R1ZGVudHMgPSBBcnJheS5mcm9tKG5ldyBNYXAoZGF0YS5tYXAoaXRlbSA9PiBbaXRlbS5yb2xsX25vLCBpdGVtXSkpLnZhbHVlcygpKTtcbiAgICBcbiAgICByZXR1cm4geyBzdHVkZW50czogdW5pcXVlU3R1ZGVudHMgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRQcm9maWxlRGF0YShyb2xsTm86IHN0cmluZyk6IFByb21pc2U8eyBwcm9maWxlPzogU3R1ZGVudFByb2ZpbGVEYXRhLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIGNvbnN0IHsgZGF0YTogYXR0ZW5kYW5jZURhdGEsIGVycm9yOiBhdHRlbmRhbmNlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N0YXR1cywgYmVoYXZpb3JfdGFncycpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pO1xuICAgICAgICBpZiAoYXR0ZW5kYW5jZUVycm9yKSB0aHJvdyBuZXcgRXJyb3IoYEF0dGVuZGFuY2UgZmV0Y2ggZmFpbGVkOiAke2F0dGVuZGFuY2VFcnJvci5tZXNzYWdlfWApO1xuXG4gICAgICAgIGNvbnN0IHRvdGFsRGF5cyA9IGF0dGVuZGFuY2VEYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcHJlc2VudERheXMgPSBhdHRlbmRhbmNlRGF0YS5maWx0ZXIociA9PiByLnN0YXR1cyA9PT0gJ1ByZXNlbnQnIHx8IHIuc3RhdHVzID09PSAnTGF0ZScpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYXR0ZW5kYW5jZVBlcmNlbnRhZ2UgPSB0b3RhbERheXMgPiAwID8gTWF0aC5yb3VuZCgocHJlc2VudERheXMgLyB0b3RhbERheXMpICogMTAwKSA6IDA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBiZWhhdmlvclRhZ3MgPSBbLi4ubmV3IFNldChcbiAgICAgICAgICAgIGF0dGVuZGFuY2VEYXRhXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAociA9PiAoci5iZWhhdmlvcl90YWdzID8gci5iZWhhdmlvcl90YWdzLnNwbGl0KCcsJykubWFwKHRhZyA9PiB0YWcudHJpbSgpKSA6IFtdKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICldO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBkYXRhOiBtYXJrc0RhdGEsIGVycm9yOiBtYXJrc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgICAgLmZyb20oJ2ludGVybmFsX21hcmtzJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N1YmplY3QsIGludGVybmFsX3Njb3JlLCBncmFkZSwgc3R1ZGVudF9uYW1lJylcbiAgICAgICAgICAgIC5lcSgncm9sbF9ubycsIHJvbGxObyk7XG4gICAgICAgIGlmIChtYXJrc0Vycm9yKSB0aHJvdyBuZXcgRXJyb3IoYE1hcmtzIGZldGNoIGZhaWxlZDogJHttYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiByZW1hcmtzRGF0YSwgZXJyb3I6IHJlbWFya3NFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgICAgIC5mcm9tKCd0ZWFjaGVyX3JlbWFya3MnKVxuICAgICAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pXG4gICAgICAgICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG4gICAgICAgIGlmIChyZW1hcmtzRXJyb3IpIHRocm93IG5ldyBFcnJvcihgUmVtYXJrcyBmZXRjaCBmYWlsZWQ6ICR7cmVtYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3Qgc3R1ZGVudE5hbWUgPSBtYXJrc0RhdGE/LlswXT8uc3R1ZGVudF9uYW1lIHx8IGF0dGVuZGFuY2VEYXRhPy5bMF0/LnN0dWRlbnRfbmFtZSB8fCAnTi9BJztcblxuICAgICAgICBjb25zdCB7IGRhdGE6IGZlZWRiYWNrRGF0YSwgZXJyb3I6IGZlZWRiYWNrRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpXG4gICAgICAgICAgICAuc2VsZWN0KCdmZWVkYmFjaycpXG4gICAgICAgICAgICAuZXEoJ3N0dWRlbnRfbmFtZScsIHN0dWRlbnROYW1lKVxuICAgICAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgICAgICAubGltaXQoMSlcbiAgICAgICAgICAgIC5zaW5nbGUoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBhaUZlZWRiYWNrID0gbnVsbDtcbiAgICAgICAgaWYgKGZlZWRiYWNrRGF0YT8uZmVlZGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkRmVlZGJhY2sgPSB0eXBlb2YgZmVlZGJhY2tEYXRhLmZlZWRiYWNrID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoZmVlZGJhY2tEYXRhLmZlZWRiYWNrKSA6IGZlZWRiYWNrRGF0YS5mZWVkYmFjaztcbiAgICAgICAgICAgICAgICBhaUZlZWRiYWNrID0gcGFyc2VkRmVlZGJhY2suaW1wcm92ZW1lbnRUaXBzIHx8IFwiTm8gc3BlY2lmaWMgdGlwcyBhdmFpbGFibGUuXCI7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYWlGZWVkYmFjayA9IFwiQ291bGQgbm90IHBhcnNlIEFJIGZlZWRiYWNrLlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvZmlsZTogU3R1ZGVudFByb2ZpbGVEYXRhID0ge1xuICAgICAgICAgICAgc3R1ZGVudE5hbWUsXG4gICAgICAgICAgICByb2xsTm86IHJvbGxObyxcbiAgICAgICAgICAgIGF0dGVuZGFuY2U6IHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiBhdHRlbmRhbmNlUGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICBwcmVzZW50RGF5czogcHJlc2VudERheXMsXG4gICAgICAgICAgICAgICAgdG90YWxEYXlzOiB0b3RhbERheXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3JUYWdzOiBiZWhhdmlvclRhZ3MsXG4gICAgICAgICAgICBtYXJrczogbWFya3NEYXRhLm1hcChtID0+ICh7XG4gICAgICAgICAgICAgICAgc3ViamVjdDogbS5zdWJqZWN0LFxuICAgICAgICAgICAgICAgIGludGVybmFsX3Njb3JlOiBtLmludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgICAgIGdyYWRlOiBtLmdyYWRlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICByZW1hcmtzOiByZW1hcmtzRGF0YSBhcyBUZWFjaGVyUmVtYXJrUmVjb3JkW10sXG4gICAgICAgICAgICBhaUZlZWRiYWNrOiBhaUZlZWRiYWNrLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IHByb2ZpbGUgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIGZldGNoaW5nIHByb2ZpbGUgZGF0YS5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldFN0dWRlbnRQcm9maWxlRGF0YTpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWNhZGVtaWNFdmVudHNBY3Rpb24oKTogUHJvbWlzZTx7IGV2ZW50cz86IEFjYWRlbWljRXZlbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZUFkbWluKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2FjYWRlbWljX2NhbGVuZGFyJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcignZXZlbnRfZGF0ZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFjYWRlbWljIGV2ZW50czonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhY2FkZW1pYyBldmVudHMgZGF0YS5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGV2ZW50czogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUFjYWRlbWljRXZlbnRBY3Rpb24oXG4gICAgaW5wdXQ6IE9taXQ8QWNhZGVtaWNFdmVudFJlY29yZCwgJ2lkJyB8ICdjcmVhdGVkX2F0JyB8ICdwb3N0ZWRfYnknIHwgJ2V2ZW50X2RhdGUnPiAmIHsgZXZlbnRfZGF0ZTogRGF0ZSB9XG4pOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIGV2ZW50X2RhdGUsIGV2ZW50X3R5cGUgfSA9IHBhcnNlZElucHV0LmRhdGE7XG4gICAgXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGZvcm1hdChldmVudF9kYXRlLCAneXl5eS1NTS1kZCcpO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB8fCBudWxsLFxuICAgICAgICBldmVudF9kYXRlOiBmb3JtYXR0ZWREYXRlLFxuICAgICAgICBldmVudF90eXBlLFxuICAgICAgICBwb3N0ZWRfYnk6IG51bGwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgIH07XG4gICAgXG4gICAgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4pIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pbi5mcm9tKCdhY2FkZW1pY19jYWxlbmRhcicpLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhY2FkZW1pYyBldmVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgaW5zZXJ0IG5ldyBldmVudCByZWNvcmQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcblxuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgYWRkZWQgZXZlbnQ6IFwiJHt0aXRsZX1cImB9O1xufVxuXG50eXBlIEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlc3VsdD86IEdyYWRlQXNzaWdubWVudE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBncmFkZUFzc2lnbm1lbnRBY3Rpb24oaW5wdXQ6IHsgc3R1ZGVudE5hbWU6IHN0cmluZzsgc3ViamVjdDogc3RyaW5nOyBmaWxlRGF0YVVyaTogc3RyaW5nIH0pOiBQcm9taXNlPEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhc3NpZ25tZW50IGdyYWRpbmc6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBncmFkZUFzc2lnbm1lbnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdG8gU3VwYWJhc2VcbiAgICAgICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICAgICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ2Fzc2lnbm1lbnRfc2NvcmVzJykuaW5zZXJ0KFt7XG4gICAgICAgICAgICAgICAgc3R1ZGVudF9uYW1lOiBwYXJzZWRJbnB1dC5kYXRhLnN0dWRlbnROYW1lLFxuICAgICAgICAgICAgICAgIHN1YmplY3Q6IHBhcnNlZElucHV0LmRhdGEuc3ViamVjdCxcbiAgICAgICAgICAgICAgICBzY29yZTogb3V0cHV0LnNjb3JlLFxuICAgICAgICAgICAgICAgIGZlZWRiYWNrOiBvdXRwdXQuZmVlZGJhY2ssXG4gICAgICAgICAgICB9XSk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgYXNzaWdubWVudCBzY29yZSB0byBTdXBhYmFzZTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBzYXZlIHRoZSBncmFkaW5nIHJlc3VsdCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IHJlc3VsdDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdyYWRpbmcgYXNzaWdubWVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ3JhZGUgdGhlIGFzc2lnbm1lbnQuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvamVjdFRyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogUHJvamVjdFRyYWNrZXJSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAub3JkZXIoJ3VwZGF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdCB0cmFja2VyIHJlY29yZHM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcHJvamVjdCB0cmFja2VyIGRhdGEuXCIgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVjb3JkczogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZU9yVXBkYXRlUHJvamVjdFRyYWNrZXJBY3Rpb24oaW5wdXQ6IFByb2plY3RUcmFja2VySW5wdXQpOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gUHJvamVjdFRyYWNrZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0OiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGlkLCByb2xsX25vLCAuLi5yZWNvcmREYXRhIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZFRvU2F2ZSA9IHsgcm9sbF9ubywgLi4ucmVjb3JkRGF0YSB9O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncHJvamVjdF90cmFja2VyJylcbiAgICAgICAgICAgIC51cGRhdGUocmVjb3JkVG9TYXZlKVxuICAgICAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB1cGRhdGluZyBwcm9qZWN0OlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgdXBkYXRlIHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogYFVwZGF0ZWQgcHJvamVjdCBmb3IgJHtyZWNvcmRUb1NhdmUuc3R1ZGVudF9uYW1lfS5gIH07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmcsIGVycm9yOiBzZWxlY3RFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLmVxKCdyb2xsX25vJywgcm9sbF9ubylcbiAgICAgICAgLmxpbWl0KDEpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoc2VsZWN0RXJyb3IgJiYgc2VsZWN0RXJyb3IuY29kZSAhPT0gJ1BHUlNUMTE2Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiREIgZXJyb3IgY2hlY2tpbmcgZm9yIGR1cGxpY2F0ZXM6XCIsIHNlbGVjdEVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBgQSBwcm9qZWN0IGZvciBSb2xsIE5vLiAke3JvbGxfbm99IGFscmVhZHkgZXhpc3RzLmAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGVycm9yOiBpbnNlcnRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5pbnNlcnQoW3JlY29yZFRvU2F2ZV0pO1xuICAgICAgICBcbiAgICBpZiAoaW5zZXJ0RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBwcm9qZWN0OlwiLCBpbnNlcnRFcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBpbnNlcnQgbmV3IHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogYEFkZGVkIHByb2plY3QgZm9yICR7cmVjb3JkVG9TYXZlLnN0dWRlbnRfbmFtZX0uYCB9O1xufVxuXG4vLyA9PT0gU3R1ZGVudCBEb2N1bWVudCBWYXVsdCBBY3Rpb25zID09PVxuXG4vLyBHZXQgYWxsIGRvY3VtZW50cyBmb3IgdGhlIHRlYWNoZXIgdmlld1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnREb2N1bWVudHNBY3Rpb24oKTogUHJvbWlzZTx7IHJlY29yZHM/OiBTdHVkZW50RG9jdW1lbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcigndXBsb2FkZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc3R1ZGVudCBkb2N1bWVudHM6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzdHVkZW50IGRvY3VtZW50cy4gUGxlYXNlIGNoZWNrIHlvdXIgU3VwYWJhc2UgU0VMRUNUIHBvbGljeSBvbiB0aGUgJ3N0dWRlbnRfZG9jdW1lbnRzJyB0YWJsZS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbi8vIFZlcmlmeSBvciB1bi12ZXJpZnkgYSBkb2N1bWVudFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50U3RhdHVzQWN0aW9uKGRvY3VtZW50SWQ6IHN0cmluZywgdmVyaWZpZWQ6IGJvb2xlYW4pOiBQcm9taXNlPHsgcmVjb3JkPzogU3R1ZGVudERvY3VtZW50UmVjb3JkLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9kb2N1bWVudHMnKVxuICAgICAgICAudXBkYXRlKHsgdmVyaWZpZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGRvY3VtZW50SWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgZG9jdW1lbnQgc3RhdHVzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSBkb2N1bWVudCBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyByZWNvcmQ6IGRhdGEgfTtcbn1cblxuLy8gVXBsb2FkIGEgbmV3IGRvY3VtZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkU3R1ZGVudERvY3VtZW50QWN0aW9uKGZvcm1EYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcmF3RGF0YSA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBmb3JtRGF0YS5nZXQoJ3N0dWRlbnRfbmFtZScpLFxuICAgICAgICByb2xsX25vOiBmb3JtRGF0YS5nZXQoJ3JvbGxfbm8nKSxcbiAgICAgICAgZG9jX3R5cGU6IGZvcm1EYXRhLmdldCgnZG9jX3R5cGUnKSxcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gVXBsb2FkU3R1ZGVudERvY3VtZW50SW5wdXRTY2hlbWEuc2FmZVBhcnNlKHJhd0RhdGEpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zdCBmaXJzdEVycm9yID0gcGFyc2VkSW5wdXQuZXJyb3IuZXJyb3JzWzBdPy5tZXNzYWdlIHx8ICdJbnZhbGlkIGlucHV0Lic7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBmaXJzdEVycm9yIH07XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldCgnZmlsZScpIGFzIEZpbGU7XG4gICAgaWYgKCFmaWxlIHx8IGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgaXMgcmVxdWlyZWQuJyB9O1xuICAgIH1cbiAgICBpZiAoZmlsZS5zaXplID4gNSAqIDEwMjQgKiAxMDI0KSB7IC8vIDVNQiBsaW1pdFxuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgc2l6ZSBtdXN0IGJlIGxlc3MgdGhhbiA1TUIuJyB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhbml0aXplZEZpbGVOYW1lID0gZmlsZS5uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05LlxcLV9dL2csICdfJyk7XG4gICAgICAgIGNvbnN0IGJhc2VQYXRoID0gJ3B1YmxpYyc7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7YmFzZVBhdGh9LyR7cGFyc2VkSW5wdXQuZGF0YS5yb2xsX25vfS8ke0RhdGUubm93KCl9LSR7c2FuaXRpemVkRmlsZU5hbWV9YDtcblxuICAgICAgICBjb25zdCBCVUNLRVRfTkFNRSA9ICdzdHVkZW50LWRvY3VtZW50cyc7XG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogdXBsb2FkRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgICAgICAgIC5mcm9tKEJVQ0tFVF9OQU1FKVxuICAgICAgICAgICAgLnVwbG9hZChmaWxlUGF0aCwgZmlsZSk7XG5cbiAgICAgICAgaWYgKHVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBTdG9yYWdlIFVwbG9hZCBFcnJvcjonLCB1cGxvYWRFcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0b3JhZ2UgZXJyb3I6ICR7dXBsb2FkRXJyb3IubWVzc2FnZX0uIFBsZWFzZSBlbnN1cmUgdGhlIGJ1Y2tldCAnJHtCVUNLRVRfTkFNRX0nIGV4aXN0cyBhbmQgaGFzIHRoZSBjb3JyZWN0IHBvbGljaWVzLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiB1cmxEYXRhIH0gPSBzdXBhYmFzZS5zdG9yYWdlXG4gICAgICAgICAgICAuZnJvbShCVUNLRVRfTkFNRSlcbiAgICAgICAgICAgIC5nZXRQdWJsaWNVcmwoZmlsZVBhdGgpO1xuXG4gICAgICAgIGlmICghdXJsRGF0YS5wdWJsaWNVcmwpIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2UuZnJvbShCVUNLRVRfTkFNRSkucmVtb3ZlKFtmaWxlUGF0aF0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCBwdWJsaWMgVVJMIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWNvcmRUb0luc2VydCA9IHtcbiAgICAgICAgICAgIC4uLnBhcnNlZElucHV0LmRhdGEsXG4gICAgICAgICAgICBmaWxlX3BhdGg6IGZpbGVQYXRoLFxuICAgICAgICAgICAgZmlsZV91cmw6IHVybERhdGEucHVibGljVXJsLFxuICAgICAgICAgICAgdXBsb2FkZWRfYnk6ICdzdHVkZW50JywgLy8gTm8gdXNlciBjb250ZXh0XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogaW5zZXJ0RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJykuaW5zZXJ0KFtyZWNvcmRUb0luc2VydF0pO1xuXG4gICAgICAgIGlmIChpbnNlcnRFcnJvcikge1xuICAgICAgICAgICAgYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZS5mcm9tKEJVQ0tFVF9OQU1FKS5yZW1vdmUoW2ZpbGVQYXRoXSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGFiYXNlIGVycm9yOiAke2luc2VydEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy91cGxvYWQnKTtcbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogXCJEb2N1bWVudCB1cGxvYWRlZCBzdWNjZXNzZnVsbHkhIEl0IHdpbGwgYmUgcmV2aWV3ZWQgYnkgeW91ciB0ZWFjaGVyLlwiIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHVwbG9hZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwbG9hZCBmYWlsZWQ6XCIsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbi8vID09PSBDbGFzc3Jvb20gR2FtaWZpZXIgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbihcbiAgICB0b3BpYzogc3RyaW5nXG4pOiBQcm9taXNlPHsgZ2FtZT86IEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVDbGFzc3Jvb21HYW1lSW5wdXRTY2hlbWEuc2FmZVBhcnNlKHsgdG9waWMgfSk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYW1lRGF0YSA9IGF3YWl0IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZShwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHsgZ2FtZTogZ2FtZURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbVF1aXpBY3Rpb24oaW5wdXQ6IENyZWF0ZUN1c3RvbVF1aXpJbnB1dCk6IFByb21pc2U8eyBxdWl6SWQ/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlLlwiIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY3VzdG9tX3F1aXp6ZXMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICAgIHRvcGljOiBwYXJzZWRJbnB1dC5kYXRhLnRvcGljLFxuICAgICAgICAgICAgcXVlc3Rpb25zOiBKU09OLnN0cmluZ2lmeShwYXJzZWRJbnB1dC5kYXRhLnF1ZXN0aW9ucyksXG4gICAgICAgICAgICBjcmVhdGVkX2J5OiBudWxsLCAvLyBObyBhdXRoXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY3VzdG9tIHF1aXo6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgdGhlIHF1aXogdG8gdGhlIGRhdGFiYXNlLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgcXVpeklkOiBkYXRhLmlkIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRRdWl6QWN0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHsgcXVpej86IEN1c3RvbVF1aXpSZWNvcmQsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVNlcnZlckNsaWVudCgpO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjdXN0b21fcXVpenplcycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAuZXEoJ2lkJywgaWQpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgcXVpeiAke2lkfTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgcXVpei5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyBxdWl6OiBkYXRhIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExlYWRlcmJvYXJkQWN0aW9uKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPHsgcmVjb3Jkcz86IEdhbWVMZWFkZXJib2FyZFJlY29yZFtdLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5lcSgndG9waWMnLCB0b3BpYylcbiAgICAgICAgLm9yZGVyKCdzY29yZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgICAubGltaXQoMTApO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBsZWFkZXJib2FyZDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggbGVhZGVyYm9hcmQgZGF0YS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlR2FtZVNjb3JlQWN0aW9uKGlucHV0OiBTYXZlR2FtZVNjb3JlSW5wdXQpOiBQcm9taXNlPHsgc3VjY2Vzcz86IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZS5cIiB9O1xuXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJykuaW5zZXJ0KFtwYXJzZWRJbnB1dC5kYXRhXSk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgc2NvcmU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgc2NvcmUuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG59XG5cblxuLy8gPT09IEtub3dsZWRnZSBHYWxheHkgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uKFxuICAgIGlucHV0OiBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0LFxuKTogUHJvbWlzZTx7IGdhbGF4eT86IEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYWxheHlEYXRhID0gYXdhaXQgZ2VuZXJhdGVLbm93bGVkZ2VHYWxheHkocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghZ2FsYXh5RGF0YSB8fCAhZ2FsYXh5RGF0YS5zdWJqZWN0KSB7XG4gICAgICAgICAgICAvLyBBZGQgYSBzdWJqZWN0IGlmIHRoZSBBSSBkaWRuJ3QgcHJvdmlkZSBvbmUgKGUuZy4sIGZyb20gYSBmaWxlKVxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tTdWJqZWN0ID0gaW5wdXQuc3ViamVjdCB8fCBcIlVwbG9hZGVkIFN5bGxhYnVzXCI7XG4gICAgICAgICAgICByZXR1cm4geyBnYWxheHk6IHsgLi4uZ2FsYXh5RGF0YSwgc3ViamVjdDogZmFsbGJhY2tTdWJqZWN0IH0gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBnYWxheHk6IGdhbGF4eURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uOlwiLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogZXJyb3JNZXNzYWdlIH07XG4gICAgfVxufVxuXG5cbi8vID09PSBQbGFnaWFyaXNtIENoZWNrZXIgQWN0aW9ucyA9PT1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RmlsZUNvbnRlbnRBc0RhdGFVcmkoZmlsZUNvbnRlbnQ6IHN0cmluZywgbWltZVR5cGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKG1pbWVUeXBlID09PSAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVDb250ZW50LnNwbGl0KCcsJylbMV0sICdiYXNlNjQnKTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgbWFtbW90aC5leHRyYWN0UmF3VGV4dCh7IGJ1ZmZlciB9KTtcbiAgICAgICAgcmV0dXJuIGBkYXRhOnRleHQvcGxhaW47YmFzZTY0LCR7QnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCdiYXNlNjQnKX1gO1xuICAgIH1cbiAgICAvLyBGb3IgUERGIGFuZCBUWFQsIHRoZSBjb250ZW50IGlzIGFscmVhZHkgYSB2YWxpZCBkYXRhIFVSSVxuICAgIHJldHVybiBmaWxlQ29udGVudDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbihpbnB1dDogUGxhZ2lhcmlzbUNoZWNrSW5wdXQpOiBQcm9taXNlPHsgcmVzdWx0PzogUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcGxhZ2lhcmlzbSBjaGVjazpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dCBmb3JtYXQgZm9yIEFJIG1vZGVsLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2RvYzFEYXRhVXJpLCBkb2MyRGF0YVVyaV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzFDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzFNaW1lVHlwZSksXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzJDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzJNaW1lVHlwZSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgY29uc3QgZmxvd0lucHV0ID0ge1xuICAgICAgICAgICAgLi4ucGFyc2VkSW5wdXQuZGF0YSxcbiAgICAgICAgICAgIGRvYzFDb250ZW50OiBkb2MxRGF0YVVyaSxcbiAgICAgICAgICAgIGRvYzJDb250ZW50OiBkb2MyRGF0YVVyaSxcbiAgICAgICAgfTtcbiAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaGVja1BsYWdpYXJpc20oZmxvd0lucHV0KTtcbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0IH07XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byBydW4gcGxhZ2lhcmlzbSBjaGVjay4gVGhlIEFJIG1vZGVsIG1heSBiZSBidXN5LlwiO1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cblxuLy8gPT09IEF1dGggQWN0aW9ucyA9PT1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dpbkFjdGlvbihpbnB1dDogTG9naW5JbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgcmVkaXJlY3QoJy8nKTtcbiAgICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlckFjdGlvbihpbnB1dDogUmVnaXN0ZXJJbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZywgc3VjY2Vzcz86IGJvb2xlYW4gfT4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduT3V0QWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Im1TQXVZc0IifQ==
}}),
"[project]/src/app/data:076cfb [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"405cd72726b1147728340b50af4081f35921b7a211":"generateKnowledgeGalaxyAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateKnowledgeGalaxyAction": (()=>generateKnowledgeGalaxyAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateKnowledgeGalaxyAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("405cd72726b1147728340b50af4081f35921b7a211", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateKnowledgeGalaxyAction"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblwidXNlIHNlcnZlclwiO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9ucyB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVGZWVkYmFjayB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlIH0gZnJvbSBcIkAvYWkvZmxvd3MvZ2VuZXJhdGUtcXVlc3Rpb25zLWZyb20tZmlsZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVBZHZpY2UgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hZHZpY2VcIjtcbmltcG9ydCB7IGdlbmVyYXRlUXVlc3Rpb25QYXBlciB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLXF1ZXN0aW9uLXBhcGVyXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1hdHRlbmRhbmNlLXJlcG9ydFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVNYXJrRmVlZGJhY2sgfSBmcm9tIFwiQC9haS9mbG93cy9nZW5lcmF0ZS1tYXJrLWZlZWRiYWNrXCI7XG5pbXBvcnQgeyBncmFkZUFzc2lnbm1lbnQgfSBmcm9tIFwiQC9haS9mbG93cy9ncmFkZS1hc3NpZ25tZW50LWZsb3dcIjtcbmltcG9ydCB7IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWNsYXNzcm9vbS1nYW1lXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUtub3dsZWRnZUdhbGF4eSB9IGZyb20gXCJAL2FpL2Zsb3dzL2dlbmVyYXRlLWtub3dsZWRnZS1nYWxheHlcIjtcbmltcG9ydCB7IGNoZWNrUGxhZ2lhcmlzbSB9IGZyb20gXCJAL2FpL2Zsb3dzL2NoZWNrLXBsYWdpYXJpc21cIjtcbmltcG9ydCB7IFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEsXG4gICAgR2VuZXJhdGVGZWVkYmFja0lucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUFkdmljZUlucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlUXVlc3Rpb25QYXBlcklucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLFxuICAgIFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEsXG4gICAgU2F2ZUludGVybmFsTWFya3NJbnB1dFNjaGVtYSxcbiAgICBTYXZlU3lsbGFidXNUcmFja2VySW5wdXRTY2hlbWEsXG4gICAgU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYSxcbiAgICBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYSxcbiAgICBQcm9qZWN0VHJhY2tlcklucHV0U2NoZW1hLFxuICAgIFVwbG9hZFN0dWRlbnREb2N1bWVudElucHV0U2NoZW1hLFxuICAgIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZUlucHV0U2NoZW1hLFxuICAgIFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYSxcbiAgICBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLFxuICAgIENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYSxcbiAgICBMb2dpblNjaGVtYSxcbiAgICBSZWdpc3RlclNjaGVtYSxcbiAgICBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYSxcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zSW5wdXQsIFxuICAgIHR5cGUgR2VuZXJhdGVGZWVkYmFja0lucHV0LCBcbiAgICB0eXBlIEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQsXG4gICAgdHlwZSBNQ1FRdWVzdGlvbixcbiAgICB0eXBlIEdlbmVyYXRlUXVlc3Rpb25zRnJvbUZpbGVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQWR2aWNlT3V0cHV0LFxuICAgIHR5cGUgR2VuZXJhdGVRdWVzdGlvblBhcGVySW5wdXQsXG4gICAgdHlwZSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsXG4gICAgdHlwZSBHZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dCxcbiAgICB0eXBlIFNhdmVBdHRlbmRhbmNlSW5wdXQsXG4gICAgdHlwZSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0LFxuICAgIHR5cGUgUGVyZm9ybWFuY2VSZXBvcnQsXG4gICAgdHlwZSBBdHRlbmRhbmNlUmVjb3JkLFxuICAgIHR5cGUgU3lsbGFidXNUcmFja2VyUmVjb3JkLFxuICAgIHR5cGUgU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0LFxuICAgIHR5cGUgVGVhY2hlclJlbWFya1JlY29yZCxcbiAgICB0eXBlIFN0dWRlbnRJbmZvLFxuICAgIHR5cGUgU3R1ZGVudFByb2ZpbGVEYXRhLFxuICAgIHR5cGUgQWNhZGVtaWNFdmVudFJlY29yZCxcbiAgICB0eXBlIEdyYWRlQXNzaWdubWVudE91dHB1dCxcbiAgICB0eXBlIFByb2plY3RUcmFja2VySW5wdXQsXG4gICAgdHlwZSBQcm9qZWN0VHJhY2tlclJlY29yZCxcbiAgICB0eXBlIFN0dWRlbnREb2N1bWVudFJlY29yZCxcbiAgICB0eXBlIEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCxcbiAgICB0eXBlIEdhbWVMZWFkZXJib2FyZFJlY29yZCxcbiAgICB0eXBlIFNhdmVHYW1lU2NvcmVJbnB1dCxcbiAgICB0eXBlIEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LFxuICAgIHR5cGUgQ3JlYXRlQ3VzdG9tUXVpeklucHV0LFxuICAgIHR5cGUgQ3VzdG9tUXVpelJlY29yZCxcbiAgICB0eXBlIExvZ2luSW5wdXQsXG4gICAgdHlwZSBSZWdpc3RlcklucHV0LFxuICAgIHR5cGUgR2VuZXJhdGVLbm93bGVkZ2VHYWxheHlJbnB1dCxcbiAgICB0eXBlIFBsYWdpYXJpc21DaGVja0lucHV0LFxuICAgIHR5cGUgUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LFxufSBmcm9tIFwiQC9haS9zY2hlbWFzXCI7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUFkbWluIH0gZnJvbSBcIkAvbGliL3N1cGFiYXNlL2FkbWluXCI7XG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXJDbGllbnQgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2Uvc2VydmVyXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IHJldmFsaWRhdGVQYXRoIH0gZnJvbSBcIm5leHQvY2FjaGVcIjtcbmltcG9ydCB7IHJlZGlyZWN0IH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiQC9saWIvc3VwYWJhc2UvY2xpZW50XCI7XG5pbXBvcnQgbWFtbW90aCBmcm9tICdtYW1tb3RoJztcblxuLy8gPT09IFF1ZXN0aW9uIEFjdGlvbnMgPT09XG50eXBlIFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2UgPSB7XG4gIHF1ZXN0aW9ucz86IE1DUVF1ZXN0aW9uW107XG4gIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uc1RvU3VwYWJhc2UocXVlc3Rpb25zOiBNQ1FRdWVzdGlvbltdLCB0b3BpYz86IHN0cmluZykge1xuICAgIGlmICghdG9waWMgfHwgcXVlc3Rpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcXVlc3Rpb25zVG9JbnNlcnQgPSBxdWVzdGlvbnMubWFwKHEgPT4gKHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBxdWVzdGlvbl90ZXh0OiBxLnF1ZXN0aW9uLFxuICAgICAgICBvcHRpb25fYTogcS5vcHRpb25zLkEsXG4gICAgICAgIG9wdGlvbl9iOiBxLm9wdGlvbnMuQixcbiAgICAgICAgb3B0aW9uX2M6IHEub3B0aW9ucy5DLFxuICAgICAgICBvcHRpb25fZDogcS5vcHRpb25zLkQsXG4gICAgICAgIGNvcnJlY3Rfb3B0aW9uOiBxLmFuc3dlclxuICAgIH0pKTtcblxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdtY3FfcXVlc3Rpb25zJykuaW5zZXJ0KHF1ZXN0aW9uc1RvSW5zZXJ0KTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBxdWVzdGlvbnMgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0FjdGlvbihpbnB1dDogR2VuZXJhdGVRdWVzdGlvbnNJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25BY3Rpb25SZXNwb25zZT4ge1xuICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlUXVlc3Rpb25zSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlUXVlc3Rpb25zKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcXVlc3Rpb25zLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXQpOiBQcm9taXNlPFF1ZXN0aW9uQWN0aW9uUmVzcG9uc2U+IHtcbiAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbiBmcm9tIGZpbGU6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZVF1ZXN0aW9uc0Zyb21GaWxlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgIGlmIChvdXRwdXQucXVlc3Rpb25zKSB7XG4gICAgICAgIHNhdmVRdWVzdGlvbnNUb1N1cGFiYXNlKG91dHB1dC5xdWVzdGlvbnMsIHBhcnNlZElucHV0LmRhdGEudG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdWVzdGlvbnM6IG91dHB1dC5xdWVzdGlvbnMgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnMgZnJvbSBmaWxlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHF1ZXN0aW9ucyBmcm9tIHRoZSBmaWxlLiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVGZWVkYmFja1RvU3VwYWJhc2UoZmVlZGJhY2tEYXRhOiBHZW5lcmF0ZUZlZWRiYWNrT3V0cHV0LCBpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KSB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHNjb3JlID0gT2JqZWN0LnZhbHVlcyhpbnB1dC5tYXJrcykucmVkdWNlKChzdW0sIG1hcmspID0+IHN1bSArIG1hcmssIDApO1xuICAgIGNvbnN0IHRvdGFsID0gaW5wdXQuc3ViamVjdHMubGVuZ3RoICogMTAwOyAvLyBBc3N1bWluZyAxMDAgbWF4IG1hcmtzIHBlciBzdWJqZWN0LCBjb25zaXN0ZW50IHdpdGggZ3JhZGUtYW5hbHl6ZXJcbiAgICBjb25zdCBzdWJqZWN0ID0gaW5wdXQuc3ViamVjdHMuam9pbignLCAnKTtcblxuICAgIGNvbnN0IHJlcG9ydFRvSW5zZXJ0ID0ge1xuICAgICAgc3R1ZGVudF9uYW1lOiBpbnB1dC5zdHVkZW50TmFtZSxcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICBzY29yZTogc2NvcmUsXG4gICAgICB0b3RhbDogdG90YWwsXG4gICAgICBmZWVkYmFjazogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN0cmVuZ3RoczogZmVlZGJhY2tEYXRhLnN0cmVuZ3RocyxcbiAgICAgICAgICB3ZWFrbmVzc2VzOiBmZWVkYmFja0RhdGEud2Vha25lc3NlcyxcbiAgICAgICAgICBpbXByb3ZlbWVudFRpcHM6IGZlZWRiYWNrRGF0YS5pbXByb3ZlbWVudFRpcHMsXG4gICAgICB9KSxcbiAgICAgIGltcHJvdmVtZW50X3BsYW46IEpTT04uc3RyaW5naWZ5KGZlZWRiYWNrRGF0YS5zdHVkeVBsYW4pLFxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpLmluc2VydChbcmVwb3J0VG9JbnNlcnRdKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBwZXJmb3JtYW5jZSByZXBvcnQgdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbnR5cGUgRmVlZGJhY2tBY3Rpb25SZXNwb25zZSA9IHtcbiAgICBmZWVkYmFjaz86IEdlbmVyYXRlRmVlZGJhY2tPdXRwdXQ7XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVGZWVkYmFja0FjdGlvbihpbnB1dDogR2VuZXJhdGVGZWVkYmFja0lucHV0KTogUHJvbWlzZTxGZWVkYmFja0FjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUZlZWRiYWNrSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcblxuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0IGZvciBmZWVkYmFjayBnZW5lcmF0aW9uLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVGZWVkYmFjayhwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICAgICAgYXdhaXQgc2F2ZUZlZWRiYWNrVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBvdXRwdXQgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBmZWVkYmFjazpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgQUkgZmVlZGJhY2suIFRoZSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIEFkdmljZUFjdGlvblJlc3BvbnNlID0ge1xuICAgIGFkdmljZT86IEdlbmVyYXRlQWR2aWNlT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZUFkdmljZVRvU3VwYWJhc2UoYWR2aWNlOiBHZW5lcmF0ZUFkdmljZU91dHB1dCwgaW5wdXQ6IHsgc3ViamVjdD86IHN0cmluZzsgdGV4dD86IHN0cmluZzsgZmlsZURhdGFVcmk/OiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcblxuICAgIGNvbnN0IHBsYW5Ub0luc2VydCA9IHtcbiAgICAgIHRlYWNoZXJfaWQ6IG51bGwsIC8vIE5vIHVzZXIgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICAgIHN1YmplY3Q6IGlucHV0LnN1YmplY3QsXG4gICAgICB1cGxvYWRlZF9jb250ZW50OiBpbnB1dC5maWxlRGF0YVVyaSB8fCBpbnB1dC50ZXh0LFxuICAgICAgY292ZXJlZF90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5jb3ZlcmVkVG9waWNzKSxcbiAgICAgIG5leHRfdG9waWM6IGFkdmljZS5uZXh0VG9waWMsXG4gICAgICByZXZpc2lvbl90b3BpY3M6IEpTT04uc3RyaW5naWZ5KGFkdmljZS5zdWdnZXN0ZWRSZXZpc2lvbnMpLFxuICAgICAgbWlzc2VkX2NvbmNlcHRzOiBKU09OLnN0cmluZ2lmeShhZHZpY2Uuc2tpcHBlZENvbmNlcHRzKVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgndGVhY2hpbmdfcGxhbnMnKS5pbnNlcnQoW3BsYW5Ub0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHRlYWNoaW5nIHBsYW4gdG8gU3VwYWJhc2U6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUFkdmljZUFjdGlvbihpbnB1dDogeyBzdWJqZWN0Pzogc3RyaW5nOyB0ZXh0Pzogc3RyaW5nOyBmaWxlRGF0YVVyaT86IHN0cmluZyB9KTogUHJvbWlzZTxBZHZpY2VBY3Rpb25SZXNwb25zZT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVBZHZpY2VJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhZHZpY2UgZ2VuZXJhdGlvbjpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGdlbmVyYXRlQWR2aWNlKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlQWR2aWNlVG9TdXBhYmFzZShvdXRwdXQsIHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGFkdmljZTogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYWR2aWNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkZhaWxlZCB0byBnZW5lcmF0ZSB0ZWFjaGluZyBhZHZpY2UuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG50eXBlIFJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydHM/OiBQZXJmb3JtYW5jZVJlcG9ydFtdO1xuICAgIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGVyZm9ybWFuY2VSZXBvcnRzKCk6IFByb21pc2U8UmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcInBlcmZvcm1hbmNlX3JlcG9ydHNcIilcbiAgICAgIC5zZWxlY3QoXCIqXCIpXG4gICAgICAub3JkZXIoXCJjcmVhdGVkX2F0XCIsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcGVyZm9ybWFuY2UgcmVwb3J0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcGVyZm9ybWFuY2UgcmVwb3J0cy4gUGxlYXNlIGVuc3VyZSB0aGUgJ3BlcmZvcm1hbmNlX3JlcG9ydHMnIHRhYmxlIGV4aXN0cyBhbmQgdGhhdCB5b3VyIFN1cGFiYXNlIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0LlwiIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVwb3J0czogZGF0YSBhcyBQZXJmb3JtYW5jZVJlcG9ydFtdIH07XG59XG5cbnR5cGUgUXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlID0ge1xuICAgIHBhcGVyPzogR2VuZXJhdGVRdWVzdGlvblBhcGVyT3V0cHV0O1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVF1ZXN0aW9uUGFwZXJUb1N1cGFiYXNlKHBhcGVyOiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJPdXRwdXQsIGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBwYXBlclRvSW5zZXJ0ID0ge1xuICAgICAgdGVhY2hlcl9pZDogbnVsbCwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgICAgc3ViamVjdDogaW5wdXQuc3ViamVjdCxcbiAgICAgIHVuaXQ6IGlucHV0LnVuaXQgfHwgYEZpbGU6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXG4gICAgICBvbmVfbWFyazogcGFwZXIub25lTWFya1F1ZXN0aW9ucyxcbiAgICAgIHR3b19tYXJrOiBwYXBlci50d29NYXJrUXVlc3Rpb25zLFxuICAgICAgdGVuX21hcms6IHBhcGVyLnRlbk1hcmtRdWVzdGlvbnMsXG4gICAgfTtcblxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3F1ZXN0aW9uX3BhcGVyc192MicpLmluc2VydChbcGFwZXJUb0luc2VydF0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHF1ZXN0aW9uIHBhcGVyIHRvIFN1cGFiYXNlOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVRdWVzdGlvblBhcGVyQWN0aW9uKGlucHV0OiBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dCk6IFByb21pc2U8UXVlc3Rpb25QYXBlckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZVF1ZXN0aW9uUGFwZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBxdWVzdGlvbiBwYXBlciBnZW5lcmF0aW9uOlwiLCBwYXJzZWRJbnB1dC5lcnJvci5mbGF0dGVuKCkpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGVRdWVzdGlvblBhcGVyKHBhcnNlZElucHV0LmRhdGEpO1xuICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICBzYXZlUXVlc3Rpb25QYXBlclRvU3VwYWJhc2Uob3V0cHV0LCBwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwYXBlcjogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgcXVlc3Rpb24gcGFwZXI6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHRoZSBxdWVzdGlvbiBwYXBlci4gVGhlIEFJIG1vZGVsIG1heSBiZSB1bmF2YWlsYWJsZSBvciB0aGUgcmVxdWVzdCB0aW1lZCBvdXQuIFBsZWFzZSB0cnkgYWdhaW4uXCIgfTtcbiAgICB9XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlc3BvbnNlID0ge1xuICAgIHJlY29yZHM/OiBBdHRlbmRhbmNlUmVjb3JkW107XG4gICAgZXJyb3I/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXR0ZW5kYW5jZVJlY29yZHMoKTogUHJvbWlzZTxBdHRlbmRhbmNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdkYXRlJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGF0dGVuZGFuY2UgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhdHRlbmRhbmNlIGRhdGEuIFBsZWFzZSBlbnN1cmUgdGhlICdzdHVkZW50X2F0dGVuZGFuY2UnIHRhYmxlIGV4aXN0cy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgYXMgQXR0ZW5kYW5jZVJlY29yZFtdIH07XG59XG5cbnR5cGUgQXR0ZW5kYW5jZVJlcG9ydEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlcG9ydD86IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnRBY3Rpb24oaW5wdXQ6IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0KTogUHJvbWlzZTxBdHRlbmRhbmNlUmVwb3J0QWN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IEdlbmVyYXRlQXR0ZW5kYW5jZVJlcG9ydElucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIGF0dGVuZGFuY2UgcmVwb3J0IGdlbmVyYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZW5lcmF0ZUF0dGVuZGFuY2VSZXBvcnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIHJldHVybiB7IHJlcG9ydDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYXR0ZW5kYW5jZSByZXBvcnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIGF0dGVuZGFuY2UgcmVwb3J0LiBUaGUgQUkgbW9kZWwgbWF5IGJlIHVuYXZhaWxhYmxlIG9yIHRoZSByZXF1ZXN0IHRpbWVkIG91dC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVBdHRlbmRhbmNlQWN0aW9uKGlucHV0OiBTYXZlQXR0ZW5kYW5jZUlucHV0KTogUHJvbWlzZTx7IG1lc3NhZ2U/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVBdHRlbmRhbmNlSW5wdXRTY2hlbWEuc2FmZVBhcnNlKGlucHV0KTtcbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IHBhcnNlZElucHV0O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBkYXRhLnN0dWRlbnRfbmFtZSxcbiAgICAgICAgcm9sbF9ubzogZGF0YS5yb2xsX25vLFxuICAgICAgICBkYXRlOiBkYXRhLmRhdGUsIFxuICAgICAgICBzdWJqZWN0OiBkYXRhLnN1YmplY3QsXG4gICAgICAgIHBlcmlvZDogZGF0YS5wZXJpb2QsXG4gICAgICAgIHN0YXR1czogZGF0YS5zdGF0dXMsXG4gICAgICAgIHJlbWFyazogZGF0YS5yZW1hcmsgfHwgbnVsbCxcbiAgICAgICAgYmVoYXZpb3JfdGFnczogZGF0YS5iZWhhdmlvcl90YWdzIHx8IG51bGwsXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhdHRlbmRhbmNlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIGF0dGVuZGFuY2UgZGF0YSBkdWUgdG8gYSBkYXRhYmFzZSBlcnJvci5cIiB9O1xuICAgIH1cbiAgICBcbiAgICByZXZhbGlkYXRlUGF0aCgnLycpO1xuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTYXZlZCBhdHRlbmRhbmNlIGZvciAke2RhdGEuc3R1ZGVudF9uYW1lfSAoJHtkYXRhLnBlcmlvZH0pIOKAlCAke2RhdGEuc3RhdHVzfSBvbiAke2RhdGEuZGF0ZX1gfTtcbn1cblxudHlwZSBNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlID0ge1xuICAgIGZlZWRiYWNrPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVJbnRlcm5hbE1hcmtzQWN0aW9uKGlucHV0OiBTYXZlSW50ZXJuYWxNYXJrc0lucHV0KTogUHJvbWlzZTxNYXJrQ2FsY3VsYXRvckFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBTYXZlSW50ZXJuYWxNYXJrc0lucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG5cbiAgICBpZiAoIXBhcnNlZElucHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIG1hcmsgY2FsY3VsYXRpb246XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN0dWRlbnRfbmFtZSwgcm9sbF9ubywgc3ViamVjdCwgdGVzdDEsIHRlc3QyLCBhc3NpZ25tZW50LCBhdHRlbmRhbmNlIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IGludGVybmFsX3Njb3JlID0gdGVzdDEgKyB0ZXN0MiArIGFzc2lnbm1lbnQ7XG4gICAgXG4gICAgbGV0IGdyYWRlID0gJ0YnO1xuICAgIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyNykgZ3JhZGUgPSAnQSsnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDI0KSBncmFkZSA9ICdBJztcbiAgICBlbHNlIGlmIChpbnRlcm5hbF9zY29yZSA+PSAyMSkgZ3JhZGUgPSAnQic7XG4gICAgZWxzZSBpZiAoaW50ZXJuYWxfc2NvcmUgPj0gMTgpIGdyYWRlID0gJ0MnO1xuICAgIGVsc2UgaWYgKGludGVybmFsX3Njb3JlID49IDE1KSBncmFkZSA9ICdEJztcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIEdlbmVyYXRlIEFJIGZlZWRiYWNrXG4gICAgICAgIGNvbnN0IGZlZWRiYWNrUmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVNYXJrRmVlZGJhY2soe1xuICAgICAgICAgICAgc3R1ZGVudE5hbWU6IHN0dWRlbnRfbmFtZSxcbiAgICAgICAgICAgIGludGVybmFsU2NvcmU6IGludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgZ3JhZGU6IGdyYWRlLFxuICAgICAgICAgICAgYXR0ZW5kYW5jZTogYXR0ZW5kYW5jZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFmZWVkYmFja1Jlc3VsdC5mZWVkYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQUkgZmFpbGVkIHRvIGdlbmVyYXRlIGZlZWRiYWNrLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgICAgICAvLyBTYXZlIHRvIFN1cGFiYXNlXG4gICAgICAgIGNvbnN0IHJlY29yZFRvSW5zZXJ0ID0ge1xuICAgICAgICAgICAgc3R1ZGVudF9uYW1lLFxuICAgICAgICAgICAgcm9sbF9ubyxcbiAgICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgICB0ZXN0MSxcbiAgICAgICAgICAgIHRlc3QyLFxuICAgICAgICAgICAgYXNzaWdubWVudCxcbiAgICAgICAgICAgIGF0dGVuZGFuY2UsXG4gICAgICAgICAgICBpbnRlcm5hbF9zY29yZSxcbiAgICAgICAgICAgIGdyYWRlLFxuICAgICAgICAgICAgZmVlZGJhY2s6IGZlZWRiYWNrUmVzdWx0LmZlZWRiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBlcnJvcjogZGJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnaW50ZXJuYWxfbWFya3MnKS5pbnNlcnQoW3JlY29yZFRvSW5zZXJ0XSk7XG5cbiAgICAgICAgaWYgKGRiRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgaW50ZXJuYWwgbWFya3MgdG8gU3VwYWJhc2U6XCIsIGRiRXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHNhdmUgdGhlIHJlY29yZCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrOiBmZWVkYmFja1Jlc3VsdC5mZWVkYmFjayB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBzYXZlSW50ZXJuYWxNYXJrc0FjdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZmVlZGJhY2sgZ2VuZXJhdGlvbiBvciBzYXZpbmcuXCI7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeWxsYWJ1c1RyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogU3lsbGFidXNUcmFja2VyUmVjb3JkW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N5bGxhYnVzX3RyYWNrZXInKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN5bGxhYnVzIHRyYWNrZXIgcmVjb3JkczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzeWxsYWJ1cyB0cmFja2VyIGRhdGEuIFBsZWFzZSBjaGVjayB5b3VyIFJMUyBwb2xpY2llcy5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlY29yZHM6IGRhdGEgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVTeWxsYWJ1c1RyYWNrZXJBY3Rpb24oaW5wdXQ6IFNhdmVTeWxsYWJ1c1RyYWNrZXJJbnB1dCk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcblxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZVN5bGxhYnVzVHJhY2tlcklucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBzdWJqZWN0LCB0b3BpYyB9ID0gcGFyc2VkSW5wdXQuZGF0YTtcbiAgICBcbiAgICBjb25zdCByZWNvcmQgPSB7XG4gICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgY29tcGxldGVkOiBmYWxzZSwgLy8gQWx3YXlzIGZhbHNlIG9uIGNyZWF0aW9uXG4gICAgICAgIHVwbG9hZGVkX2J5OiBudWxsLCAvLyBObyB1c2VyIHRvIGFzc29jaWF0ZSB3aXRoXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdzeWxsYWJ1c190cmFja2VyJykuaW5zZXJ0KFtyZWNvcmRdKTtcbiAgICAgICAgICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW5zZXJ0aW5nIHN5bGxhYnVzIHRvcGljOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBzYXZlIHN5bGxhYnVzIGRhdGEgZHVlIHRvIGEgZGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBgQWRkZWQgdG9waWMgXCIke3RvcGljfVwiIHRvICR7c3ViamVjdH0uYH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTeWxsYWJ1c1RvcGljU3RhdHVzQWN0aW9uKGlkOiBzdHJpbmcsIGNvbXBsZXRlZDogYm9vbGVhbik6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3lsbGFidXNfdHJhY2tlcicpXG4gICAgICAgIC51cGRhdGUoeyBjb21wbGV0ZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgc3lsbGFidXMgdG9waWM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSB0b3BpYyBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBcIlRvcGljIHN0YXR1cyB1cGRhdGVkLlwiIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRMaXN0KCk6IFByb21pc2U8eyBzdHVkZW50cz86IFN0dWRlbnRJbmZvW10sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzdHVkZW50X2F0dGVuZGFuY2UnKVxuICAgICAgICAuc2VsZWN0KCdzdHVkZW50X25hbWUsIHJvbGxfbm8nKVxuICAgICAgICAub3JkZXIoJ3N0dWRlbnRfbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN0dWRlbnQgbGlzdDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiAnQ291bGQgbm90IGZldGNoIHN0dWRlbnQgbGlzdC4nIH07XG4gICAgfVxuXG4gICAgY29uc3QgdW5pcXVlU3R1ZGVudHMgPSBBcnJheS5mcm9tKG5ldyBNYXAoZGF0YS5tYXAoaXRlbSA9PiBbaXRlbS5yb2xsX25vLCBpdGVtXSkpLnZhbHVlcygpKTtcbiAgICBcbiAgICByZXR1cm4geyBzdHVkZW50czogdW5pcXVlU3R1ZGVudHMgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnRQcm9maWxlRGF0YShyb2xsTm86IHN0cmluZyk6IFByb21pc2U8eyBwcm9maWxlPzogU3R1ZGVudFByb2ZpbGVEYXRhLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgICAgIGNvbnN0IHsgZGF0YTogYXR0ZW5kYW5jZURhdGEsIGVycm9yOiBhdHRlbmRhbmNlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgnc3R1ZGVudF9hdHRlbmRhbmNlJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N0YXR1cywgYmVoYXZpb3JfdGFncycpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pO1xuICAgICAgICBpZiAoYXR0ZW5kYW5jZUVycm9yKSB0aHJvdyBuZXcgRXJyb3IoYEF0dGVuZGFuY2UgZmV0Y2ggZmFpbGVkOiAke2F0dGVuZGFuY2VFcnJvci5tZXNzYWdlfWApO1xuXG4gICAgICAgIGNvbnN0IHRvdGFsRGF5cyA9IGF0dGVuZGFuY2VEYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcHJlc2VudERheXMgPSBhdHRlbmRhbmNlRGF0YS5maWx0ZXIociA9PiByLnN0YXR1cyA9PT0gJ1ByZXNlbnQnIHx8IHIuc3RhdHVzID09PSAnTGF0ZScpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYXR0ZW5kYW5jZVBlcmNlbnRhZ2UgPSB0b3RhbERheXMgPiAwID8gTWF0aC5yb3VuZCgocHJlc2VudERheXMgLyB0b3RhbERheXMpICogMTAwKSA6IDA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBiZWhhdmlvclRhZ3MgPSBbLi4ubmV3IFNldChcbiAgICAgICAgICAgIGF0dGVuZGFuY2VEYXRhXG4gICAgICAgICAgICAgICAgLmZsYXRNYXAociA9PiAoci5iZWhhdmlvcl90YWdzID8gci5iZWhhdmlvcl90YWdzLnNwbGl0KCcsJykubWFwKHRhZyA9PiB0YWcudHJpbSgpKSA6IFtdKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICldO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeyBkYXRhOiBtYXJrc0RhdGEsIGVycm9yOiBtYXJrc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgICAgLmZyb20oJ2ludGVybmFsX21hcmtzJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ3N1YmplY3QsIGludGVybmFsX3Njb3JlLCBncmFkZSwgc3R1ZGVudF9uYW1lJylcbiAgICAgICAgICAgIC5lcSgncm9sbF9ubycsIHJvbGxObyk7XG4gICAgICAgIGlmIChtYXJrc0Vycm9yKSB0aHJvdyBuZXcgRXJyb3IoYE1hcmtzIGZldGNoIGZhaWxlZDogJHttYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiByZW1hcmtzRGF0YSwgZXJyb3I6IHJlbWFya3NFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgICAgIC5mcm9tKCd0ZWFjaGVyX3JlbWFya3MnKVxuICAgICAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgICAgICAuZXEoJ3JvbGxfbm8nLCByb2xsTm8pXG4gICAgICAgICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG4gICAgICAgIGlmIChyZW1hcmtzRXJyb3IpIHRocm93IG5ldyBFcnJvcihgUmVtYXJrcyBmZXRjaCBmYWlsZWQ6ICR7cmVtYXJrc0Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgICAgY29uc3Qgc3R1ZGVudE5hbWUgPSBtYXJrc0RhdGE/LlswXT8uc3R1ZGVudF9uYW1lIHx8IGF0dGVuZGFuY2VEYXRhPy5bMF0/LnN0dWRlbnRfbmFtZSB8fCAnTi9BJztcblxuICAgICAgICBjb25zdCB7IGRhdGE6IGZlZWRiYWNrRGF0YSwgZXJyb3I6IGZlZWRiYWNrRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncGVyZm9ybWFuY2VfcmVwb3J0cycpXG4gICAgICAgICAgICAuc2VsZWN0KCdmZWVkYmFjaycpXG4gICAgICAgICAgICAuZXEoJ3N0dWRlbnRfbmFtZScsIHN0dWRlbnROYW1lKVxuICAgICAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgICAgICAubGltaXQoMSlcbiAgICAgICAgICAgIC5zaW5nbGUoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBhaUZlZWRiYWNrID0gbnVsbDtcbiAgICAgICAgaWYgKGZlZWRiYWNrRGF0YT8uZmVlZGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkRmVlZGJhY2sgPSB0eXBlb2YgZmVlZGJhY2tEYXRhLmZlZWRiYWNrID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoZmVlZGJhY2tEYXRhLmZlZWRiYWNrKSA6IGZlZWRiYWNrRGF0YS5mZWVkYmFjaztcbiAgICAgICAgICAgICAgICBhaUZlZWRiYWNrID0gcGFyc2VkRmVlZGJhY2suaW1wcm92ZW1lbnRUaXBzIHx8IFwiTm8gc3BlY2lmaWMgdGlwcyBhdmFpbGFibGUuXCI7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYWlGZWVkYmFjayA9IFwiQ291bGQgbm90IHBhcnNlIEFJIGZlZWRiYWNrLlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvZmlsZTogU3R1ZGVudFByb2ZpbGVEYXRhID0ge1xuICAgICAgICAgICAgc3R1ZGVudE5hbWUsXG4gICAgICAgICAgICByb2xsTm86IHJvbGxObyxcbiAgICAgICAgICAgIGF0dGVuZGFuY2U6IHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiBhdHRlbmRhbmNlUGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICBwcmVzZW50RGF5czogcHJlc2VudERheXMsXG4gICAgICAgICAgICAgICAgdG90YWxEYXlzOiB0b3RhbERheXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3JUYWdzOiBiZWhhdmlvclRhZ3MsXG4gICAgICAgICAgICBtYXJrczogbWFya3NEYXRhLm1hcChtID0+ICh7XG4gICAgICAgICAgICAgICAgc3ViamVjdDogbS5zdWJqZWN0LFxuICAgICAgICAgICAgICAgIGludGVybmFsX3Njb3JlOiBtLmludGVybmFsX3Njb3JlLFxuICAgICAgICAgICAgICAgIGdyYWRlOiBtLmdyYWRlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICByZW1hcmtzOiByZW1hcmtzRGF0YSBhcyBUZWFjaGVyUmVtYXJrUmVjb3JkW10sXG4gICAgICAgICAgICBhaUZlZWRiYWNrOiBhaUZlZWRiYWNrLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IHByb2ZpbGUgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIGZldGNoaW5nIHByb2ZpbGUgZGF0YS5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldFN0dWRlbnRQcm9maWxlRGF0YTpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWNhZGVtaWNFdmVudHNBY3Rpb24oKTogUHJvbWlzZTx7IGV2ZW50cz86IEFjYWRlbWljRXZlbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZUFkbWluKSByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgY3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudC5cIiB9O1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2FjYWRlbWljX2NhbGVuZGFyJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcignZXZlbnRfZGF0ZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFjYWRlbWljIGV2ZW50czonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBhY2FkZW1pYyBldmVudHMgZGF0YS5cIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGV2ZW50czogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUFjYWRlbWljRXZlbnRBY3Rpb24oXG4gICAgaW5wdXQ6IE9taXQ8QWNhZGVtaWNFdmVudFJlY29yZCwgJ2lkJyB8ICdjcmVhdGVkX2F0JyB8ICdwb3N0ZWRfYnknIHwgJ2V2ZW50X2RhdGUnPiAmIHsgZXZlbnRfZGF0ZTogRGF0ZSB9XG4pOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gU2F2ZUFjYWRlbWljRXZlbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIGV2ZW50X2RhdGUsIGV2ZW50X3R5cGUgfSA9IHBhcnNlZElucHV0LmRhdGE7XG4gICAgXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGZvcm1hdChldmVudF9kYXRlLCAneXl5eS1NTS1kZCcpO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZCA9IHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB8fCBudWxsLFxuICAgICAgICBldmVudF9kYXRlOiBmb3JtYXR0ZWREYXRlLFxuICAgICAgICBldmVudF90eXBlLFxuICAgICAgICBwb3N0ZWRfYnk6IG51bGwgLy8gTm8gdXNlciB0byBhc3NvY2lhdGUgd2l0aFxuICAgIH07XG4gICAgXG4gICAgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGdldFN1cGFiYXNlQWRtaW4oKTtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4pIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pbi5mcm9tKCdhY2FkZW1pY19jYWxlbmRhcicpLmluc2VydChbcmVjb3JkXSk7XG4gICAgICAgICAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBhY2FkZW1pYyBldmVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgaW5zZXJ0IG5ldyBldmVudCByZWNvcmQuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcblxuICAgIHJldHVybiB7IG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgYWRkZWQgZXZlbnQ6IFwiJHt0aXRsZX1cImB9O1xufVxuXG50eXBlIEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlID0ge1xuICAgIHJlc3VsdD86IEdyYWRlQXNzaWdubWVudE91dHB1dDtcbiAgICBlcnJvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBncmFkZUFzc2lnbm1lbnRBY3Rpb24oaW5wdXQ6IHsgc3R1ZGVudE5hbWU6IHN0cmluZzsgc3ViamVjdDogc3RyaW5nOyBmaWxlRGF0YVVyaTogc3RyaW5nIH0pOiBQcm9taXNlPEdyYWRlQXNzaWdubWVudEFjdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHcmFkZUFzc2lnbm1lbnRJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuXG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBhc3NpZ25tZW50IGdyYWRpbmc6XCIsIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkludmFsaWQgaW5wdXQuXCIgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBncmFkZUFzc2lnbm1lbnQocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdG8gU3VwYWJhc2VcbiAgICAgICAgICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgICAgICAgICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNyZWF0ZSBTdXBhYmFzZSBhZG1pbiBjbGllbnQuXCIgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ2Fzc2lnbm1lbnRfc2NvcmVzJykuaW5zZXJ0KFt7XG4gICAgICAgICAgICAgICAgc3R1ZGVudF9uYW1lOiBwYXJzZWRJbnB1dC5kYXRhLnN0dWRlbnROYW1lLFxuICAgICAgICAgICAgICAgIHN1YmplY3Q6IHBhcnNlZElucHV0LmRhdGEuc3ViamVjdCxcbiAgICAgICAgICAgICAgICBzY29yZTogb3V0cHV0LnNjb3JlLFxuICAgICAgICAgICAgICAgIGZlZWRiYWNrOiBvdXRwdXQuZmVlZGJhY2ssXG4gICAgICAgICAgICB9XSk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgYXNzaWdubWVudCBzY29yZSB0byBTdXBhYmFzZTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBzYXZlIHRoZSBncmFkaW5nIHJlc3VsdCB0byB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgICAgIHJldHVybiB7IHJlc3VsdDogb3V0cHV0IH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdyYWRpbmcgYXNzaWdubWVudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJGYWlsZWQgdG8gZ3JhZGUgdGhlIGFzc2lnbm1lbnQuIFRoZSBBSSBtb2RlbCBtYXkgYmUgdW5hdmFpbGFibGUgb3IgdGhlIHJlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvamVjdFRyYWNrZXJSZWNvcmRzKCk6IFByb21pc2U8eyByZWNvcmRzPzogUHJvamVjdFRyYWNrZXJSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAub3JkZXIoJ3VwZGF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdCB0cmFja2VyIHJlY29yZHM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggcHJvamVjdCB0cmFja2VyIGRhdGEuXCIgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVjb3JkczogZGF0YSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZU9yVXBkYXRlUHJvamVjdFRyYWNrZXJBY3Rpb24oaW5wdXQ6IFByb2plY3RUcmFja2VySW5wdXQpOiBQcm9taXNlPHsgbWVzc2FnZT86IHN0cmluZywgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gUHJvamVjdFRyYWNrZXJJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0OiBcIiArIHBhcnNlZElucHV0LmVycm9yLmZsYXR0ZW4oKS5mb3JtRXJyb3JzLmpvaW4oJywgJykgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGlkLCByb2xsX25vLCAuLi5yZWNvcmREYXRhIH0gPSBwYXJzZWRJbnB1dC5kYXRhO1xuICAgIFxuICAgIGNvbnN0IHJlY29yZFRvU2F2ZSA9IHsgcm9sbF9ubywgLi4ucmVjb3JkRGF0YSB9O1xuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjcmVhdGUgU3VwYWJhc2UgYWRtaW4gY2xpZW50LlwiIH07XG4gICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgncHJvamVjdF90cmFja2VyJylcbiAgICAgICAgICAgIC51cGRhdGUocmVjb3JkVG9TYXZlKVxuICAgICAgICAgICAgLmVxKCdpZCcsIGlkKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB1cGRhdGluZyBwcm9qZWN0OlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgdXBkYXRlIHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogYFVwZGF0ZWQgcHJvamVjdCBmb3IgJHtyZWNvcmRUb1NhdmUuc3R1ZGVudF9uYW1lfS5gIH07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmcsIGVycm9yOiBzZWxlY3RFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLmVxKCdyb2xsX25vJywgcm9sbF9ubylcbiAgICAgICAgLmxpbWl0KDEpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoc2VsZWN0RXJyb3IgJiYgc2VsZWN0RXJyb3IuY29kZSAhPT0gJ1BHUlNUMTE2Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiREIgZXJyb3IgY2hlY2tpbmcgZm9yIGR1cGxpY2F0ZXM6XCIsIHNlbGVjdEVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRGF0YWJhc2UgZXJyb3IuXCIgfTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBgQSBwcm9qZWN0IGZvciBSb2xsIE5vLiAke3JvbGxfbm99IGFscmVhZHkgZXhpc3RzLmAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGVycm9yOiBpbnNlcnRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2plY3RfdHJhY2tlcicpXG4gICAgICAgIC5pbnNlcnQoW3JlY29yZFRvU2F2ZV0pO1xuICAgICAgICBcbiAgICBpZiAoaW5zZXJ0RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluc2VydGluZyBwcm9qZWN0OlwiLCBpbnNlcnRFcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBpbnNlcnQgbmV3IHByb2plY3QgcmVjb3JkLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogYEFkZGVkIHByb2plY3QgZm9yICR7cmVjb3JkVG9TYXZlLnN0dWRlbnRfbmFtZX0uYCB9O1xufVxuXG4vLyA9PT0gU3R1ZGVudCBEb2N1bWVudCBWYXVsdCBBY3Rpb25zID09PVxuXG4vLyBHZXQgYWxsIGRvY3VtZW50cyBmb3IgdGhlIHRlYWNoZXIgdmlld1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0dWRlbnREb2N1bWVudHNBY3Rpb24oKTogUHJvbWlzZTx7IHJlY29yZHM/OiBTdHVkZW50RG9jdW1lbnRSZWNvcmRbXSwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcigndXBsb2FkZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc3R1ZGVudCBkb2N1bWVudHM6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmZXRjaCBzdHVkZW50IGRvY3VtZW50cy4gUGxlYXNlIGNoZWNrIHlvdXIgU3VwYWJhc2UgU0VMRUNUIHBvbGljeSBvbiB0aGUgJ3N0dWRlbnRfZG9jdW1lbnRzJyB0YWJsZS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbi8vIFZlcmlmeSBvciB1bi12ZXJpZnkgYSBkb2N1bWVudFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50U3RhdHVzQWN0aW9uKGRvY3VtZW50SWQ6IHN0cmluZywgdmVyaWZpZWQ6IGJvb2xlYW4pOiBQcm9taXNlPHsgcmVjb3JkPzogU3R1ZGVudERvY3VtZW50UmVjb3JkLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc3R1ZGVudF9kb2N1bWVudHMnKVxuICAgICAgICAudXBkYXRlKHsgdmVyaWZpZWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIGRvY3VtZW50SWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgZG9jdW1lbnQgc3RhdHVzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IHVwZGF0ZSBkb2N1bWVudCBzdGF0dXMuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyByZWNvcmQ6IGRhdGEgfTtcbn1cblxuLy8gVXBsb2FkIGEgbmV3IGRvY3VtZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkU3R1ZGVudERvY3VtZW50QWN0aW9uKGZvcm1EYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8eyBtZXNzYWdlPzogc3RyaW5nLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcmF3RGF0YSA9IHtcbiAgICAgICAgc3R1ZGVudF9uYW1lOiBmb3JtRGF0YS5nZXQoJ3N0dWRlbnRfbmFtZScpLFxuICAgICAgICByb2xsX25vOiBmb3JtRGF0YS5nZXQoJ3JvbGxfbm8nKSxcbiAgICAgICAgZG9jX3R5cGU6IGZvcm1EYXRhLmdldCgnZG9jX3R5cGUnKSxcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gVXBsb2FkU3R1ZGVudERvY3VtZW50SW5wdXRTY2hlbWEuc2FmZVBhcnNlKHJhd0RhdGEpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zdCBmaXJzdEVycm9yID0gcGFyc2VkSW5wdXQuZXJyb3IuZXJyb3JzWzBdPy5tZXNzYWdlIHx8ICdJbnZhbGlkIGlucHV0Lic7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBmaXJzdEVycm9yIH07XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldCgnZmlsZScpIGFzIEZpbGU7XG4gICAgaWYgKCFmaWxlIHx8IGZpbGUuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgaXMgcmVxdWlyZWQuJyB9O1xuICAgIH1cbiAgICBpZiAoZmlsZS5zaXplID4gNSAqIDEwMjQgKiAxMDI0KSB7IC8vIDVNQiBsaW1pdFxuICAgICAgICByZXR1cm4geyBlcnJvcjogJ0ZpbGUgc2l6ZSBtdXN0IGJlIGxlc3MgdGhhbiA1TUIuJyB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhbml0aXplZEZpbGVOYW1lID0gZmlsZS5uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05LlxcLV9dL2csICdfJyk7XG4gICAgICAgIGNvbnN0IGJhc2VQYXRoID0gJ3B1YmxpYyc7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7YmFzZVBhdGh9LyR7cGFyc2VkSW5wdXQuZGF0YS5yb2xsX25vfS8ke0RhdGUubm93KCl9LSR7c2FuaXRpemVkRmlsZU5hbWV9YDtcblxuICAgICAgICBjb25zdCBCVUNLRVRfTkFNRSA9ICdzdHVkZW50LWRvY3VtZW50cyc7XG4gICAgICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KCk7XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogdXBsb2FkRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgICAgICAgIC5mcm9tKEJVQ0tFVF9OQU1FKVxuICAgICAgICAgICAgLnVwbG9hZChmaWxlUGF0aCwgZmlsZSk7XG5cbiAgICAgICAgaWYgKHVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBTdG9yYWdlIFVwbG9hZCBFcnJvcjonLCB1cGxvYWRFcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0b3JhZ2UgZXJyb3I6ICR7dXBsb2FkRXJyb3IubWVzc2FnZX0uIFBsZWFzZSBlbnN1cmUgdGhlIGJ1Y2tldCAnJHtCVUNLRVRfTkFNRX0nIGV4aXN0cyBhbmQgaGFzIHRoZSBjb3JyZWN0IHBvbGljaWVzLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBkYXRhOiB1cmxEYXRhIH0gPSBzdXBhYmFzZS5zdG9yYWdlXG4gICAgICAgICAgICAuZnJvbShCVUNLRVRfTkFNRSlcbiAgICAgICAgICAgIC5nZXRQdWJsaWNVcmwoZmlsZVBhdGgpO1xuXG4gICAgICAgIGlmICghdXJsRGF0YS5wdWJsaWNVcmwpIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2UuZnJvbShCVUNLRVRfTkFNRSkucmVtb3ZlKFtmaWxlUGF0aF0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCBwdWJsaWMgVVJMIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWNvcmRUb0luc2VydCA9IHtcbiAgICAgICAgICAgIC4uLnBhcnNlZElucHV0LmRhdGEsXG4gICAgICAgICAgICBmaWxlX3BhdGg6IGZpbGVQYXRoLFxuICAgICAgICAgICAgZmlsZV91cmw6IHVybERhdGEucHVibGljVXJsLFxuICAgICAgICAgICAgdXBsb2FkZWRfYnk6ICdzdHVkZW50JywgLy8gTm8gdXNlciBjb250ZXh0XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgeyBlcnJvcjogaW5zZXJ0RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3N0dWRlbnRfZG9jdW1lbnRzJykuaW5zZXJ0KFtyZWNvcmRUb0luc2VydF0pO1xuXG4gICAgICAgIGlmIChpbnNlcnRFcnJvcikge1xuICAgICAgICAgICAgYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZS5mcm9tKEJVQ0tFVF9OQU1FKS5yZW1vdmUoW2ZpbGVQYXRoXSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGFiYXNlIGVycm9yOiAke2luc2VydEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy91cGxvYWQnKTtcbiAgICAgICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogXCJEb2N1bWVudCB1cGxvYWRlZCBzdWNjZXNzZnVsbHkhIEl0IHdpbGwgYmUgcmV2aWV3ZWQgYnkgeW91ciB0ZWFjaGVyLlwiIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHVwbG9hZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwbG9hZCBmYWlsZWQ6XCIsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cbi8vID09PSBDbGFzc3Jvb20gR2FtaWZpZXIgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbihcbiAgICB0b3BpYzogc3RyaW5nXG4pOiBQcm9taXNlPHsgZ2FtZT86IEdlbmVyYXRlQ2xhc3Nyb29tR2FtZU91dHB1dCwgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhcnNlZElucHV0ID0gR2VuZXJhdGVDbGFzc3Jvb21HYW1lSW5wdXRTY2hlbWEuc2FmZVBhcnNlKHsgdG9waWMgfSk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYW1lRGF0YSA9IGF3YWl0IGdlbmVyYXRlQ2xhc3Nyb29tR2FtZShwYXJzZWRJbnB1dC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHsgZ2FtZTogZ2FtZURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlQ2xhc3Nyb29tR2FtZUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbVF1aXpBY3Rpb24oaW5wdXQ6IENyZWF0ZUN1c3RvbVF1aXpJbnB1dCk6IFByb21pc2U8eyBxdWl6SWQ/OiBzdHJpbmcsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IENyZWF0ZUN1c3RvbVF1aXpJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUFkbWluKCk7XG4gICAgaWYgKCFzdXBhYmFzZSkgcmV0dXJuIHsgZXJyb3I6IFwiQ291bGQgbm90IGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlLlwiIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY3VzdG9tX3F1aXp6ZXMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICAgIHRvcGljOiBwYXJzZWRJbnB1dC5kYXRhLnRvcGljLFxuICAgICAgICAgICAgcXVlc3Rpb25zOiBKU09OLnN0cmluZ2lmeShwYXJzZWRJbnB1dC5kYXRhLnF1ZXN0aW9ucyksXG4gICAgICAgICAgICBjcmVhdGVkX2J5OiBudWxsLCAvLyBObyBhdXRoXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY3VzdG9tIHF1aXo6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgdGhlIHF1aXogdG8gdGhlIGRhdGFiYXNlLlwiIH07XG4gICAgfVxuICAgIFxuICAgIHJldmFsaWRhdGVQYXRoKCcvJyk7XG4gICAgcmV0dXJuIHsgcXVpeklkOiBkYXRhLmlkIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRRdWl6QWN0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHsgcXVpej86IEN1c3RvbVF1aXpSZWNvcmQsIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVNlcnZlckNsaWVudCgpO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjdXN0b21fcXVpenplcycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAuZXEoJ2lkJywgaWQpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgcXVpeiAke2lkfTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgcXVpei5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyBxdWl6OiBkYXRhIH07XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExlYWRlcmJvYXJkQWN0aW9uKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPHsgcmVjb3Jkcz86IEdhbWVMZWFkZXJib2FyZFJlY29yZFtdLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5lcSgndG9waWMnLCB0b3BpYylcbiAgICAgICAgLm9yZGVyKCdzY29yZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgICAubGltaXQoMTApO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBsZWFkZXJib2FyZDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogXCJDb3VsZCBub3QgZmV0Y2ggbGVhZGVyYm9hcmQgZGF0YS5cIiB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZWNvcmRzOiBkYXRhIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlR2FtZVNjb3JlQWN0aW9uKGlucHV0OiBTYXZlR2FtZVNjb3JlSW5wdXQpOiBQcm9taXNlPHsgc3VjY2Vzcz86IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXJzZWRJbnB1dCA9IFNhdmVHYW1lU2NvcmVJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2VzcykgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dC5cIiB9O1xuICAgIFxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VBZG1pbigpO1xuICAgIGlmICghc3VwYWJhc2UpIHJldHVybiB7IGVycm9yOiBcIkNvdWxkIG5vdCBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZS5cIiB9O1xuXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnZ2FtaWZpY2F0aW9uX2xlYWRlcmJvYXJkJykuaW5zZXJ0KFtwYXJzZWRJbnB1dC5kYXRhXSk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgc2NvcmU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRmFpbGVkIHRvIHNhdmUgc2NvcmUuXCIgfTtcbiAgICB9XG4gICAgcmV2YWxpZGF0ZVBhdGgoJy8nKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG59XG5cblxuLy8gPT09IEtub3dsZWRnZSBHYWxheHkgQWN0aW9ucyA9PT1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uKFxuICAgIGlucHV0OiBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0LFxuKTogUHJvbWlzZTx7IGdhbGF4eT86IEdlbmVyYXRlS25vd2xlZGdlR2FsYXh5T3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBHZW5lcmF0ZUtub3dsZWRnZUdhbGF4eUlucHV0U2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgaWYgKCFwYXJzZWRJbnB1dC5zdWNjZXNzKSByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGlucHV0LlwiIH07XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYWxheHlEYXRhID0gYXdhaXQgZ2VuZXJhdGVLbm93bGVkZ2VHYWxheHkocGFyc2VkSW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghZ2FsYXh5RGF0YSB8fCAhZ2FsYXh5RGF0YS5zdWJqZWN0KSB7XG4gICAgICAgICAgICAvLyBBZGQgYSBzdWJqZWN0IGlmIHRoZSBBSSBkaWRuJ3QgcHJvdmlkZSBvbmUgKGUuZy4sIGZyb20gYSBmaWxlKVxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tTdWJqZWN0ID0gaW5wdXQuc3ViamVjdCB8fCBcIlVwbG9hZGVkIFN5bGxhYnVzXCI7XG4gICAgICAgICAgICByZXR1cm4geyBnYWxheHk6IHsgLi4uZ2FsYXh5RGF0YSwgc3ViamVjdDogZmFsbGJhY2tTdWJqZWN0IH0gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBnYWxheHk6IGdhbGF4eURhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdlbmVyYXRlS25vd2xlZGdlR2FsYXh5QWN0aW9uOlwiLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4geyBlcnJvcjogZXJyb3JNZXNzYWdlIH07XG4gICAgfVxufVxuXG5cbi8vID09PSBQbGFnaWFyaXNtIENoZWNrZXIgQWN0aW9ucyA9PT1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RmlsZUNvbnRlbnRBc0RhdGFVcmkoZmlsZUNvbnRlbnQ6IHN0cmluZywgbWltZVR5cGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKG1pbWVUeXBlID09PSAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVDb250ZW50LnNwbGl0KCcsJylbMV0sICdiYXNlNjQnKTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgbWFtbW90aC5leHRyYWN0UmF3VGV4dCh7IGJ1ZmZlciB9KTtcbiAgICAgICAgcmV0dXJuIGBkYXRhOnRleHQvcGxhaW47YmFzZTY0LCR7QnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCdiYXNlNjQnKX1gO1xuICAgIH1cbiAgICAvLyBGb3IgUERGIGFuZCBUWFQsIHRoZSBjb250ZW50IGlzIGFscmVhZHkgYSB2YWxpZCBkYXRhIFVSSVxuICAgIHJldHVybiBmaWxlQ29udGVudDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbihpbnB1dDogUGxhZ2lhcmlzbUNoZWNrSW5wdXQpOiBQcm9taXNlPHsgcmVzdWx0PzogUGxhZ2lhcmlzbUNoZWNrT3V0cHV0LCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSBQbGFnaWFyaXNtQ2hlY2tJbnB1dFNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIGlmICghcGFyc2VkSW5wdXQuc3VjY2Vzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgcGxhZ2lhcmlzbSBjaGVjazpcIiwgcGFyc2VkSW5wdXQuZXJyb3IuZmxhdHRlbigpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiSW52YWxpZCBpbnB1dCBmb3JtYXQgZm9yIEFJIG1vZGVsLlwiIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2RvYzFEYXRhVXJpLCBkb2MyRGF0YVVyaV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzFDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzFNaW1lVHlwZSksXG4gICAgICAgICAgICBnZXRGaWxlQ29udGVudEFzRGF0YVVyaShwYXJzZWRJbnB1dC5kYXRhLmRvYzJDb250ZW50LCBwYXJzZWRJbnB1dC5kYXRhLmRvYzJNaW1lVHlwZSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgY29uc3QgZmxvd0lucHV0ID0ge1xuICAgICAgICAgICAgLi4ucGFyc2VkSW5wdXQuZGF0YSxcbiAgICAgICAgICAgIGRvYzFDb250ZW50OiBkb2MxRGF0YVVyaSxcbiAgICAgICAgICAgIGRvYzJDb250ZW50OiBkb2MyRGF0YVVyaSxcbiAgICAgICAgfTtcbiAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaGVja1BsYWdpYXJpc20oZmxvd0lucHV0KTtcbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0IH07XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byBydW4gcGxhZ2lhcmlzbSBjaGVjay4gVGhlIEFJIG1vZGVsIG1heSBiZSBidXN5LlwiO1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGNoZWNrUGxhZ2lhcmlzbUFjdGlvbjpcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgIHJldHVybiB7IGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgICB9XG59XG5cblxuLy8gPT09IEF1dGggQWN0aW9ucyA9PT1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dpbkFjdGlvbihpbnB1dDogTG9naW5JbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgcmVkaXJlY3QoJy8nKTtcbiAgICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlckFjdGlvbihpbnB1dDogUmVnaXN0ZXJJbnB1dCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZywgc3VjY2Vzcz86IGJvb2xlYW4gfT4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduT3V0QWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJlZGlyZWN0KCcvJyk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InlTQWc5QnNCIn0=
}}),
"[project]/src/app/data:4819cc [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"0051fd3320ee4a841a418f51fcd6fd01fe8208d2cc":"getStudentList"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getStudentList": (()=>getStudentList)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getStudentList = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("0051fd3320ee4a841a418f51fcd6fd01fe8208d2cc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getStudentList"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:61d517 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40a64239c4a8be9240bd70672f3bbcde6843931bbd":"getStudentProfileData"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getStudentProfileData": (()=>getStudentProfileData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getStudentProfileData = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40a64239c4a8be9240bd70672f3bbcde6843931bbd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getStudentProfileData"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:0d6b6d [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"00415d94ceb279c62dfeeeddc7f932358b88e65405":"getAcademicEventsAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAcademicEventsAction": (()=>getAcademicEventsAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAcademicEventsAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("00415d94ceb279c62dfeeeddc7f932358b88e65405", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAcademicEventsAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:040afa [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40fac28372b9de3153ca357e65b29e3c0a425b1472":"saveAcademicEventAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "saveAcademicEventAction": (()=>saveAcademicEventAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var saveAcademicEventAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40fac28372b9de3153ca357e65b29e3c0a425b1472", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "saveAcademicEventAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:d4c55a [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4080eaac7c320e416a966e7a113a88b25f70dc49c5":"gradeAssignmentAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "gradeAssignmentAction": (()=>gradeAssignmentAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var gradeAssignmentAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4080eaac7c320e416a966e7a113a88b25f70dc49c5", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "gradeAssignmentAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:a54c26 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"00871dacebcf675d14d860291ffee4edde90560522":"getProjectTrackerRecords"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getProjectTrackerRecords": (()=>getProjectTrackerRecords)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getProjectTrackerRecords = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("00871dacebcf675d14d860291ffee4edde90560522", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getProjectTrackerRecords"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:a0f815 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40db8364d872eda017374019a44dec50acea8f1352":"saveOrUpdateProjectTrackerAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "saveOrUpdateProjectTrackerAction": (()=>saveOrUpdateProjectTrackerAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var saveOrUpdateProjectTrackerAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40db8364d872eda017374019a44dec50acea8f1352", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "saveOrUpdateProjectTrackerAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:80781c [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"00dc368651ce077a5d8f980d34bce1a6aada27a3fd":"getStudentDocumentsAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getStudentDocumentsAction": (()=>getStudentDocumentsAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getStudentDocumentsAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("00dc368651ce077a5d8f980d34bce1a6aada27a3fd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getStudentDocumentsAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:d6b0c6 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60d146d0c333a17633b140820d86bd38132c55e3ea":"updateDocumentStatusAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateDocumentStatusAction": (()=>updateDocumentStatusAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateDocumentStatusAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60d146d0c333a17633b140820d86bd38132c55e3ea", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateDocumentStatusAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:582197 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"405972d75ea1bbfac6e527d968208ff18aa12b6927":"generateClassroomGameAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "generateClassroomGameAction": (()=>generateClassroomGameAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var generateClassroomGameAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("405972d75ea1bbfac6e527d968208ff18aa12b6927", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "generateClassroomGameAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:690d7e [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4063c0f2fb13f97815f1df4b3e6dbba2b0746e564a":"getLeaderboardAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getLeaderboardAction": (()=>getLeaderboardAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getLeaderboardAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4063c0f2fb13f97815f1df4b3e6dbba2b0746e564a", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getLeaderboardAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:81ca81 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ba14288c134b21b4ff44f27a8cd7b901c13917f3":"createCustomQuizAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCustomQuizAction": (()=>createCustomQuizAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createCustomQuizAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ba14288c134b21b4ff44f27a8cd7b901c13917f3", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCustomQuizAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:fb9f9d [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4019c74bde07996fc6ba4a7ad00e1bd2775bbad2c5":"checkPlagiarismAction"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "checkPlagiarismAction": (()=>checkPlagiarismAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var checkPlagiarismAction = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4019c74bde07996fc6ba4a7ad00e1bd2775bbad2c5", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "checkPlagiarismAction"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/page.tsx [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$framer$2d$motion$2f$dist$2f$es$2f$render$2f$components$2f$motion$2f$proxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$question$2d$generator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/question-generator.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$grade$2d$analyzer$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/grade-analyzer.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$teaching$2d$plan$2d$advisor$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/teaching-plan-advisor.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$performance$2d$dashboard$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/performance-dashboard.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$question$2d$paper$2d$generator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/question-paper-generator.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$attendance$2d$tracker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/attendance-tracker.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$mark$2d$calculator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/mark-calculator.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$knowledge$2d$galaxy$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/knowledge-galaxy.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$student$2d$profile$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/student-profile.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$academic$2d$calendar$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/academic-calendar.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$assignment$2d$grader$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/assignment-grader.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$project$2d$tracker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/project-tracker.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$document$2d$vault$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/document-vault.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$classroom$2d$gamifier$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/classroom-gamifier.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$plagiarism$2d$checker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/plagiarism-checker.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$main$2d$navigation$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/main-navigation.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$button$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/ui/button.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__ArrowLeft$3e$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-ssr] (ecmascript) <export default as ArrowLeft>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$lamp$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/ui/lamp.tsx [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const componentMap = {
    "student-profile": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$student$2d$profile$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StudentProfile"],
    "academic-calendar": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$academic$2d$calendar$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AcademicCalendar"],
    "gamifier": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$classroom$2d$gamifier$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ClassroomGamifier"],
    "document-vault": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$document$2d$vault$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DocumentVault"],
    "question-generator": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$question$2d$generator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["QuestionGenerator"],
    "question-paper-generator": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$question$2d$paper$2d$generator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["QuestionPaperGenerator"],
    "assignment-grader": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$assignment$2d$grader$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AssignmentGrader"],
    "project-tracker": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$project$2d$tracker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProjectTracker"],
    "grade-analyzer": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$grade$2d$analyzer$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GradeAnalyzer"],
    "teaching-plan-advisor": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$teaching$2d$plan$2d$advisor$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TeachingPlanAdvisor"],
    "report-dashboard": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$performance$2d$dashboard$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceDashboard"],
    "attendance-tracker": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$attendance$2d$tracker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AttendanceTracker"],
    "mark-calculator": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$mark$2d$calculator$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MarkCalculator"],
    "knowledge-galaxy": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$knowledge$2d$galaxy$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KnowledgeGalaxy"],
    "plagiarism-checker": __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$plagiarism$2d$checker$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PlagiarismChecker"]
};
function Home() {
    const [viewState, setViewState] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])('welcome');
    const [activeTab, setActiveTab] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const ActiveComponent = activeTab ? componentMap[activeTab] : null;
    const handleNodeClick = (tab)=>{
        setActiveTab(tab);
        setViewState('feature');
    };
    const renderContent = ()=>{
        switch(viewState){
            case 'welcome':
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$lamp$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LampContainer"], {
                    children: [
                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$framer$2d$motion$2f$dist$2f$es$2f$render$2f$components$2f$motion$2f$proxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["motion"].h1, {
                            initial: {
                                opacity: 0.5,
                                y: 100
                            },
                            whileInView: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                delay: 0.3,
                                duration: 0.8,
                                ease: "easeInOut"
                            },
                            className: "bg-gradient-to-br from-blue-300 to-violet-500 bg-clip-text py-4 text-center text-4xl font-medium tracking-tight text-transparent md:text-7xl",
                            children: "EduBuddy AI"
                        }, void 0, false, {
                            fileName: "[project]/src/app/page.tsx",
                            lineNumber: 62,
                            columnNumber: 13
                        }, this),
                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$framer$2d$motion$2f$dist$2f$es$2f$render$2f$components$2f$motion$2f$proxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["motion"].p, {
                            initial: {
                                opacity: 0,
                                y: 40
                            },
                            whileInView: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                delay: 0.5,
                                duration: 0.8,
                                ease: "easeInOut"
                            },
                            className: "mt-4 text-lg text-center text-slate-400 max-w-lg",
                            children: "Your AI-powered toolkit for teaching excellence."
                        }, void 0, false, {
                            fileName: "[project]/src/app/page.tsx",
                            lineNumber: 74,
                            columnNumber: 14
                        }, this),
                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$framer$2d$motion$2f$dist$2f$es$2f$render$2f$components$2f$motion$2f$proxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["motion"].div, {
                            initial: {
                                opacity: 0,
                                y: 60
                            },
                            whileInView: {
                                opacity: 1,
                                y: 0
                            },
                            transition: {
                                delay: 0.7,
                                duration: 0.8,
                                ease: "easeInOut"
                            },
                            animate: {
                                y: [
                                    0,
                                    -8,
                                    0
                                ]
                            },
                            className: "mt-8",
                            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$button$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
                                variant: "outline",
                                size: "lg",
                                onClick: ()=>setViewState('hub'),
                                className: "bg-transparent text-white border-white/50 hover:bg-white/10 hover:text-white",
                                children: "Get Started"
                            }, void 0, false, {
                                fileName: "[project]/src/app/page.tsx",
                                lineNumber: 99,
                                columnNumber: 17
                            }, this)
                        }, void 0, false, {
                            fileName: "[project]/src/app/page.tsx",
                            lineNumber: 86,
                            columnNumber: 13
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 61,
                    columnNumber: 11
                }, this);
            case 'hub':
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$main$2d$navigation$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MainNavigation"], {
                    setActiveTab: handleNodeClick
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 112,
                    columnNumber: 16
                }, this);
            case 'feature':
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
                    className: "flex-1 p-4 sm:p-6 md:p-8",
                    children: [
                        /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$button$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
                            variant: "outline",
                            size: "sm",
                            onClick: ()=>setViewState('hub'),
                            className: "absolute top-4 left-4 z-20",
                            children: [
                                /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__ArrowLeft$3e$__["ArrowLeft"], {
                                    className: "h-4 w-4 mr-2"
                                }, void 0, false, {
                                    fileName: "[project]/src/app/page.tsx",
                                    lineNumber: 118,
                                    columnNumber: 15
                                }, this),
                                "Back to Hub"
                            ]
                        }, void 0, true, {
                            fileName: "[project]/src/app/page.tsx",
                            lineNumber: 117,
                            columnNumber: 13
                        }, this),
                        ActiveComponent && /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(ActiveComponent, {}, void 0, false, {
                            fileName: "[project]/src/app/page.tsx",
                            lineNumber: 121,
                            columnNumber: 33
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 116,
                    columnNumber: 11
                }, this);
            default:
                return null;
        }
    };
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
        className: "flex min-h-screen w-full bg-slate-950 text-slate-50",
        children: renderContent()
    }, void 0, false, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 131,
        columnNumber: 5
    }, this);
}
}}),

};

//# sourceMappingURL=src_app_408e8e27._.js.map