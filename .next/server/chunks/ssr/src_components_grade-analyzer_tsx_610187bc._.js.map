{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/components/grade-analyzer.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, BarChartBig, Info, Trophy, TrendingDown, BookOpen, User, Lightbulb, CalendarDays, CheckCircle2, AlertTriangle, FileDown, BrainCircuit } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { generateFeedbackAction } from \"@/app/actions\";\nimport type { GenerateFeedbackOutput } from \"@/ai/schemas\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { GlowCard } from \"./ui/spotlight-card\";\n\n// Data types\ntype StudentData = {\n  name: string;\n  rollNo: string;\n  marks: { [subject: string]: number };\n};\n\ntype AnalysisResult = {\n  averageMarks: { [subject: string]: number };\n  topper: { name: string; rollNo: string; total: number; percentage: number };\n  lowestScorer: { name: string; rollNo: string; total: number; percentage: number };\n  subjectToppers: { [subject: string]: { name: string; rollNo: string; score: number } };\n  subjects: string[];\n  maxMarksPerSubject: number;\n};\n\n// Main Component\nexport function GradeAnalyzer() {\n  const [file, setFile] = useState<File | null>(null);\n  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);\n  const [students, setStudents] = useState<StudentData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const [selectedStudentRollNo, setSelectedStudentRollNo] = useState<string | null>(null);\n  const [feedback, setFeedback] = useState<GenerateFeedbackOutput | null>(null);\n  const [isFeedbackLoading, setIsFeedbackLoading] = useState(false);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setError(null);\n    setAnalysis(null);\n    setStudents([]);\n    setSelectedStudentRollNo(null);\n    setFeedback(null);\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      const validTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n      if (validTypes.includes(selectedFile.type) || selectedFile.name.endsWith('.csv') || selectedFile.name.endsWith('.xls') || selectedFile.name.endsWith('.xlsx')) {\n        setFile(selectedFile);\n      } else {\n        setError(\"Invalid file type. Please upload a .csv, .xls or .xlsx file.\");\n        setFile(null);\n        e.target.value = '';\n      }\n    }\n  };\n\n  const parseJsonData = (jsonData: any[]): { headers: string[]; data: StudentData[] } => {\n    if (jsonData.length === 0) {\n        throw new Error(\"No data found in the file.\");\n    }\n\n    const firstRow = jsonData[0];\n    const rawHeaders = Object.keys(firstRow);\n    \n    const normalizedHeaders = rawHeaders.map(h => h.trim().toLowerCase().replace(/\\s/g, ''));\n\n    const nameIndex = normalizedHeaders.indexOf('name');\n    const rollNoIndex = normalizedHeaders.indexOf('rollno');\n    \n    if (nameIndex === -1 || rollNoIndex === -1) {\n        throw new Error(\"Invalid header format. 'Name' and 'Roll No' columns are required.\");\n    }\n    \n    const subjectHeaders = rawHeaders.filter((h, i) => i !== nameIndex && i !== rollNoIndex);\n    if(subjectHeaders.length === 0) {\n      throw new Error(\"No subject columns found. Please ensure there is at least one subject column.\")\n    }\n\n    const data = jsonData.map((row, rowIndex) => {\n        const name = row[rawHeaders[nameIndex]];\n        const rollNo = row[rawHeaders[rollNoIndex]];\n        \n        if (!name || !rollNo) {\n            throw new Error(`Row ${rowIndex + 2}: 'Name' and 'Roll No' cannot be empty.`);\n        }\n\n        const student: StudentData = {\n            name: String(name),\n            rollNo: String(rollNo),\n            marks: {},\n        };\n\n        subjectHeaders.forEach(subject => {\n            const score = Number(row[subject]);\n            if (isNaN(score) || score < 0) {\n                throw new Error(`Invalid mark for ${student.name} in ${subject} on row ${rowIndex + 2}. Marks must be positive numbers.`);\n            }\n            student.marks[subject] = score;\n        });\n\n        return student;\n    });\n\n    return { headers: subjectHeaders, data };\n  }\n\n  const analyzeData = (parsedData: { headers: string[]; data: StudentData[] }): AnalysisResult => {\n    const { headers: subjects, data: students } = parsedData;\n    const maxMarksPerSubject = 100; // Assuming max marks is 100 for percentage calculation\n    const totalMaxMarks = subjects.length * maxMarksPerSubject;\n\n    const studentsWithTotal = students.map(s => {\n      const total = Object.values(s.marks).reduce((sum, mark) => sum + mark, 0);\n      return {\n        ...s,\n        total,\n        percentage: totalMaxMarks > 0 ? (total / totalMaxMarks) * 100 : 0,\n      };\n    });\n  \n    if (studentsWithTotal.length === 0) {\n        throw new Error(\"No student data found to analyze.\");\n    }\n\n    const sortedByTotal = [...studentsWithTotal].sort((a, b) => b.total - a.total);\n    const topper = sortedByTotal[0];\n    const lowestScorer = sortedByTotal[sortedByTotal.length - 1];\n    \n    const averageMarks: { [subject: string]: number } = {};\n    subjects.forEach(subject => {\n      const total = students.reduce((sum, s) => sum + (s.marks[subject] || 0), 0);\n      averageMarks[subject] = parseFloat((total / students.length).toFixed(2));\n    });\n  \n    const subjectToppers: { [subject: string]: { name: string; rollNo: string; score: number } } = {};\n    subjects.forEach(subject => {\n      let topStudent = students[0];\n      let topScore = students[0].marks[subject] || -1;\n      for (let i = 0; i < students.length; i++) {\n        const currentScore = students[i].marks[subject] || -1;\n        if (currentScore > topScore) {\n          topScore = currentScore;\n          topStudent = students[i];\n        }\n      }\n      subjectToppers[subject] = { name: topStudent.name, rollNo: topStudent.rollNo, score: topScore };\n    });\n  \n    return {\n      averageMarks,\n      topper: { name: topper.name, rollNo: topper.rollNo, total: topper.total, percentage: parseFloat(topper.percentage.toFixed(2)) },\n      lowestScorer: { name: lowestScorer.name, rollNo: lowestScorer.rollNo, total: lowestScorer.total, percentage: parseFloat(lowestScorer.percentage.toFixed(2)) },\n      subjectToppers,\n      subjects,\n      maxMarksPerSubject\n    };\n  }\n\n  const handleAnalyze = () => {\n    if (!file) {\n      setError(\"Please upload a file first.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setAnalysis(null);\n    setStudents([]);\n    setSelectedStudentRollNo(null);\n    setFeedback(null);\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const fileData = event.target?.result;\n      try {\n        const workbook = XLSX.read(fileData, { type: 'binary' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const json: any[] = XLSX.utils.sheet_to_json(worksheet);\n        \n        const parsedData = parseJsonData(json);\n        setStudents(parsedData.data);\n        const analysisResult = analyzeData(parsedData);\n        setAnalysis(analysisResult);\n        toast({\n            title: \"Analysis Complete\",\n            description: \"Student performance data has been successfully analyzed.\",\n        });\n      } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : \"Failed to parse or analyze the file.\";\n        setError(errorMessage);\n        setAnalysis(null);\n        toast({\n            variant: \"destructive\",\n            title: \"Analysis Failed\",\n            description: errorMessage,\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    reader.onerror = () => {\n      const errorMessage = \"Failed to read the file.\";\n      setError(errorMessage);\n      setIsLoading(false);\n      toast({\n          variant: \"destructive\",\n          title: \"File Error\",\n          description: errorMessage,\n      });\n    }\n    reader.readAsBinaryString(file);\n  };\n\n  const handleStudentSelect = async (rollNo: string) => {\n    setSelectedStudentRollNo(rollNo);\n    setFeedback(null);\n    if (!rollNo) return;\n\n    const student = students.find(s => s.rollNo === rollNo);\n    if (!student || !analysis) return;\n\n    setIsFeedbackLoading(true);\n    try {\n        const result = await generateFeedbackAction({\n            studentName: student.name,\n            marks: student.marks,\n            subjects: analysis.subjects,\n        });\n\n        if (result.error) {\n            throw new Error(result.error);\n        }\n        setFeedback(result.feedback || null);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        toast({\n            variant: \"destructive\",\n            title: \"Feedback Generation Failed\",\n            description: errorMessage,\n        });\n        setFeedback(null);\n    } finally {\n        setIsFeedbackLoading(false);\n    }\n  };\n  \n  const selectedStudent = students.find(s => s.rollNo === selectedStudentRollNo);\n\n  return (\n    <div\n          className=\"relative rounded-xl border border-transparent bg-transparent p-[1.5px] shadow-lg animate-glowing-border\"\n          style={\n            {\n              \"--border-angle\": \"0deg\",\n              backgroundImage:\n                \"linear-gradient(var(--border-angle), hsl(var(--primary) / 0.5), hsl(var(--primary) / 0.1) 50%, hsl(var(--primary) / 0.5))\",\n            } as React.CSSProperties\n          }\n        >\n      <Card className=\"w-full shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-headline flex items-center gap-2\">\n            <BarChartBig className=\"h-6 w-6\" /> Upload Marks & Analyze Grades\n          </CardTitle>\n          <CardDescription>\n            Upload a CSV or Excel file of student marks to get performance insights.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"file-upload\" className=\"font-medium text-sm\">Upload CSV or Excel File</label>\n            <Input \n                id=\"file-upload\" \n                type=\"file\" \n                accept=\".csv, .xls, .xlsx, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                onChange={handleFileChange} \n                className=\"file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20\"\n            />\n            <p className=\"text-xs text-muted-foreground flex items-center gap-1.5 pt-1\">\n                <Info className=\"h-3 w-3\" />\n                Format: Name, Roll No, Subject 1, Subject 2... (Header row is required)\n            </p>\n          </div>\n          {error && <Alert variant=\"destructive\">\n                <AlertTitle>Error</AlertTitle>\n                <AlertDescription>{error}</AlertDescription>\n            </Alert>}\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleAnalyze} className=\"w-full\" disabled={!file || isLoading}>\n            {isLoading ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Analyzing...</>\n            ) : (\n              <><BarChartBig className=\"mr-2 h-4 w-4\" />Analyze Student Performance</>\n            )}\n          </Button>\n        </CardFooter>\n      </Card>\n      \n      {isLoading && (\n          <Card className=\"w-full shadow-lg\">\n            <CardHeader><CardTitle>Analyzing Data...</CardTitle></CardHeader>\n            <CardContent className=\"flex justify-center items-center p-12\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </CardContent>\n          </Card>\n      )}\n\n      {analysis && (\n        <Card className=\"w-full shadow-lg\">\n            <CardHeader>\n                <CardTitle className=\"text-2xl font-headline\">Performance Analysis</CardTitle>\n                <CardDescription>\n                    Summary of student performance based on the uploaded data.\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                    <GlowCard customSize className=\"p-0\" glowColor=\"green\">\n                        <Card className=\"w-full h-full bg-transparent\">\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Class Topper</CardTitle>\n                                <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{analysis.topper.name}</div>\n                                <p className=\"text-xs text-muted-foreground\">Roll No: {analysis.topper.rollNo}</p>\n                                <p className=\"text-sm font-semibold mt-2\">{analysis.topper.total} / {analysis.subjects.length * analysis.maxMarksPerSubject} ({analysis.topper.percentage}%)</p>\n                            </CardContent>\n                        </Card>\n                    </GlowCard>\n                     <GlowCard customSize className=\"p-0\" glowColor=\"red\">\n                        <Card className=\"w-full h-full bg-transparent\">\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Lowest Scorer</CardTitle>\n                                <TrendingDown className=\"h-5 w-5 text-red-500\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{analysis.lowestScorer.name}</div>\n                                <p className=\"text-xs text-muted-foreground\">Roll No: {analysis.lowestScorer.rollNo}</p>\n                                <p className=\"text-sm font-semibold mt-2\">{analysis.lowestScorer.total} / {analysis.subjects.length * analysis.maxMarksPerSubject} ({analysis.lowestScorer.percentage}%)</p>\n                            </CardContent>\n                        </Card>\n                    </GlowCard>\n                </div>\n                <Separator />\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                        <h3 className=\"text-lg font-semibold flex items-center gap-2 mb-4\"><BookOpen className=\"h-5 w-5\" /> Subject Averages</h3>\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Subject</TableHead>\n                                    <TableHead className=\"text-right\">Average Marks</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {analysis.subjects.map(subject => (\n                                    <TableRow key={subject}>\n                                        <TableCell className=\"font-medium\">{subject}</TableCell>\n                                        <TableCell className=\"text-right\">{analysis.averageMarks[subject]}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                    <div>\n                        <h3 className=\"text-lg font-semibold flex items-center gap-2 mb-4\"><User className=\"h-5 w-5\" /> Subject Toppers</h3>\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Subject</TableHead>\n                                    <TableHead>Topper</TableHead>\n                                    <TableHead className=\"text-right\">Score</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {analysis.subjects.map(subject => (\n                                    <TableRow key={subject}>\n                                        <TableCell className=\"font-medium\">{subject}</TableCell>\n                                        <TableCell>{analysis.subjectToppers[subject].name}</TableCell>\n                                        <TableCell className=\"text-right\">{analysis.subjectToppers[subject].score}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n      )}\n\n      {analysis && students.length > 0 && (\n        <Card className=\"w-full shadow-lg\">\n            <CardHeader>\n                <CardTitle className=\"text-2xl font-headline flex items-center gap-2\">\n                    <BrainCircuit className=\"h-6 w-6\" /> AI-Powered Feedback Generator\n                </CardTitle>\n                <CardDescription>\n                    Select a student to generate personalized feedback and a study plan.\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n                <Select onValueChange={handleStudentSelect} value={selectedStudentRollNo ?? ''}>\n                    <SelectTrigger className=\"w-full md:w-1/2\">\n                        <SelectValue placeholder=\"Choose a student...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {students.map(student => (\n                            <SelectItem key={student.rollNo} value={student.rollNo}>\n                                {student.name} ({student.rollNo})\n                            </SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n\n                {isFeedbackLoading && <FeedbackSkeleton />}\n\n                {feedback && selectedStudent && <FeedbackDisplay feedback={feedback} studentName={selectedStudent.name} />}\n            </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction FeedbackSkeleton() {\n    return (\n        <div className=\"space-y-6 pt-4\">\n            <div className=\"space-y-3\">\n                <Skeleton className=\"h-6 w-1/3\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-4/5\" />\n            </div>\n            <div className=\"space-y-3\">\n                <Skeleton className=\"h-6 w-1/3\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-4/5\" />\n            </div>\n             <div className=\"space-y-3\">\n                <Skeleton className=\"h-6 w-1/3\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-4/5\" />\n            </div>\n        </div>\n    );\n}\n\nfunction FeedbackDisplay({ feedback, studentName }: { feedback: GenerateFeedbackOutput, studentName: string }) {\n    const plan = Object.entries(feedback.studyPlan);\n    \n    const handleExportPdf = () => {\n        const doc = new jsPDF();\n        const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();\n        const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.getWidth();\n\n        // Header\n        doc.setFont('helvetica', 'bold');\n        doc.setFontSize(20);\n        doc.text('EduBuddy AI', 15, 20);\n        doc.setFont('helvetica', 'normal');\n        doc.setFontSize(10);\n        doc.text(`Personalized Feedback Report for: ${studentName}`, 15, 28);\n        \n        doc.setLineWidth(0.5);\n        doc.line(15, 32, pageWidth - 15, 32);\n\n        let yPos = 45;\n\n        // Strengths\n        doc.setFont('helvetica', 'bold');\n        doc.setFontSize(14);\n        doc.text('Strengths', 15, yPos);\n        yPos += 8;\n        doc.setFont('helvetica', 'normal');\n        doc.setFontSize(11);\n        const strengths = feedback.strengths.length > 0\n            ? feedback.strengths\n            : [\"No specific strengths identified (scores > 85).\"];\n        strengths.forEach(item => {\n            doc.text(`• ${item}`, 20, yPos, { maxWidth: pageWidth - 35 });\n            yPos += 7;\n        });\n        yPos += 5;\n\n        // Weaknesses\n        doc.setFont('helvetica', 'bold');\n        doc.setFontSize(14);\n        doc.text('Areas for Improvement', 15, yPos);\n        yPos += 8;\n        doc.setFont('helvetica', 'normal');\n        doc.setFontSize(11);\n        const weaknesses = feedback.weaknesses.length > 0\n            ? feedback.weaknesses\n            : [\"No specific weaknesses identified (scores < 75).\"];\n        weaknesses.forEach(item => {\n            doc.text(`• ${item}`, 20, yPos, { maxWidth: pageWidth - 35 });\n            yPos += 7;\n        });\n        yPos += 5;\n\n        // Improvement Tips\n        doc.setFont('helvetica', 'bold');\n        doc.setFontSize(14);\n        doc.text('Actionable Improvement Tips', 15, yPos);\n        yPos += 8;\n        doc.setFont('helvetica', 'normal');\n        doc.setFontSize(11);\n        const splitTips = doc.splitTextToSize(feedback.improvementTips, pageWidth - 30);\n        doc.text(splitTips, 15, yPos);\n        yPos += (splitTips.length * 5) + 10;\n\n        // Study Plan\n        const planData = Object.entries(feedback.studyPlan).map(([day, details], index) => [\n            `Day ${index + 1}`,\n            details.topic,\n            details.task\n        ]);\n\n        autoTable(doc, {\n            startY: yPos,\n            head: [['Day', 'Focus Topic', 'Suggested Task']],\n            body: planData,\n            theme: 'grid',\n            headStyles: { fillColor: [41, 128, 185] }, // A blue color\n            didDrawPage: (data) => {\n                // Footer\n                const footerStr = \"Generated by EduBuddy AI – Powered by OpenAI\";\n                doc.setFontSize(8);\n                doc.setTextColor(150);\n                doc.text(footerStr, data.settings.margin.left, pageHeight - 10);\n            }\n        });\n\n        doc.save(`feedback_${studentName.replace(/\\s+/g, '_')}.pdf`);\n    };\n\n    const strengthsContent = feedback.strengths.length > 0\n        ? <ul className=\"list-disc list-inside space-y-1\">{feedback.strengths.map(s => <li key={s}>{s}</li>)}</ul>\n        : <p className=\"text-muted-foreground text-sm\">No specific strengths identified (scores &gt; 85).</p>;\n\n    const weaknessesContent = feedback.weaknesses.length > 0\n        ? <ul className=\"list-disc list-inside space-y-1\">{feedback.weaknesses.map(w => <li key={w}>{w}</li>)}</ul>\n        : <p className=\"text-muted-foreground text-sm\">No specific weaknesses identified (scores &lt; 75).</p>;\n\n    return (\n        <div className=\"space-y-8 pt-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n                <GlowCard customSize className=\"p-0\" glowColor=\"green\">\n                    <Card className=\"w-full h-full bg-transparent\">\n                        <CardHeader>\n                            <CardTitle className=\"text-lg flex items-center gap-2\">\n                                <CheckCircle2 className=\"h-5 w-5 text-green-600\" /> Strengths\n                            </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            {strengthsContent}\n                        </CardContent>\n                    </Card>\n                </GlowCard>\n                <GlowCard customSize className=\"p-0\" glowColor=\"red\">\n                    <Card className=\"w-full h-full bg-transparent\">\n                        <CardHeader>\n                            <CardTitle className=\"text-lg flex items-center gap-2\">\n                                <AlertTriangle className=\"h-5 w-5 text-red-600\" /> Areas for Improvement\n                            </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            {weaknessesContent}\n                        </CardContent>\n                    </Card>\n                </GlowCard>\n            </div>\n            \n            <div>\n                <h3 className=\"text-xl font-semibold flex items-center gap-2 mb-3\">\n                    <Lightbulb className=\"h-5 w-5\" /> Actionable Improvement Tips\n                </h3>\n                <p className=\"text-muted-foreground bg-accent/40 p-4 rounded-lg\">{feedback.improvementTips}</p>\n            </div>\n            \n            <div className=\"space-y-3\">\n                 <h3 className=\"text-xl font-semibold flex items-center gap-2 mb-3\">\n                    <CalendarDays className=\"h-5 w-5\" /> Your 7-Day Personalized Plan\n                </h3>\n                <div className=\"border rounded-lg\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"w-[100px]\">Day</TableHead>\n                                <TableHead>Focus Topic</TableHead>\n                                <TableHead>Suggested Task</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {plan.map(([day, details], index) => (\n                                <TableRow key={day}>\n                                    <TableCell className=\"font-medium\">Day {index + 1}</TableCell>\n                                    <TableCell>{details.topic}</TableCell>\n                                    <TableCell>{details.task}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </div>\n            \n            <CardFooter className=\"px-0 pt-6 justify-end\">\n                <Button variant=\"outline\" onClick={handleExportPdf}>\n                    <FileDown className=\"mr-2 h-4 w-4\" /> Export Feedback as PDF\n                </Button>\n            </CardFooter>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}