{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/schemas.ts"],"sourcesContent":["\n\n/**\n * @fileOverview Shared Zod schemas and TypeScript types for AI flows.\n */\nimport {z} from 'zod';\n\n// === Question Generator Schemas ===\n\nexport const GenerateQuestionsInputSchema = z.object({\n  subject: z.string().describe('The course or subject of the questions.'),\n  topic: z.string().describe('The topic or module title for the questions.'),\n  numberOfQuestions: z.number().int().positive().describe('The number of questions to generate.'),\n  difficulty: z.enum(['Easy', 'Moderate', 'Advanced']).describe('The academic complexity level of the questions.'),\n});\n\nexport type GenerateQuestionsInput = z.infer<typeof GenerateQuestionsInputSchema>;\n\nexport const MCQQuestionSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.object({\n    A: z.string(),\n    B: z.string(),\n    C: z.string(),\n    D: z.string(),\n  }).describe('The four multiple-choice options.'),\n  answer: z.enum(['A', 'B', 'C', 'D']).describe('The key of the correct option.'),\n});\n\nexport type MCQQuestion = z.infer<typeof MCQQuestionSchema>;\n\nexport const GenerateQuestionsOutputSchema = z.object({\n  questions: z.array(MCQQuestionSchema).describe('An array of generated multiple-choice questions.'),\n});\n\nexport type GenerateQuestionsOutput = z.infer<typeof GenerateQuestionsOutputSchema>;\n\n\n// === Question Generator From File Schemas ===\n\nexport const GenerateQuestionsFromFileInputSchema = z.object({\n  fileDataUri: z\n    .string()\n    .describe(\n      \"The notes or syllabus file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  topic: z.string().optional().describe(\"The topic of the quiz, often derived from the filename.\"),\n  numberOfQuestions: z.number().int().positive().describe('The number of questions to generate.'),\n  difficulty: z.enum(['Easy', 'Moderate', 'Advanced']).describe('The academic complexity level of the questions.'),\n});\n\nexport type GenerateQuestionsFromFileInput = z.infer<typeof GenerateQuestionsFromFileInputSchema>;\n\n\n// === Feedback Generator Schemas ===\n\nexport const GenerateFeedbackInputSchema = z.object({\n  studentName: z.string().describe('The name of the student.'),\n  subjects: z.array(z.string()).describe('A list of all subjects.'),\n  marks: z.record(z.string(), z.number()).describe('An object containing subjects as keys and marks as values.'),\n});\n\nexport type GenerateFeedbackInput = z.infer<typeof GenerateFeedbackInputSchema>;\n\nconst DailyPlanSchema = z.object({\n  topic: z.string().describe(\"The specific topic or subject to focus on for the day.\"),\n  task: z.string().describe(\"A concrete task or activity for the student to complete.\"),\n});\n\nexport const GenerateFeedbackOutputSchema = z.object({\n  strengths: z.array(z.string()).describe('A list of subjects where the student scored above 85. These are the student\\'s strong areas.'),\n  weaknesses: z.array(z.string()).describe('A list of subjects where the student scored below 75. These are the areas needing improvement.'),\n  improvementTips: z.string().describe('Actionable, concise tips for the student to improve in their weak areas.'),\n  studyPlan: z.object({\n    day1: DailyPlanSchema,\n    day2: DailyPlanSchema,\n    day3: DailyPlanSchema,\n    day4: DailyPlanSchema,\n    day5: DailyPlanSchema,\n    day6: DailyPlanSchema,\n    day7: DailyPlanSchema,\n  }).describe('A personalized 7-day study plan to help the student improve.'),\n});\n\nexport type GenerateFeedbackOutput = z.infer<typeof GenerateFeedbackOutputSchema>;\n\n\n// === Teaching Plan Advisor Schemas ===\n\nexport const GenerateAdviceInputSchema = z.object({\n  subject: z.string().optional().describe('The subject or course for which advice is being generated.'),\n  text: z.string().optional().describe('The syllabus or lecture notes provided by the user as pasted text.'),\n  fileDataUri: z.string().optional().describe(\"The syllabus or lecture notes file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n}).refine(data => data.text || data.fileDataUri, {\n  message: \"Either text or a file must be provided.\",\n});\n\nexport type GenerateAdviceInput = z.infer<typeof GenerateAdviceInputSchema>;\n\n\nexport const GenerateAdviceOutputSchema = z.object({\n  coveredTopics: z.array(z.string()).describe('A list of topics that have been covered in the provided text.'),\n  nextTopic: z.string().describe('The single, most logical topic to teach next based on the covered topics.'),\n  suggestedRevisions: z.array(z.string()).describe('A list of topics that should be revised before a test.'),\n  skippedConcepts: z.array(z.string()).describe('A list of important concepts that may have been missed or are unclear.'),\n});\n\nexport type GenerateAdviceOutput = z.infer<typeof GenerateAdviceOutputSchema>;\n\n// === Question Paper Generator Schemas ===\n\nexport const GenerateQuestionPaperInputSchema = z.object({\n  subject: z.string().describe('The course or subject of the question paper.'),\n  unit: z.string().optional().describe('The unit or topic for the question paper.'),\n  fileDataUri: z.string().optional().describe(\"The syllabus or notes file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n}).refine(data => data.unit || data.fileDataUri, {\n    message: \"Either a topic or a file must be provided.\",\n});\n\nexport type GenerateQuestionPaperInput = z.infer<typeof GenerateQuestionPaperInputSchema>;\n\nexport const QuestionPaperMCQSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.object({\n    a: z.string(),\n    b: z.string(),\n    c: z.string(),\n    d: z.string(),\n  }).describe('The four multiple-choice options with keys a, b, c, d.'),\n  answer: z.string().describe('The correct answer description.'),\n});\n\nexport type QuestionPaperMCQ = z.infer<typeof QuestionPaperMCQSchema>;\n\nexport const GenerateQuestionPaperOutputSchema = z.object({\n  oneMarkQuestions: z.array(QuestionPaperMCQSchema).describe('An array of 10 one-mark MCQs.'),\n  twoMarkQuestions: z.array(z.string()).describe('An array of 10 two-mark short answer questions.'),\n  tenMarkQuestions: z.array(z.string()).describe('An array of 4 ten-mark descriptive questions.'),\n});\n\nexport type GenerateQuestionPaperOutput = z.infer<typeof GenerateQuestionPaperOutputSchema>;\n\n\n// === Attendance Report Generator Schemas ===\n\nexport const GenerateAttendanceReportInputSchema = z.object({\n  studentName: z.string().describe(\"The name of the student.\"),\n  totalDays: z.number().int().positive().describe(\"The total number of days attendance was tracked.\"),\n  presentDays: z.number().int().describe(\"The number of days the student was present.\"),\n  behaviorTags: z.array(z.string()).describe(\"A list of behavioral tags observed.\"),\n});\n\nexport type GenerateAttendanceReportInput = z.infer<typeof GenerateAttendanceReportInputSchema>;\n\nexport const GenerateAttendanceReportOutputSchema = z.object({\n  report: z.string().describe(\"A concise, one-sentence summary of the student's attendance and behavior.\"),\n});\n\nexport type GenerateAttendanceReportOutput = z.infer<typeof GenerateAttendanceReportOutputSchema>;\n\n// === Manual Attendance Entry Schemas ===\nexport const SaveAttendanceInputSchema = z.object({\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format.\"),\n  subject: z.string().min(1, \"Subject is required.\"),\n  period: z.string().min(1, \"Period is required.\"),\n  status: z.enum([\"Present\", \"Absent\", \"Late\"]),\n  remark: z.string().optional(),\n  behavior_tags: z.string().optional(), // Comma-separated\n});\nexport type SaveAttendanceInput = z.infer<typeof SaveAttendanceInputSchema>;\n\n\n// === Mark Calculator Schemas ===\n\nexport const SaveInternalMarksInputSchema = z.object({\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  subject: z.string().min(1, \"Subject is required.\"),\n  test1: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  test2: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  assignment: z.coerce.number().min(0, \"Min 0 marks.\").max(10, \"Max 10 marks.\"),\n  attendance: z.coerce.number().min(0).max(100, \"Must be between 0 and 100.\"),\n});\nexport type SaveInternalMarksInput = z.infer<typeof SaveInternalMarksInputSchema>;\n\n\nexport const GenerateMarkFeedbackInputSchema = z.object({\n    studentName: z.string(),\n    internalScore: z.number(),\n    grade: z.string(),\n    attendance: z.number(),\n});\nexport type GenerateMarkFeedbackInput = z.infer<typeof GenerateMarkFeedbackInputSchema>;\n\nexport const GenerateMarkFeedbackOutputSchema = z.object({\n    feedback: z.string().describe(\"A concise, one-line summary of the student's performance.\"),\n});\nexport type GenerateMarkFeedbackOutput = z.infer<typeof GenerateMarkFeedbackOutputSchema>;\n\n\n// === Syllabus Tracker Schemas ===\nexport const SaveSyllabusTrackerInputSchema = z.object({\n  subject: z.string().min(3, \"Subject is required.\"),\n  topic: z.string().min(3, \"Topic is required.\"),\n});\n\nexport type SaveSyllabusTrackerInput = z.infer<typeof SaveSyllabusTrackerInputSchema>;\n\n// === Student Profile Schemas ===\nexport const StudentInfoSchema = z.object({\n  student_name: z.string(),\n  roll_no: z.string(),\n});\nexport type StudentInfo = z.infer<typeof StudentInfoSchema>;\n\nexport const TeacherRemarkRecordSchema = z.object({\n  id: z.string(),\n  created_at: z.string(),\n  student_name: z.string().nullable(),\n  roll_no: z.string().nullable(),\n  subject: z.string().nullable(),\n  remark: z.string().nullable(),\n});\n\nexport const StudentProfileDataSchema = z.object({\n  studentName: z.string(),\n  rollNo: z.string(),\n  attendance: z.object({\n    percentage: z.number(),\n    presentDays: z.number(),\n    totalDays: z.number(),\n  }),\n  behaviorTags: z.array(z.string()),\n  marks: z.array(z.object({\n      subject: z.string(),\n      internal_score: z.number(),\n      grade: z.string(),\n  })),\n  remarks: z.array(TeacherRemarkRecordSchema),\n  aiFeedback: z.string().nullable(),\n});\nexport type StudentProfileData = z.infer<typeof StudentProfileDataSchema>;\n\n\n// === Academic Calendar Schemas ===\nexport const SaveAcademicEventInputSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters long.\"),\n  description: z.string().optional(),\n  event_date: z.date({ required_error: \"Please select a date.\" }),\n  event_type: z.enum([\"exam\", \"holiday\", \"meeting\"]),\n});\n\nexport type SaveAcademicEventInput = z.infer<typeof SaveAcademicEventInputSchema>;\n\n// === Assignment Grader Schemas ===\nexport const GradeAssignmentInputSchema = z.object({\n  studentName: z.string().describe(\"The name of the student who submitted the assignment.\"),\n  subject: z.string().describe(\"The subject of the assignment.\"),\n  fileDataUri: z\n    .string()\n    .describe(\n      \"The assignment document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type GradeAssignmentInput = z.infer<typeof GradeAssignmentInputSchema>;\n\nexport const GradeAssignmentOutputSchema = z.object({\n  score: z.number().min(0).max(10).describe(\"The numerical score for the assignment, out of 10.\"),\n  feedback: z.string().describe(\"Concise, constructive feedback for the student, explaining the score.\"),\n});\nexport type GradeAssignmentOutput = z.infer<typeof GradeAssignmentOutputSchema>;\n\n// === Project Tracker Schemas ===\nexport const ProjectTrackerInputSchema = z.object({\n  id: z.string().optional(),\n  student_name: z.string().min(1, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  project_title: z.string().min(5, \"Project title is required.\"),\n  mentor_name: z.string().min(1, \"Mentor name is required.\"),\n  topic_selected: z.boolean().default(false),\n  review1_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  review1_feedback: z.string().optional().nullable(),\n  review2_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  review2_feedback: z.string().optional().nullable(),\n  final_submission: z.boolean().default(false),\n  final_score: z.coerce.number().min(0).max(100).optional().nullable(),\n  final_feedback: z.string().optional().nullable(),\n});\nexport type ProjectTrackerInput = z.infer<typeof ProjectTrackerInputSchema>;\n\n\n// === Student Document Vault Schemas ===\nexport const UploadStudentDocumentInputSchema = z.object({\n  student_name: z.string().min(2, \"Student name is required.\"),\n  roll_no: z.string().min(1, \"Roll number is required.\"),\n  doc_type: z.enum([\"Bonafide\", \"Report\", \"Certificate\", \"Other\"], {\n    required_error: \"Please select a document type.\"\n  }),\n});\nexport type UploadStudentDocumentInput = z.infer<typeof UploadStudentDocumentInputSchema>;\n\n\n// === Classroom Gamifier Schemas ===\nexport const GenerateClassroomGameInputSchema = z.object({\n  topic: z.string().describe(\"The topic to generate a game for.\"),\n});\nexport type GenerateClassroomGameInput = z.infer<typeof GenerateClassroomGameInputSchema>;\n\nexport const GameQuizQuestionSchema = z.object({\n  question: z.string().describe(\"The quiz question text.\"),\n  options: z.object({\n    A: z.string(),\n    B: z.string(),\n    C: z.string(),\n    D: z.string(),\n  }).describe(\"The four multiple-choice options.\"),\n  answer: z.enum(['A', 'B', 'C', 'D']).describe(\"The key of the correct option.\"),\n});\nexport type GameQuizQuestion = z.infer<typeof GameQuizQuestionSchema>;\n\nexport const GamePuzzleSchema = z.object({\n  scrambled: z.string().describe(\"The scrambled word puzzle.\"),\n  answer: z.string().describe(\"The unscrambled correct word.\"),\n});\nexport type GamePuzzle = z.infer<typeof GamePuzzleSchema>;\n\nexport const GenerateClassroomGameOutputSchema = z.object({\n  quiz: z.array(GameQuizQuestionSchema).describe(\"An array of 5 quiz questions.\"),\n  puzzle: GamePuzzleSchema.describe(\"A word scramble puzzle.\"),\n});\nexport type GenerateClassroomGameOutput = z.infer<typeof GenerateClassroomGameOutputSchema>;\n\nexport const SaveGameScoreInputSchema = z.object({\n    player_name: z.string().min(2, \"Player name must be at least 2 characters.\"),\n    topic: z.string(),\n    score: z.number().int().min(0),\n});\nexport type SaveGameScoreInput = z.infer<typeof SaveGameScoreInputSchema>;\n\nexport const CustomQuizQuestionSchema = z.object({\n    question: z.string().min(1, \"Question text cannot be empty.\"),\n    options: z.object({\n        A: z.string().min(1, \"Option A cannot be empty.\"),\n        B: z.string().min(1, \"Option B cannot be empty.\"),\n        C: z.string().min(1, \"Option C cannot be empty.\"),\n        D: z.string().min(1, \"Option D cannot be empty.\"),\n    }),\n    answer: z.enum([\"A\", \"B\", \"C\", \"D\"]),\n});\nexport type CustomQuizQuestion = z.infer<typeof CustomQuizQuestionSchema>;\n\nexport const CreateCustomQuizInputSchema = z.object({\n    topic: z.string().min(3, \"Topic must be at least 3 characters long.\"),\n    questions: z.array(CustomQuizQuestionSchema).min(1, \"You must add at least one question.\"),\n});\nexport type CreateCustomQuizInput = z.infer<typeof CreateCustomQuizInputSchema>;\n\n\n// === Knowledge Galaxy Schemas ===\nexport const GenerateKnowledgeGalaxyInputSchema = z.object({\n  subject: z.string().optional().describe(\"The subject to generate the knowledge galaxy for.\"),\n  fileDataUri: z.string().optional().describe(\"The syllabus file to generate the knowledge galaxy from, as a data URI.\"),\n}).refine(data => data.subject || data.fileDataUri, {\n    message: \"Either a subject or a file must be provided.\",\n});\nexport type GenerateKnowledgeGalaxyInput = z.infer<typeof GenerateKnowledgeGalaxyInputSchema>;\n\nconst MoonSchema = z.object({\n  name: z.string().describe(\"Name of the sub-topic (moon).\"),\n  description: z.string().describe(\"A brief, one-sentence description of the sub-topic.\"),\n});\nexport type Moon = z.infer<typeof MoonSchema>;\n\nconst PlanetSchema = z.object({\n  name: z.string().describe(\"Name of the core concept (planet).\"),\n  description: z.string().describe(\"A brief, one-sentence description of the core concept.\"),\n  moons: z.array(MoonSchema).describe(\"An array of related sub-topics (moons).\"),\n});\nexport type Planet = z.infer<typeof PlanetSchema>;\n\nexport const GenerateKnowledgeGalaxyOutputSchema = z.object({\n  subject: z.string().describe(\"The subject of the generated galaxy.\"),\n  planets: z.array(PlanetSchema).describe(\"An array of core concepts (planets) for the subject.\"),\n});\nexport type GenerateKnowledgeGalaxyOutput = z.infer<typeof GenerateKnowledgeGalaxyOutputSchema>;\n\n\n// === Plagiarism Checker Schemas ===\nexport const PlagiarismCheckInputSchema = z.object({\n    doc1Name: z.string().describe(\"The filename of the first document.\"),\n    doc1Content: z.string().describe(\"The content of the first document, either as a data URI or as extracted text.\"),\n    doc1MimeType: z.string().describe(\"The MIME type of the first document.\"),\n    doc2Name: z.string().describe(\"The filename of the second document.\"),\n    doc2Content: z.string().describe(\"The content of the second document, either as a data URI or as extracted text.\"),\n    doc2MimeType: z.string().describe(\"The MIME type of the second document.\"),\n});\nexport type PlagiarismCheckInput = z.infer<typeof PlagiarismCheckInputSchema>;\n\nexport const PlagiarismCheckOutputSchema = z.object({\n    similarityPercentage: z.number().min(0).max(100).describe(\"The percentage of similarity between the two documents.\"),\n    analysis: z.string().describe(\"A detailed breakdown of the similarities found between the two documents.\"),\n    verdict: z.enum([\"No Plagiarism Detected\", \"Low Similarity\", \"Moderate Similarity\", \"High Similarity\", \"Likely Plagiarized\"]).describe(\"The final conclusion on the similarity level.\"),\n});\nexport type PlagiarismCheckOutput = z.infer<typeof PlagiarismCheckOutputSchema>;\n\n\n// === Supabase Table Record Types ===\n\nexport type PerformanceReport = {\n  id: string;\n  created_at: string;\n  student_name: string;\n  subject: string | null;\n  score: number | null;\n  total: number | null;\n  feedback: string | Record<string, any>;\n  improvement_plan: string | Record<string, any>;\n};\n\nexport type AttendanceRecord = {\n    id: string;\n    date: string;\n    subject: string;\n    student_name: string;\n    roll_no: string;\n    status: 'Present' | 'Absent' | 'Late';\n    remark: string | null;\n    behavior_tags: string | null;\n    created_at: string;\n};\n\nexport type InternalMarksRecord = {\n    id: string;\n    student_name: string;\n    roll_no: string;\n    subject: string;\n    test1: number;\n    test2: number;\n    assignment: number;\n    attendance: number;\n    internal_score: number;\n    grade: string;\n    feedback: string;\n    created_at: string;\n};\n\nexport type SyllabusTrackerRecord = {\n  id: string;\n  subject: string;\n  topic: string;\n  completed: boolean;\n  uploaded_by: string | null;\n  created_at: string;\n};\n\nexport type TeacherRemarkRecord = {\n  id: string;\n  created_at: string;\n  student_name: string | null;\n  roll_no: string | null;\n  subject: string | null;\n  remark: string | null;\n};\n\nexport type AcademicEventRecord = {\n  id: string;\n  created_at: string;\n  title: string | null;\n  description: string | null;\n  event_date: string; // YYYY-MM-DD\n  event_type: 'exam' | 'holiday' | 'meeting' | null;\n  posted_by: string | null;\n};\n\nexport type AssignmentScoreRecord = {\n  id: string;\n  created_at: string;\n  student_name: string;\n  subject: string;\n  score: number;\n  feedback: string;\n};\n\nexport type ProjectTrackerRecord = {\n  id: string;\n  student_name: string;\n  roll_no: string;\n  project_title: string;\n  mentor_name: string;\n  topic_selected: boolean;\n  review1_score: number | null;\n  review1_feedback: string | null;\n  review2_score: number | null;\n  review2_feedback: string | null;\n  final_submission: boolean;\n  final_score: number | null;\n  final_feedback: string | null;\n  updated_at: string;\n};\n\nexport type StudentDocumentRecord = {\n  id: string;\n  uploaded_at: string;\n  student_name: string;\n  roll_no: string;\n  doc_type: string;\n  file_url: string;\n  file_path: string | null;\n  uploaded_by: string;\n  verified: boolean;\n};\n\nexport type ClassroomGameRecord = {\n  id: string;\n  created_at: string;\n  topic: string;\n  game_data: GenerateClassroomGameOutput;\n};\n\nexport type GameLeaderboardRecord = {\n    id: string;\n    created_at: string;\n    player_name: string;\n    topic: string;\n    score: number;\n};\n\nexport type CustomQuizRecord = {\n    id: string;\n    created_at: string;\n    topic: string;\n    questions: CustomQuizQuestion[];\n    created_by: string | null;\n};\n\n\n// === Auth Schemas ===\nexport const LoginSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(1, { message: \"Password is required.\" }),\n});\nexport type LoginInput = z.infer<typeof LoginSchema>;\n\n\nexport const RegisterSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email.\" }),\n  password: z.string().min(6, { message: \"Password must be at least 6 characters.\" }),\n  confirmPassword: z.string().min(6, { message: \"Password must be at least 6 characters.\" }),\n  department: z.string().min(2, { message: \"Department is required.\" }),\n  college_name: z.string().min(3, { message: \"College name is required.\" }),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match.\",\n  path: [\"confirmPassword\"],\n});\nexport type RegisterInput = z.infer<typeof RegisterSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 618, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-questions.ts"],"sourcesContent":["// src/ai/flows/generate-questions.ts\n'use server';\n/**\n * @fileOverview A question generator AI agent for university-level educators.\n *\n * - generateQuestions - A function that handles the question generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateQuestionsInputSchema, \n    GenerateQuestionsOutputSchema,\n    type GenerateQuestionsInput,\n    type GenerateQuestionsOutput\n} from '@/ai/schemas';\n\n\nexport async function generateQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {\n  return generateQuestionsFlow(input);\n}\n\nconst generateQuestionsPrompt = ai.definePrompt({\n  name: 'generateQuestionsPrompt',\n  input: {schema: GenerateQuestionsInputSchema},\n  output: {schema: GenerateQuestionsOutputSchema},\n  prompt: `You are an AI quiz generator assistant for university professors. Your task is to generate high-quality **college-level MCQs** based on the input below.\n\nInputs:\n- Subject: {{{subject}}}\n- Topic: {{{topic}}}\n- Number of Questions: {{{numberOfQuestions}}}\n- Academic Complexity: {{{difficulty}}} (Easy = Recall, Moderate = Application, Advanced = Conceptual/Critical Thinking)\n\nInstructions:\n- Each question must be based on the selected topic.\n- Each question should have 4 options (A, B, C, D).\n- You must provide the correct option for each question in the 'answer' field.\n- Use a professional tone.\n- Ensure all questions are distinct.\n\nGenerate the response in the specified JSON format.\n`,\n});\n\nconst generateQuestionsFlow = ai.defineFlow(\n  {\n    name: 'generateQuestionsFlow',\n    inputSchema: GenerateQuestionsInputSchema,\n    outputSchema: GenerateQuestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await generateQuestionsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,qCAAqC;;;;;;AAErC;;;;CAIC,GAED;AACA;;;;;;AAQO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,+BAA4B;IAAA;IAC5C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,gCAA6B;IAAA;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;;;AAgBX,CAAC;AACD;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,+BAA4B;IACzC,cAAc,oHAAA,CAAA,gCAA6B;AAC7C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-feedback.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for generating personalized student feedback.\n *\n * - generateFeedback - A function that handles the feedback generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateFeedbackInputSchema, \n    GenerateFeedbackOutputSchema, \n    type GenerateFeedbackInput, \n    type GenerateFeedbackOutput \n} from '@/ai/schemas';\n\nexport async function generateFeedback(input: GenerateFeedbackInput): Promise<GenerateFeedbackOutput> {\n  return generateFeedbackFlow(input);\n}\n\nconst generateFeedbackPrompt = ai.definePrompt({\n  name: 'generateFeedbackPrompt',\n  input: {schema: GenerateFeedbackInputSchema},\n  output: {schema: GenerateFeedbackOutputSchema},\n  prompt: `You are an expert academic advisor for university students. Your task is to provide constructive, personalized feedback based on a student's marks.\n\nStudent Name: {{{studentName}}}\nSubjects and Marks:\n{{#each marks}}\n- {{ @key }}: {{ this }}\n{{/each}}\n\nAnalyze the student's performance. Identify strengths (subjects with marks > 85) and weaknesses (subjects with marks < 75).\nProvide a few concise, actionable tips for improvement focused on the weak subjects.\nThen, create a structured 7-day study plan. The plan should be balanced and help the student focus on their weaker subjects without neglecting others. Each day should have a clear topic and a simple task.\n\nGenerate the feedback in the following JSON format:\n`,\n});\n\nconst generateFeedbackFlow = ai.defineFlow(\n  {\n    name: 'generateFeedbackFlow',\n    inputSchema: GenerateFeedbackInputSchema,\n    outputSchema: GenerateFeedbackOutputSchema,\n  },\n  async input => {\n    const {output} = await generateFeedbackPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,iBAAiB,KAA4B;IACjE,OAAO,qBAAqB;AAC9B;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7C,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,8BAA2B;IAAA;IAC3C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,+BAA4B;IAAA;IAC7C,QAAQ,CAAC;;;;;;;;;;;;;AAaX,CAAC;AACD;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,8BAA2B;IACxC,cAAc,oHAAA,CAAA,+BAA4B;AAC5C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,uBAAuB;IAC9C,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-questions-from-file.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A question generator AI agent that uses an uploaded document.\n *\n * - generateQuestionsFromFile - A function that handles question generation from a file.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateQuestionsFromFileInputSchema, \n    GenerateQuestionsOutputSchema,\n    type GenerateQuestionsFromFileInput,\n    type GenerateQuestionsOutput\n} from '@/ai/schemas';\n\nexport async function generateQuestionsFromFile(input: GenerateQuestionsFromFileInput): Promise<GenerateQuestionsOutput> {\n  return generateQuestionsFromFileFlow(input);\n}\n\nconst generateQuestionsFromFilePrompt = ai.definePrompt({\n  name: 'generateQuestionsFromFilePrompt',\n  input: {schema: GenerateQuestionsFromFileInputSchema},\n  output: {schema: GenerateQuestionsOutputSchema},\n  prompt: `You are a university-level MCQ generator.\n\nBased on the following uploaded notes/syllabus, extract important concepts and generate {{numberOfQuestions}} MCQs of {{difficulty}} level.\n\nInput document:\n{{media url=fileDataUri}}\n\nInstructions:\n- Each question must be based on the provided document.\n- Each question should have 4 options (A, B, C, D).\n- You must provide the correct option for each question in the 'answer' field.\n- Use a professional tone.\n- Ensure all questions are distinct.\n\nGenerate the response in the specified JSON format.\n`,\n});\n\nconst generateQuestionsFromFileFlow = ai.defineFlow(\n  {\n    name: 'generateQuestionsFromFileFlow',\n    inputSchema: GenerateQuestionsFromFileInputSchema,\n    outputSchema: GenerateQuestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await generateQuestionsFromFilePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACtD,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,uCAAoC;IAAA;IACpD,QAAQ;QAAC,QAAQ,oHAAA,CAAA,gCAA6B;IAAA;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,uCAAoC;IACjD,cAAc,oHAAA,CAAA,gCAA6B;AAC7C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,gCAAgC;IACvD,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-advice.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for providing teaching plan advice.\n *\n * - generateAdvice - A function that handles the advice generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateAdviceInputSchema, \n    GenerateAdviceOutputSchema, \n    type GenerateAdviceInput, \n    type GenerateAdviceOutput \n} from '@/ai/schemas';\n\nexport async function generateAdvice(input: GenerateAdviceInput): Promise<GenerateAdviceOutput> {\n  return generateAdviceFlow(input);\n}\n\nconst generateAdvicePrompt = ai.definePrompt({\n  name: 'generateAdvicePrompt',\n  input: {schema: GenerateAdviceInputSchema},\n  output: {schema: GenerateAdviceOutputSchema},\n  prompt: `You are an AI Teaching Assistant designed to help college professors plan their next class session.\n\nYou will receive a syllabus or lecture notes as input.\n\nFrom that:\n1. Extract and list all covered topics.\n2. Suggest the next logical topic that should follow based on standard college flow.\n3. Mention any important concepts that may have been skipped or are unclear.\n4. Recommend topics that should be revised before any test.\n\nUse bullet points for each section. Keep the tone professional and helpful.\n\nInput Content:\n{{#if fileDataUri}}{{media url=fileDataUri}}{{else}}{{{text}}}{{/if}}\n\nFormat the output clearly in the specified JSON format.\n`,\n});\n\nconst generateAdviceFlow = ai.defineFlow(\n  {\n    name: 'generateAdviceFlow',\n    inputSchema: GenerateAdviceInputSchema,\n    outputSchema: GenerateAdviceOutputSchema,\n  },\n  async input => {\n    const {output} = await generateAdvicePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3C,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,4BAAyB;IAAA;IACzC,QAAQ;QAAC,QAAQ,oHAAA,CAAA,6BAA0B;IAAA;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;;AAgBX,CAAC;AACD;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,4BAAyB;IACtC,cAAc,oHAAA,CAAA,6BAA0B;AAC1C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,qBAAqB;IAC5C,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-question-paper.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for generating college-level question papers.\n *\n * - generateQuestionPaper - A function that handles the question paper generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateQuestionPaperInputSchema, \n    GenerateQuestionPaperOutputSchema,\n    type GenerateQuestionPaperInput,\n    type GenerateQuestionPaperOutput\n} from '@/ai/schemas';\n\nexport async function generateQuestionPaper(input: GenerateQuestionPaperInput): Promise<GenerateQuestionPaperOutput> {\n  return generateQuestionPaperFlow(input);\n}\n\nconst generateQuestionPaperPrompt = ai.definePrompt({\n  name: 'generateQuestionPaperPrompt',\n  input: {schema: GenerateQuestionPaperInputSchema},\n  output: {schema: GenerateQuestionPaperOutputSchema},\n  prompt: `You are an expert question paper setter for engineering college exams.\n\nBased on the provided input, generate a balanced question paper for the specified subject.\n\nSubject: {{{subject}}}\n\nInput Content (use this as the primary source):\n{{#if fileDataUri}}{{media url=fileDataUri}}{{else}}Topic: {{{unit}}}{{/if}}\n\nInstructions:\n- Generate exactly 10 one-mark MCQs. Each MCQ must have 4 options (a, b, c, d) and a correct answer.\n- Generate exactly 10 two-mark short answer questions to test understanding.\n- Generate exactly 4 ten-mark descriptive/essay type questions. The instructions for the student will be to answer any two.\n\nGenerate the response in the specified JSON format.\n`,\n});\n\nconst generateQuestionPaperFlow = ai.defineFlow(\n  {\n    name: 'generateQuestionPaperFlow',\n    inputSchema: GenerateQuestionPaperInputSchema,\n    outputSchema: GenerateQuestionPaperOutputSchema,\n  },\n  async input => {\n    const {output} = await generateQuestionPaperPrompt(input);\n    return output!;\n  }\n);\n\n    "],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,mCAAgC;IAAA;IAChD,QAAQ;QAAC,QAAQ,oHAAA,CAAA,oCAAiC;IAAA;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,mCAAgC;IAC7C,cAAc,oHAAA,CAAA,oCAAiC;AACjD,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;IACnD,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 934, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-attendance-report.ts"],"sourcesContent":["// src/ai/flows/generate-attendance-report.ts\n'use server';\n/**\n * @fileOverview An AI agent for generating student attendance reports.\n *\n * - generateAttendanceReport - A function that handles the report generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateAttendanceReportInputSchema,\n    GenerateAttendanceReportOutputSchema,\n    type GenerateAttendanceReportInput,\n    type GenerateAttendanceReportOutput\n} from '@/ai/schemas';\n\n\nexport async function generateAttendanceReport(input: GenerateAttendanceReportInput): Promise<GenerateAttendanceReportOutput> {\n  return generateAttendanceReportFlow(input);\n}\n\nconst generateAttendanceReportPrompt = ai.definePrompt({\n  name: 'generateAttendanceReportPrompt',\n  input: {schema: GenerateAttendanceReportInputSchema},\n  output: {schema: GenerateAttendanceReportOutputSchema},\n  prompt: `You are an academic advisor writing concise student attendance and behavior summaries for internal reports.\n\nGiven the following input:\n\nStudent Name: {{{studentName}}}\nTotal Days: {{{totalDays}}}\nPresent Days: {{{presentDays}}}\nBehavior Tags: {{#if behaviorTags}}{{#each behaviorTags}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}\n\nTasks:\n1. Calculate attendance percentage.\n2. Classify it as:\n   - Excellent (90-100%)\n   - Good (80-89%)\n   - Fair (70-79%)\n   - Poor (<70%)\n3. Mention behavioral issues if any. If there are no tags, state that behavior is satisfactory.\n4. End with a professional recommendation in one line.\n\nFormat your response exactly like this:\n[Student Name] has an attendance of [xx%] which is [quality category]. Behavioral notes include: [summarized tags if any]. Recommendation: [one-liner advice].\n\nExample Input:\nStudent Name: Vignesh\nTotal Days: 30\nPresent Days: 22\nBehavior Tags: Distracted, Late, Late\n\nExample Output:\nVignesh has an attendance of 73% which is Fair. Behavioral notes include: frequent distractions and lateness. Recommendation: Needs to improve focus and punctuality.\n\nGenerate the report in the specified JSON format.\n`,\n});\n\nconst generateAttendanceReportFlow = ai.defineFlow(\n  {\n    name: 'generateAttendanceReportFlow',\n    inputSchema: GenerateAttendanceReportInputSchema,\n    outputSchema: GenerateAttendanceReportOutputSchema,\n  },\n  async input => {\n    const {output} = await generateAttendanceReportPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;;AAE7C;;;;CAIC,GAED;AACA;;;;;;AAQO,eAAe,yBAAyB,KAAoC;IACjF,OAAO,6BAA6B;AACtC;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACrD,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,sCAAmC;IAAA;IACnD,QAAQ;QAAC,QAAQ,oHAAA,CAAA,uCAAoC;IAAA;IACrD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCX,CAAC;AACD;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAChD;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,sCAAmC;IAChD,cAAc,oHAAA,CAAA,uCAAoC;AACpD,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,+BAA+B;IACtD,OAAO;AACT;;;IApDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1015, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-mark-feedback.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for generating feedback on internal marks.\n *\n * - generateMarkFeedback - A function that handles the feedback generation process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateMarkFeedbackInputSchema,\n    GenerateMarkFeedbackOutputSchema,\n    type GenerateMarkFeedbackInput,\n    type GenerateMarkFeedbackOutput\n} from '@/ai/schemas';\n\nexport async function generateMarkFeedback(input: GenerateMarkFeedbackInput): Promise<GenerateMarkFeedbackOutput> {\n  return generateMarkFeedbackFlow(input);\n}\n\nconst generateMarkFeedbackPrompt = ai.definePrompt({\n  name: 'generateMarkFeedbackPrompt',\n  input: {schema: GenerateMarkFeedbackInputSchema},\n  output: {schema: GenerateMarkFeedbackOutputSchema},\n  prompt: `You are a \"Mark Calculator\". Your task is to generate a concise, one-line feedback summary for a student's report card based on the provided data.\n\nInputs:\n- Student Name: {{studentName}}\n- Internal Score: {{internalScore}} / 30\n- Grade: {{grade}}\n- Attendance: {{attendance}}%\n\nExample:\nInput:\n- Student Name: Keerthi\n- Internal Score: 27\n- Grade: A\n- Attendance: 92\nOutput:\nKeerthi scored 27/30 and secured Grade A with 92% attendance. Excellent performance and consistency.\n\nGenerate the feedback in the specified JSON format.\n`,\n});\n\nconst generateMarkFeedbackFlow = ai.defineFlow(\n  {\n    name: 'generateMarkFeedbackFlow',\n    inputSchema: GenerateMarkFeedbackInputSchema,\n    outputSchema: GenerateMarkFeedbackOutputSchema,\n  },\n  async input => {\n    const {output} = await generateMarkFeedbackPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACjD,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,kCAA+B;IAAA;IAC/C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,mCAAgC;IAAA;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;AAkBX,CAAC;AACD;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,kCAA+B;IAC5C,cAAc,oHAAA,CAAA,mCAAgC;AAChD,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,2BAA2B;IAClD,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1081, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/grade-assignment-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for grading student assignments.\n *\n * - gradeAssignment - A function that handles the assignment grading process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {\n    GradeAssignmentInputSchema,\n    GradeAssignmentOutputSchema,\n    type GradeAssignmentInput,\n    type GradeAssignmentOutput,\n} from '@/ai/schemas';\n\nexport async function gradeAssignment(input: GradeAssignmentInput): Promise<GradeAssignmentOutput> {\n  return gradeAssignmentFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'gradeAssignmentPrompt',\n  input: {schema: GradeAssignmentInputSchema},\n  output: {schema: GradeAssignmentOutputSchema},\n  prompt: `You are an expert Teaching Assistant responsible for grading student assignments.\n\nYou will receive an assignment document. Analyze its content based on the following rubric:\n- **Clarity (4 points):** Is the language clear, concise, and easy to understand? Are concepts well-explained?\n- **Structure (3 points):** Is the assignment well-organized with a logical flow, introduction, body, and conclusion?\n- **Relevance (3 points):** Does the content directly address the assignment prompt and stay on topic?\n\nBased on your analysis, provide a final score out of 10 and constructive feedback. The feedback should be a concise, one or two-sentence summary explaining the score and suggesting improvements.\n\nAssignment for subject: {{{subject}}}\nStudent: {{{studentName}}}\nAssignment Content:\n{{media url=fileDataUri}}\n\nGrade the assignment and provide the score and feedback in the specified JSON format.\n`,\n});\n\nconst gradeAssignmentFlow = ai.defineFlow(\n  {\n    name: 'gradeAssignmentFlow',\n    inputSchema: GradeAssignmentInputSchema,\n    outputSchema: GradeAssignmentOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,6BAA0B;IAAA;IAC1C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,8BAA2B;IAAA;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,6BAA0B;IACvC,cAAc,oHAAA,CAAA,8BAA2B;AAC3C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1144, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-classroom-game.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for gamifying classroom topics.\n *\n * - generateClassroomGame - Generates a quiz and a puzzle from a topic.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateClassroomGameInputSchema, \n    GenerateClassroomGameOutputSchema,\n    type GenerateClassroomGameInput, \n    type GenerateClassroomGameOutput \n} from '@/ai/schemas';\n\nexport async function generateClassroomGame(input: GenerateClassroomGameInput): Promise<GenerateClassroomGameOutput> {\n  return generateClassroomGameFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateClassroomGamePrompt',\n  input: {schema: GenerateClassroomGameInputSchema},\n  output: {schema: GenerateClassroomGameOutputSchema},\n  prompt: `You are an AI expert in educational gamification for university students. Your task is to convert a given topic into a short, fun, and engaging classroom activity.\n\nTopic: {{{topic}}}\n\nGenerate the following based on the topic:\n1.  **Quiz**: Create exactly 5 multiple-choice questions. Each question must have 4 options (A, B, C, D) and a correct answer. The questions should be challenging but fair for a live classroom setting.\n2.  **Puzzle**: Create a word scramble puzzle. The puzzle should consist of one key term from the topic scrambled into a jumble of letters. You must also provide the unscrambled answer. The term should be between 6 and 12 letters long.\n\nEnsure all content is directly related to the provided topic. Format the output in the specified JSON format.\n`,\n});\n\nconst generateClassroomGameFlow = ai.defineFlow(\n  {\n    name: 'generateClassroomGameFlow',\n    inputSchema: GenerateClassroomGameInputSchema,\n    outputSchema: GenerateClassroomGameOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,mCAAgC;IAAA;IAChD,QAAQ;QAAC,QAAQ,oHAAA,CAAA,oCAAiC;IAAA;IAClD,QAAQ,CAAC;;;;;;;;;AASX,CAAC;AACD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,mCAAgC;IAC7C,cAAc,oHAAA,CAAA,oCAAiC;AACjD,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1201, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/generate-knowledge-galaxy.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for visualizing a course structure as a knowledge galaxy.\n *\n * - generateKnowledgeGalaxy - Generates a structured map of topics and sub-topics for a given subject.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { \n    GenerateKnowledgeGalaxyInputSchema, \n    GenerateKnowledgeGalaxyOutputSchema,\n    type GenerateKnowledgeGalaxyInput, \n    type GenerateKnowledgeGalaxyOutput \n} from '@/ai/schemas';\n\nexport async function generateKnowledgeGalaxy(input: GenerateKnowledgeGalaxyInput): Promise<GenerateKnowledgeGalaxyOutput> {\n  return generateKnowledgeGalaxyFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateKnowledgeGalaxyPrompt',\n  input: {schema: GenerateKnowledgeGalaxyInputSchema},\n  output: {schema: GenerateKnowledgeGalaxyOutputSchema},\n  prompt: `You are an expert curriculum designer. Your task is to break down a given university-level subject or syllabus into a \"Knowledge Galaxy\".\n\n{{#if subject}}Subject: {{{subject}}}{{/if}}\n{{#if fileDataUri}}Syllabus Content: {{media url=fileDataUri}}{{/if}}\n\nInstructions:\n1.  Identify 5-7 core concepts or units for the subject based on the provided input. These will be your \"planets\".\n2.  For each \"planet\" (core concept), identify 3-5 related sub-topics. These will be its \"moons\".\n3.  Each planet and moon should have a very short, one-sentence description.\n4.  The entire structure should represent a logical flow of learning for a semester.\n\nEnsure all content is directly related to the provided subject or syllabus. Format the output in the specified JSON format.\n`,\n});\n\nconst generateKnowledgeGalaxyFlow = ai.defineFlow(\n  {\n    name: 'generateKnowledgeGalaxyFlow',\n    inputSchema: GenerateKnowledgeGalaxyInputSchema,\n    outputSchema: GenerateKnowledgeGalaxyOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,qCAAkC;IAAA;IAClD,QAAQ;QAAC,QAAQ,oHAAA,CAAA,sCAAmC;IAAA;IACpD,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,qCAAkC;IAC/C,cAAc,oHAAA,CAAA,sCAAmC;AACnD,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/ai/flows/check-plagiarism.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for checking plagiarism between two documents.\n *\n * - checkPlagiarism - A function that handles the plagiarism check process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {\n  PlagiarismCheckInputSchema,\n  PlagiarismCheckOutputSchema,\n  type PlagiarismCheckInput,\n  type PlagiarismCheckOutput,\n} from '@/ai/schemas';\n\nexport async function checkPlagiarism(input: PlagiarismCheckInput): Promise<PlagiarismCheckOutput> {\n  return checkPlagiarismFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'checkPlagiarismPrompt',\n  input: {schema: PlagiarismCheckInputSchema},\n  output: {schema: PlagiarismCheckOutputSchema},\n  prompt: `You are an expert AI for detecting plagiarism in academic documents.\n\nYou will be given two documents to compare. Your task is to analyze both documents and determine the degree of similarity between them.\n\nDocument 1 ({{doc1Name}}):\n{{media url=doc1Content}}\n\nDocument 2 ({{doc2Name}}):\n{{media url=doc2Content}}\n\nInstructions:\n1.  Read both documents carefully.\n2.  Compare their content, structure, wording, and ideas.\n3.  Calculate a similarity percentage. A score of 100% means the documents are identical. A score of 0% means they are completely different.\n4.  Provide a detailed analysis explaining your reasoning for the similarity score. Point out specific sections, sentences, or ideas that are similar or identical. If you find no significant similarities, state that clearly.\n5.  Based on the similarity score, provide a final verdict: \"No Plagiarism Detected\", \"Low Similarity\", \"Moderate Similarity\", \"High Similarity\", or \"Likely Plagiarized\".\n\nFormat the output strictly in the specified JSON format.\n`,\n});\n\nconst checkPlagiarismFlow = ai.defineFlow(\n  {\n    name: 'checkPlagiarismFlow',\n    inputSchema: PlagiarismCheckInputSchema,\n    outputSchema: PlagiarismCheckOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,6BAA0B;IAAA;IAC1C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,8BAA2B;IAAA;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;AAkBX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,6BAA0B;IACvC,cAAc,oHAAA,CAAA,8BAA2B;AAC3C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1335, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/lib/supabase/admin.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Note: supabaseAdmin uses the SERVICE_ROLE_KEY which you must only use in a secure server-side environment\n// as it bypasses all RLS policies!\n\n// This function creates a new client with the service role key.\n// It should be called only within server actions where admin privileges are required.\nexport function getSupabaseAdmin() {\n    // Hardcoded credentials to bypass environment variable loading issues.\n    const supabaseUrl = 'https://edojuauoelfakimundid.supabase.co';\n    const supabaseServiceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkb2p1YXVvZWxmYWtpbXVuZGlkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjM4NTQwMiwiZXhwIjoyMDY3OTYxNDAyfQ.5-5HaN0jBo6Zscj1nQ3_MXBHd28uPmpbdeLYdubOBMI';\n\n    if (!supabaseUrl || !supabaseServiceRoleKey || supabaseServiceRoleKey === 'YOUR_SUPABASE_SERVICE_ROLE_KEY') {\n        console.error(\"Supabase URL or Service Role Key is missing or is still a placeholder.\");\n        return null;\n    }\n\n    return createClient(supabaseUrl, supabaseServiceRoleKey, {\n        auth: {\n            persistSession: false,\n            autoRefreshToken: false,\n            detectSessionInUrl: false,\n        },\n    });\n}\n"],"names":[],"mappings":";;;AAAA;;AAOO,SAAS;IACZ,uEAAuE;IACvE,MAAM,cAAc;IACpB,MAAM,yBAAyB;IAE/B,uCAA4G;;IAG5G;IAEA,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,wBAAwB;QACrD,MAAM;YACF,gBAAgB;YAChB,kBAAkB;YAClB,oBAAoB;QACxB;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 1361, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient as createClient, type CookieOptions } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport function createServerClient() {\n  const cookieStore = cookies();\n\n  return createClient(\n    'https://edojuauoelfakimundid.supabase.co',\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkb2p1YXVvZWxmYWtpbXVuZGlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIzODU0MDIsImV4cCI6MjA2Nzk2MTQwMn0.69o3b7D1BTvAYNjuOylPbC-qDIqKZtGwrV7-2XC-8p0',\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // The `set` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n        remove(name: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value: '', ...options });\n          } catch (error) {\n            // The `delete` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAE1B,OAAO,CAAA,GAAA,yKAAA,CAAA,qBAAY,AAAD,EAChB,4CACA,oNACA;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;gBACd,uDAAuD;gBACvD,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;gBACd,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 1411, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/app/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { generateQuestions } from \"@/ai/flows/generate-questions\";\nimport { generateFeedback } from \"@/ai/flows/generate-feedback\";\nimport { generateQuestionsFromFile } from \"@/ai/flows/generate-questions-from-file\";\nimport { generateAdvice } from \"@/ai/flows/generate-advice\";\nimport { generateQuestionPaper } from \"@/ai/flows/generate-question-paper\";\nimport { generateAttendanceReport } from \"@/ai/flows/generate-attendance-report\";\nimport { generateMarkFeedback } from \"@/ai/flows/generate-mark-feedback\";\nimport { gradeAssignment } from \"@/ai/flows/grade-assignment-flow\";\nimport { generateClassroomGame } from \"@/ai/flows/generate-classroom-game\";\nimport { generateKnowledgeGalaxy } from \"@/ai/flows/generate-knowledge-galaxy\";\nimport { checkPlagiarism } from \"@/ai/flows/check-plagiarism\";\nimport { \n    GenerateQuestionsInputSchema,\n    GenerateFeedbackInputSchema,\n    GenerateQuestionsFromFileInputSchema,\n    GenerateAdviceInputSchema,\n    GenerateQuestionPaperInputSchema,\n    GenerateAttendanceReportInputSchema,\n    SaveAttendanceInputSchema,\n    SaveInternalMarksInputSchema,\n    SaveSyllabusTrackerInputSchema,\n    SaveAcademicEventInputSchema,\n    GradeAssignmentInputSchema,\n    ProjectTrackerInputSchema,\n    UploadStudentDocumentInputSchema,\n    GenerateClassroomGameInputSchema,\n    SaveGameScoreInputSchema,\n    GenerateKnowledgeGalaxyInputSchema,\n    CreateCustomQuizInputSchema,\n    LoginSchema,\n    RegisterSchema,\n    PlagiarismCheckInputSchema,\n    type GenerateQuestionsInput, \n    type GenerateFeedbackInput, \n    type GenerateFeedbackOutput,\n    type MCQQuestion,\n    type GenerateQuestionsFromFileInput,\n    type GenerateAdviceOutput,\n    type GenerateQuestionPaperInput,\n    type GenerateQuestionPaperOutput,\n    type GenerateAttendanceReportInput,\n    type GenerateAttendanceReportOutput,\n    type SaveAttendanceInput,\n    type SaveInternalMarksInput,\n    type PerformanceReport,\n    type AttendanceRecord,\n    type SyllabusTrackerRecord,\n    type SaveSyllabusTrackerInput,\n    type TeacherRemarkRecord,\n    type StudentInfo,\n    type StudentProfileData,\n    type AcademicEventRecord,\n    type GradeAssignmentOutput,\n    type ProjectTrackerInput,\n    type ProjectTrackerRecord,\n    type StudentDocumentRecord,\n    type GenerateClassroomGameOutput,\n    type GameLeaderboardRecord,\n    type SaveGameScoreInput,\n    type GenerateKnowledgeGalaxyOutput,\n    type CreateCustomQuizInput,\n    type CustomQuizRecord,\n    type LoginInput,\n    type RegisterInput,\n    type GenerateKnowledgeGalaxyInput,\n    type PlagiarismCheckInput,\n    type PlagiarismCheckOutput,\n} from \"@/ai/schemas\";\nimport { getSupabaseAdmin } from \"@/lib/supabase/admin\";\nimport { createServerClient } from \"@/lib/supabase/server\";\nimport { format } from \"date-fns\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase/client\";\nimport mammoth from 'mammoth';\n\n// === Question Actions ===\ntype QuestionActionResponse = {\n  questions?: MCQQuestion[];\n  error?: string;\n};\n\nasync function saveQuestionsToSupabase(questions: MCQQuestion[], topic?: string) {\n    if (!topic || questions.length === 0) return;\n\n    const questionsToInsert = questions.map(q => ({\n        topic: topic,\n        question_text: q.question,\n        option_a: q.options.A,\n        option_b: q.options.B,\n        option_c: q.options.C,\n        option_d: q.options.D,\n        correct_option: q.answer\n    }));\n\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return;\n    const { error } = await supabase.from('mcq_questions').insert(questionsToInsert);\n    if (error) {\n        console.error(\"Error saving questions to Supabase:\", error);\n    }\n}\n\nexport async function generateQuestionsAction(input: GenerateQuestionsInput): Promise<QuestionActionResponse> {\n  const parsedInput = GenerateQuestionsInputSchema.safeParse(input);\n\n  if (!parsedInput.success) {\n    console.error(\"Invalid input for question generation:\", parsedInput.error.flatten());\n    return { error: \"Invalid input.\" };\n  }\n\n  try {\n    const output = await generateQuestions(parsedInput.data);\n    if (output.questions) {\n        saveQuestionsToSupabase(output.questions, parsedInput.data.topic);\n    }\n    return { questions: output.questions };\n  } catch (error) {\n    console.error(\"Error generating questions:\", error);\n    return { error: \"Failed to generate questions. The AI model may be unavailable or the request timed out. Please try again later.\" };\n  }\n}\n\nexport async function generateQuestionsFromFileAction(input: GenerateQuestionsFromFileInput): Promise<QuestionActionResponse> {\n  const parsedInput = GenerateQuestionsFromFileInputSchema.safeParse(input);\n\n  if (!parsedInput.success) {\n    console.error(\"Invalid input for question generation from file:\", parsedInput.error.flatten());\n    return { error: \"Invalid input.\" };\n  }\n\n  try {\n    const output = await generateQuestionsFromFile(parsedInput.data);\n    if (output.questions) {\n        saveQuestionsToSupabase(output.questions, parsedInput.data.topic);\n    }\n    return { questions: output.questions };\n  } catch (error) {\n    console.error(\"Error generating questions from file:\", error);\n    return { error: \"Failed to generate questions from the file. The AI model may be unavailable or the request timed out. Please try again later.\" };\n  }\n}\n\nasync function saveFeedbackToSupabase(feedbackData: GenerateFeedbackOutput, input: GenerateFeedbackInput) {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return;\n    \n    const score = Object.values(input.marks).reduce((sum, mark) => sum + mark, 0);\n    const total = input.subjects.length * 100; // Assuming 100 max marks per subject, consistent with grade-analyzer\n    const subject = input.subjects.join(', ');\n\n    const reportToInsert = {\n      student_name: input.studentName,\n      subject: subject,\n      score: score,\n      total: total,\n      feedback: JSON.stringify({\n          strengths: feedbackData.strengths,\n          weaknesses: feedbackData.weaknesses,\n          improvementTips: feedbackData.improvementTips,\n      }),\n      improvement_plan: JSON.stringify(feedbackData.studyPlan),\n    };\n    \n    const { error } = await supabase.from('performance_reports').insert([reportToInsert]);\n    if (error) {\n        console.error(\"Error saving performance report to Supabase:\", error);\n    }\n}\n\ntype FeedbackActionResponse = {\n    feedback?: GenerateFeedbackOutput;\n    error?: string;\n};\n\nexport async function generateFeedbackAction(input: GenerateFeedbackInput): Promise<FeedbackActionResponse> {\n    const parsedInput = GenerateFeedbackInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        return { error: \"Invalid input for feedback generation.\" };\n    }\n\n    try {\n        const output = await generateFeedback(parsedInput.data);\n        if (output) {\n            await saveFeedbackToSupabase(output, parsedInput.data);\n        }\n        revalidatePath('/');\n        return { feedback: output };\n    } catch (error) {\n        console.error(\"Error generating feedback:\", error);\n        return { error: \"Failed to generate AI feedback. The model may be unavailable or the request timed out. Please try again.\" };\n    }\n}\n\ntype AdviceActionResponse = {\n    advice?: GenerateAdviceOutput;\n    error?: string;\n};\n\nasync function saveAdviceToSupabase(advice: GenerateAdviceOutput, input: { subject?: string; text?: string; fileDataUri?: string }) {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return;\n\n    const planToInsert = {\n      teacher_id: null, // No user to associate with\n      subject: input.subject,\n      uploaded_content: input.fileDataUri || input.text,\n      covered_topics: JSON.stringify(advice.coveredTopics),\n      next_topic: advice.nextTopic,\n      revision_topics: JSON.stringify(advice.suggestedRevisions),\n      missed_concepts: JSON.stringify(advice.skippedConcepts)\n    };\n    \n    const { error } = await supabase.from('teaching_plans').insert([planToInsert]);\n    if (error) {\n        console.error(\"Error saving teaching plan to Supabase:\", error);\n    }\n}\n\nexport async function generateAdviceAction(input: { subject?: string; text?: string; fileDataUri?: string }): Promise<AdviceActionResponse> {\n    const parsedInput = GenerateAdviceInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for advice generation:\", parsedInput.error.flatten());\n        return { error: \"Invalid input.\" };\n    }\n\n    try {\n        const output = await generateAdvice(parsedInput.data);\n        if (output) {\n            saveAdviceToSupabase(output, parsedInput.data);\n        }\n        return { advice: output };\n    } catch (error) {\n        console.error(\"Error generating advice:\", error);\n        return { error: \"Failed to generate teaching advice. The AI model may be unavailable or the request timed out. Please try again.\" };\n    }\n}\n\ntype ReportActionResponse = {\n    reports?: PerformanceReport[];\n    error?: string;\n}\n\nexport async function getPerformanceReports(): Promise<ReportActionResponse> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    \n    const { data, error } = await supabase\n      .from(\"performance_reports\")\n      .select(\"*\")\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n        console.error(\"Error fetching performance reports:\", error);\n        return { error: \"Could not fetch performance reports. Please ensure the 'performance_reports' table exists and that your Supabase credentials are correct.\" };\n    }\n\n    return { reports: data as PerformanceReport[] };\n}\n\ntype QuestionPaperActionResponse = {\n    paper?: GenerateQuestionPaperOutput;\n    error?: string;\n};\n\nasync function saveQuestionPaperToSupabase(paper: GenerateQuestionPaperOutput, input: GenerateQuestionPaperInput) {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return;\n    \n    const paperToInsert = {\n      teacher_id: null, // No user to associate with\n      subject: input.subject,\n      unit: input.unit || `File: ${new Date().toISOString()}`,\n      one_mark: paper.oneMarkQuestions,\n      two_mark: paper.twoMarkQuestions,\n      ten_mark: paper.tenMarkQuestions,\n    };\n\n    const { error } = await supabase.from('question_papers_v2').insert([paperToInsert]);\n    if (error) {\n        console.error(\"Error saving question paper to Supabase:\", error);\n    }\n}\n\nexport async function generateQuestionPaperAction(input: GenerateQuestionPaperInput): Promise<QuestionPaperActionResponse> {\n    const parsedInput = GenerateQuestionPaperInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for question paper generation:\", parsedInput.error.flatten());\n        return { error: \"Invalid input.\" };\n    }\n\n    try {\n        const output = await generateQuestionPaper(parsedInput.data);\n        if (output) {\n            saveQuestionPaperToSupabase(output, parsedInput.data);\n        }\n        return { paper: output };\n    } catch (error) {\n        console.error(\"Error generating question paper:\", error);\n        return { error: \"Failed to generate the question paper. The AI model may be unavailable or the request timed out. Please try again.\" };\n    }\n}\n\ntype AttendanceResponse = {\n    records?: AttendanceRecord[];\n    error?: string;\n};\n\nexport async function getAttendanceRecords(): Promise<AttendanceResponse> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    const { data, error } = await supabase\n        .from('student_attendance')\n        .select('*')\n        .order('date', { ascending: false });\n\n    if (error) {\n        console.error('Error fetching attendance records:', error);\n        return { error: \"Could not fetch attendance data. Please ensure the 'student_attendance' table exists.\" };\n    }\n\n    return { records: data as AttendanceRecord[] };\n}\n\ntype AttendanceReportActionResponse = {\n    report?: GenerateAttendanceReportOutput;\n    error?: string;\n};\n\nexport async function generateAttendanceReportAction(input: GenerateAttendanceReportInput): Promise<AttendanceReportActionResponse> {\n    const parsedInput = GenerateAttendanceReportInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for attendance report generation:\", parsedInput.error.flatten());\n        return { error: \"Invalid input.\" };\n    }\n\n    try {\n        const output = await generateAttendanceReport(parsedInput.data);\n        return { report: output };\n    } catch (error) {\n        console.error(\"Error generating attendance report:\", error);\n        return { error: \"Failed to generate attendance report. The AI model may be unavailable or the request timed out.\" };\n    }\n}\n\nexport async function saveAttendanceAction(input: SaveAttendanceInput): Promise<{ message?: string, error?: string }> {\n    const parsedInput = SaveAttendanceInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        return { error: \"Invalid input.\" };\n    }\n    \n    const { data } = parsedInput;\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n        \n    const record = {\n        student_name: data.student_name,\n        roll_no: data.roll_no,\n        date: data.date, \n        subject: data.subject,\n        period: data.period,\n        status: data.status,\n        remark: data.remark || null,\n        behavior_tags: data.behavior_tags || null,\n    };\n    \n    const { error } = await supabase\n        .from('student_attendance')\n        .insert([record]);\n            \n    if (error) {\n        console.error(\"Error inserting attendance:\", error);\n        return { error: \"Could not save attendance data due to a database error.\" };\n    }\n    \n    revalidatePath('/');\n    return { message: `Saved attendance for ${data.student_name} (${data.period}) — ${data.status} on ${data.date}`};\n}\n\ntype MarkCalculatorActionResponse = {\n    feedback?: string;\n    error?: string;\n};\n\nexport async function saveInternalMarksAction(input: SaveInternalMarksInput): Promise<MarkCalculatorActionResponse> {\n    const parsedInput = SaveInternalMarksInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for mark calculation:\", parsedInput.error.flatten());\n        return { error: \"Invalid input.\" };\n    }\n\n    const { student_name, roll_no, subject, test1, test2, assignment, attendance } = parsedInput.data;\n    \n    const internal_score = test1 + test2 + assignment;\n    \n    let grade = 'F';\n    if (internal_score >= 27) grade = 'A+';\n    else if (internal_score >= 24) grade = 'A';\n    else if (internal_score >= 21) grade = 'B';\n    else if (internal_score >= 18) grade = 'C';\n    else if (internal_score >= 15) grade = 'D';\n\n    try {\n        // Generate AI feedback\n        const feedbackResult = await generateMarkFeedback({\n            studentName: student_name,\n            internalScore: internal_score,\n            grade: grade,\n            attendance: attendance,\n        });\n\n        if (!feedbackResult.feedback) {\n            throw new Error(\"AI failed to generate feedback.\");\n        }\n\n        const supabase = getSupabaseAdmin();\n        if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n        // Save to Supabase\n        const recordToInsert = {\n            student_name,\n            roll_no,\n            subject,\n            test1,\n            test2,\n            assignment,\n            attendance,\n            internal_score,\n            grade,\n            feedback: feedbackResult.feedback,\n        };\n        \n        const { error: dbError } = await supabase.from('internal_marks').insert([recordToInsert]);\n\n        if (dbError) {\n            console.error(\"Error saving internal marks to Supabase:\", dbError);\n            throw new Error(\"Failed to save the record to the database.\");\n        }\n        revalidatePath('/');\n        return { feedback: feedbackResult.feedback };\n    } catch (error) {\n        console.error(\"Error in saveInternalMarksAction:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred during feedback generation or saving.\";\n        return { error: errorMessage };\n    }\n}\n\nexport async function getSyllabusTrackerRecords(): Promise<{ records?: SyllabusTrackerRecord[], error?: string }> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n\n    const { data, error } = await supabase\n        .from('syllabus_tracker')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n    if (error) {\n        console.error('Error fetching syllabus tracker records:', error);\n        return { error: \"Could not fetch syllabus tracker data. Please check your RLS policies.\" };\n    }\n\n    return { records: data };\n}\n\nexport async function saveSyllabusTrackerAction(input: SaveSyllabusTrackerInput): Promise<{ message?: string, error?: string }> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n\n    const parsedInput = SaveSyllabusTrackerInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        return { error: \"Invalid input.\" };\n    }\n    \n    const { subject, topic } = parsedInput.data;\n    \n    const record = {\n        subject: subject,\n        topic: topic,\n        completed: false, // Always false on creation\n        uploaded_by: null, // No user to associate with\n    };\n    \n    const { error } = await supabase.from('syllabus_tracker').insert([record]);\n            \n    if (error) {\n        console.error(\"Error inserting syllabus topic:\", error);\n        return { error: \"Could not save syllabus data due to a database error.\" };\n    }\n    revalidatePath('/');\n    return { message: `Added topic \"${topic}\" to ${subject}.`};\n}\n\nexport async function updateSyllabusTopicStatusAction(id: string, completed: boolean): Promise<{ message?: string, error?: string }> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    \n    const { error } = await supabase\n        .from('syllabus_tracker')\n        .update({ completed })\n        .eq('id', id);\n\n    if (error) {\n        console.error(\"Error updating syllabus topic:\", error);\n        return { error: \"Could not update topic status.\" };\n    }\n    revalidatePath('/');\n    return { message: \"Topic status updated.\" };\n}\n\n\nexport async function getStudentList(): Promise<{ students?: StudentInfo[], error?: string }> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    const { data, error } = await supabase\n        .from('student_attendance')\n        .select('student_name, roll_no')\n        .order('student_name', { ascending: true });\n\n    if (error) {\n        console.error('Error fetching student list:', error);\n        return { error: 'Could not fetch student list.' };\n    }\n\n    const uniqueStudents = Array.from(new Map(data.map(item => [item.roll_no, item])).values());\n    \n    return { students: uniqueStudents };\n}\n\nexport async function getStudentProfileData(rollNo: string): Promise<{ profile?: StudentProfileData, error?: string }> {\n    try {\n        const supabase = getSupabaseAdmin();\n        if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n        const { data: attendanceData, error: attendanceError } = await supabase\n            .from('student_attendance')\n            .select('status, behavior_tags')\n            .eq('roll_no', rollNo);\n        if (attendanceError) throw new Error(`Attendance fetch failed: ${attendanceError.message}`);\n\n        const totalDays = attendanceData.length;\n        const presentDays = attendanceData.filter(r => r.status === 'Present' || r.status === 'Late').length;\n        const attendancePercentage = totalDays > 0 ? Math.round((presentDays / totalDays) * 100) : 0;\n        \n        const behaviorTags = [...new Set(\n            attendanceData\n                .flatMap(r => (r.behavior_tags ? r.behavior_tags.split(',').map(tag => tag.trim()) : []))\n                .filter(Boolean)\n        )];\n        \n        const { data: marksData, error: marksError } = await supabase\n            .from('internal_marks')\n            .select('subject, internal_score, grade, student_name')\n            .eq('roll_no', rollNo);\n        if (marksError) throw new Error(`Marks fetch failed: ${marksError.message}`);\n\n        const { data: remarksData, error: remarksError } = await supabase\n            .from('teacher_remarks')\n            .select('*')\n            .eq('roll_no', rollNo)\n            .order('created_at', { ascending: false });\n        if (remarksError) throw new Error(`Remarks fetch failed: ${remarksError.message}`);\n\n        const studentName = marksData?.[0]?.student_name || attendanceData?.[0]?.student_name || 'N/A';\n\n        const { data: feedbackData, error: feedbackError } = await supabase\n            .from('performance_reports')\n            .select('feedback')\n            .eq('student_name', studentName)\n            .order('created_at', { ascending: false })\n            .limit(1)\n            .single();\n        \n        let aiFeedback = null;\n        if (feedbackData?.feedback) {\n            try {\n                const parsedFeedback = typeof feedbackData.feedback === 'string' ? JSON.parse(feedbackData.feedback) : feedbackData.feedback;\n                aiFeedback = parsedFeedback.improvementTips || \"No specific tips available.\";\n            } catch (e) {\n                aiFeedback = \"Could not parse AI feedback.\";\n            }\n        }\n\n        const profile: StudentProfileData = {\n            studentName,\n            rollNo: rollNo,\n            attendance: {\n                percentage: attendancePercentage,\n                presentDays: presentDays,\n                totalDays: totalDays,\n            },\n            behaviorTags: behaviorTags,\n            marks: marksData.map(m => ({\n                subject: m.subject,\n                internal_score: m.internal_score,\n                grade: m.grade\n            })),\n            remarks: remarksData as TeacherRemarkRecord[],\n            aiFeedback: aiFeedback,\n        };\n\n        return { profile };\n\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred fetching profile data.\";\n        console.error(\"Error in getStudentProfileData:\", errorMessage);\n        return { error: errorMessage };\n    }\n}\n\n\nexport async function getAcademicEventsAction(): Promise<{ events?: AcademicEventRecord[], error?: string }> {\n    const supabaseAdmin = getSupabaseAdmin();\n    if (!supabaseAdmin) return { error: \"Could not create Supabase admin client.\" };\n    const { data, error } = await supabaseAdmin\n        .from('academic_calendar')\n        .select('*')\n        .order('event_date', { ascending: true });\n\n    if (error) {\n        console.error('Error fetching academic events:', error);\n        return { error: \"Could not fetch academic events data.\" };\n    }\n\n    return { events: data };\n}\n\nexport async function saveAcademicEventAction(\n    input: Omit<AcademicEventRecord, 'id' | 'created_at' | 'posted_by' | 'event_date'> & { event_date: Date }\n): Promise<{ message?: string, error?: string }> {\n    const parsedInput = SaveAcademicEventInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        return { error: \"Invalid input. \" + parsedInput.error.flatten().formErrors.join(', ') };\n    }\n    \n    const { title, description, event_date, event_type } = parsedInput.data;\n    \n    const formattedDate = format(event_date, 'yyyy-MM-dd');\n    \n    const record = {\n        title,\n        description: description || null,\n        event_date: formattedDate,\n        event_type,\n        posted_by: null // No user to associate with\n    };\n    \n    const supabaseAdmin = getSupabaseAdmin();\n    if (!supabaseAdmin) return { error: \"Could not create Supabase admin client.\" };\n    const { error } = await supabaseAdmin.from('academic_calendar').insert([record]);\n            \n    if (error) {\n        console.error(\"Error inserting academic event:\", error);\n        return { error: \"Could not insert new event record.\" };\n    }\n    \n    revalidatePath('/');\n\n    return { message: `Successfully added event: \"${title}\"`};\n}\n\ntype GradeAssignmentActionResponse = {\n    result?: GradeAssignmentOutput;\n    error?: string;\n};\n\nexport async function gradeAssignmentAction(input: { studentName: string; subject: string; fileDataUri: string }): Promise<GradeAssignmentActionResponse> {\n    const parsedInput = GradeAssignmentInputSchema.safeParse(input);\n\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for assignment grading:\", parsedInput.error.flatten());\n        return { error: \"Invalid input.\" };\n    }\n\n    try {\n        const output = await gradeAssignment(parsedInput.data);\n        if (output) {\n            // Save to Supabase\n            const supabase = getSupabaseAdmin();\n            if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n            const { error } = await supabase.from('assignment_scores').insert([{\n                student_name: parsedInput.data.studentName,\n                subject: parsedInput.data.subject,\n                score: output.score,\n                feedback: output.feedback,\n            }]);\n\n            if (error) {\n                console.error(\"Error saving assignment score to Supabase:\", error);\n                throw new Error(\"Failed to save the grading result to the database.\");\n            }\n        }\n        revalidatePath('/');\n        return { result: output };\n    } catch (error) {\n        console.error(\"Error grading assignment:\", error);\n        return { error: \"Failed to grade the assignment. The AI model may be unavailable or the request timed out. Please try again.\" };\n    }\n}\n\nexport async function getProjectTrackerRecords(): Promise<{ records?: ProjectTrackerRecord[], error?: string }> {\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    const { data, error } = await supabase\n        .from('project_tracker')\n        .select('*')\n        .order('updated_at', { ascending: false });\n\n    if (error) {\n        console.error('Error fetching project tracker records:', error);\n        return { error: \"Could not fetch project tracker data.\" };\n    }\n    return { records: data };\n}\n\nexport async function saveOrUpdateProjectTrackerAction(input: ProjectTrackerInput): Promise<{ message?: string, error?: string }> {\n    const parsedInput = ProjectTrackerInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        return { error: \"Invalid input: \" + parsedInput.error.flatten().formErrors.join(', ') };\n    }\n\n    const { id, roll_no, ...recordData } = parsedInput.data;\n    \n    const recordToSave = { roll_no, ...recordData };\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not create Supabase admin client.\" };\n    if (id) {\n        const { error } = await supabase\n            .from('project_tracker')\n            .update(recordToSave)\n            .eq('id', id);\n\n        if (error) {\n            console.error(\"Error updating project:\", error);\n            return { error: \"Could not update project record.\" };\n        }\n        revalidatePath('/');\n        return { message: `Updated project for ${recordToSave.student_name}.` };\n    }\n    \n    const { data: existing, error: selectError } = await supabase\n        .from('project_tracker')\n        .select('id')\n        .eq('roll_no', roll_no)\n        .limit(1)\n        .single();\n    \n    if (selectError && selectError.code !== 'PGRST116') {\n        console.error(\"DB error checking for duplicates:\", selectError);\n        return { error: \"Database error.\" };\n    }\n    \n    if (existing) {\n        return { error: `A project for Roll No. ${roll_no} already exists.` };\n    }\n\n    const { error: insertError } = await supabase\n        .from('project_tracker')\n        .insert([recordToSave]);\n        \n    if (insertError) {\n        console.error(\"Error inserting project:\", insertError);\n        return { error: \"Could not insert new project record.\" };\n    }\n    \n    revalidatePath('/');\n    return { message: `Added project for ${recordToSave.student_name}.` };\n}\n\n// === Student Document Vault Actions ===\n\n// Get all documents for the teacher view\nexport async function getStudentDocumentsAction(): Promise<{ records?: StudentDocumentRecord[], error?: string }> {\n    const supabase = createServerClient();\n    const { data, error } = await supabase\n        .from('student_documents')\n        .select('*')\n        .order('uploaded_at', { ascending: false });\n\n    if (error) {\n        console.error('Error fetching student documents:', error.message);\n        return { error: \"Could not fetch student documents. Please check your Supabase SELECT policy on the 'student_documents' table.\" };\n    }\n    return { records: data };\n}\n\n// Verify or un-verify a document\nexport async function updateDocumentStatusAction(documentId: string, verified: boolean): Promise<{ record?: StudentDocumentRecord, error?: string }> {\n    const supabase = createServerClient();\n    const { data, error } = await supabase\n        .from('student_documents')\n        .update({ verified })\n        .eq('id', documentId)\n        .select()\n        .single();\n\n    if (error) {\n        console.error('Error updating document status:', error);\n        return { error: \"Could not update document status.\" };\n    }\n    revalidatePath('/');\n    return { record: data };\n}\n\n// Upload a new document\nexport async function uploadStudentDocumentAction(formData: FormData): Promise<{ message?: string, error?: string }> {\n    const rawData = {\n        student_name: formData.get('student_name'),\n        roll_no: formData.get('roll_no'),\n        doc_type: formData.get('doc_type'),\n    };\n    \n    const parsedInput = UploadStudentDocumentInputSchema.safeParse(rawData);\n    if (!parsedInput.success) {\n        const firstError = parsedInput.error.errors[0]?.message || 'Invalid input.';\n        return { error: firstError };\n    }\n\n    const file = formData.get('file') as File;\n    if (!file || file.size === 0) {\n        return { error: 'File is required.' };\n    }\n    if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        return { error: 'File size must be less than 5MB.' };\n    }\n\n    try {\n        const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.\\-_]/g, '_');\n        const basePath = 'public';\n        const filePath = `${basePath}/${parsedInput.data.roll_no}/${Date.now()}-${sanitizedFileName}`;\n\n        const BUCKET_NAME = 'student-documents';\n        const supabase = createServerClient();\n\n        const { error: uploadError } = await supabase.storage\n            .from(BUCKET_NAME)\n            .upload(filePath, file);\n\n        if (uploadError) {\n            console.error('Supabase Storage Upload Error:', uploadError);\n            throw new Error(`Storage error: ${uploadError.message}. Please ensure the bucket '${BUCKET_NAME}' exists and has the correct policies.`);\n        }\n\n        const { data: urlData } = supabase.storage\n            .from(BUCKET_NAME)\n            .getPublicUrl(filePath);\n\n        if (!urlData.publicUrl) {\n            await supabase.storage.from(BUCKET_NAME).remove([filePath]);\n            throw new Error(\"Could not get public URL for the uploaded file.\");\n        }\n\n        const recordToInsert = {\n            ...parsedInput.data,\n            file_path: filePath,\n            file_url: urlData.publicUrl,\n            uploaded_by: 'student', // No user context\n            verified: false,\n        };\n\n        const { error: insertError } = await supabase.from('student_documents').insert([recordToInsert]);\n\n        if (insertError) {\n            await supabase.storage.from(BUCKET_NAME).remove([filePath]);\n            throw new Error(`Database error: ${insertError.message}`);\n        }\n        revalidatePath('/upload');\n        revalidatePath('/');\n        return { message: \"Document uploaded successfully! It will be reviewed by your teacher.\" };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred during upload.\";\n        console.error(\"Upload failed:\", errorMessage);\n        return { error: errorMessage };\n    }\n}\n\n// === Classroom Gamifier Actions ===\n\nexport async function generateClassroomGameAction(\n    topic: string\n): Promise<{ game?: GenerateClassroomGameOutput, error?: string }> {\n    const parsedInput = GenerateClassroomGameInputSchema.safeParse({ topic });\n    if (!parsedInput.success) return { error: \"Invalid input.\" };\n\n    try {\n        const gameData = await generateClassroomGame(parsedInput.data);\n        return { game: gameData };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        console.error(\"Error in generateClassroomGameAction:\", errorMessage);\n        return { error: errorMessage };\n    }\n}\n\nexport async function createCustomQuizAction(input: CreateCustomQuizInput): Promise<{ quizId?: string, error?: string }> {\n    const parsedInput = CreateCustomQuizInputSchema.safeParse(input);\n    if (!parsedInput.success) return { error: \"Invalid input.\" };\n\n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not connect to the database.\" };\n\n    const { data, error } = await supabase\n        .from('custom_quizzes')\n        .insert({\n            topic: parsedInput.data.topic,\n            questions: JSON.stringify(parsedInput.data.questions),\n            created_by: null, // No auth\n        })\n        .select('id')\n        .single();\n    \n    if (error) {\n        console.error(\"Error creating custom quiz:\", error);\n        return { error: \"Failed to save the quiz to the database.\" };\n    }\n    \n    revalidatePath('/');\n    return { quizId: data.id };\n}\n\nexport async function getQuizAction(id: string): Promise<{ quiz?: CustomQuizRecord, error?: string }> {\n    const supabase = createServerClient();\n    const { data, error } = await supabase\n        .from('custom_quizzes')\n        .select('*')\n        .eq('id', id)\n        .single();\n    \n    if (error) {\n        console.error(`Error fetching quiz ${id}:`, error);\n        return { error: \"Could not find the requested quiz.\" };\n    }\n    return { quiz: data };\n}\n\n\nexport async function getLeaderboardAction(topic: string): Promise<{ records?: GameLeaderboardRecord[], error?: string }> {\n    const supabase = createServerClient();\n    const { data, error } = await supabase\n        .from('gamification_leaderboard')\n        .select('*')\n        .eq('topic', topic)\n        .order('score', { ascending: false })\n        .limit(10);\n\n    if (error) {\n        console.error(\"Error fetching leaderboard:\", error);\n        return { error: \"Could not fetch leaderboard data.\" };\n    }\n    return { records: data };\n}\n\nexport async function saveGameScoreAction(input: SaveGameScoreInput): Promise<{ success?: boolean, error?: string }> {\n    const parsedInput = SaveGameScoreInputSchema.safeParse(input);\n    if (!parsedInput.success) return { error: \"Invalid input.\" };\n    \n    const supabase = getSupabaseAdmin();\n    if (!supabase) return { error: \"Could not connect to the database.\" };\n\n    const { error } = await supabase.from('gamification_leaderboard').insert([parsedInput.data]);\n    if (error) {\n        console.error(\"Error saving score:\", error);\n        return { error: \"Failed to save score.\" };\n    }\n    revalidatePath('/');\n    return { success: true };\n}\n\n\n// === Knowledge Galaxy Actions ===\n\nexport async function generateKnowledgeGalaxyAction(\n    input: GenerateKnowledgeGalaxyInput,\n): Promise<{ galaxy?: GenerateKnowledgeGalaxyOutput, error?: string }> {\n    const parsedInput = GenerateKnowledgeGalaxyInputSchema.safeParse(input);\n    if (!parsedInput.success) return { error: \"Invalid input.\" };\n\n    try {\n        const galaxyData = await generateKnowledgeGalaxy(parsedInput.data);\n        if (!galaxyData || !galaxyData.subject) {\n            // Add a subject if the AI didn't provide one (e.g., from a file)\n            const fallbackSubject = input.subject || \"Uploaded Syllabus\";\n            return { galaxy: { ...galaxyData, subject: fallbackSubject } };\n        }\n        return { galaxy: galaxyData };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        console.error(\"Error in generateKnowledgeGalaxyAction:\", errorMessage);\n        return { error: errorMessage };\n    }\n}\n\n\n// === Plagiarism Checker Actions ===\n\nasync function getFileContentAsDataUri(fileContent: string, mimeType: string): Promise<string> {\n    if (mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        const buffer = Buffer.from(fileContent.split(',')[1], 'base64');\n        const { value } = await mammoth.extractRawText({ buffer });\n        return `data:text/plain;base64,${Buffer.from(value).toString('base64')}`;\n    }\n    // For PDF and TXT, the content is already a valid data URI\n    return fileContent;\n}\n\nexport async function checkPlagiarismAction(input: PlagiarismCheckInput): Promise<{ result?: PlagiarismCheckOutput, error?: string }> {\n    const parsedInput = PlagiarismCheckInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        console.error(\"Invalid input for plagiarism check:\", parsedInput.error.flatten());\n        return { error: \"Invalid input format for AI model.\" };\n    }\n\n    try {\n        const [doc1DataUri, doc2DataUri] = await Promise.all([\n            getFileContentAsDataUri(parsedInput.data.doc1Content, parsedInput.data.doc1MimeType),\n            getFileContentAsDataUri(parsedInput.data.doc2Content, parsedInput.data.doc2MimeType)\n        ]);\n\n        const flowInput = {\n            ...parsedInput.data,\n            doc1Content: doc1DataUri,\n            doc2Content: doc2DataUri,\n        };\n      \n        const result = await checkPlagiarism(flowInput);\n        return { result };\n\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : \"Failed to run plagiarism check. The AI model may be busy.\";\n      console.error(\"Error in checkPlagiarismAction:\", errorMessage);\n      return { error: errorMessage };\n    }\n}\n\n\n// === Auth Actions ===\nexport async function loginAction(input: LoginInput): Promise<{ error?: string }> {\n    redirect('/');\n    return {};\n}\n\nexport async function registerAction(input: RegisterInput): Promise<{ error?: string, success?: boolean }> {\n    redirect('/');\n    return { success: true };\n}\n\n\nexport async function signOutAction(): Promise<void> {\n    redirect('/');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2511, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateQuestionsAction as '40f650b05981e40161626499b34dc6181b639c5a9f'} from 'ACTIONS_MODULE0'\nexport {generateQuestionsFromFileAction as '40ed7ed3546442b22df4cc28e32432e6a0ee01dc59'} from 'ACTIONS_MODULE0'\nexport {generateFeedbackAction as '40cc978934b5b114d90d85a3b36888afdcea2ada31'} from 'ACTIONS_MODULE0'\nexport {generateAdviceAction as '40f68a98d83e3d1882e37935b05c4883db334cca48'} from 'ACTIONS_MODULE0'\nexport {getPerformanceReports as '005e55c92be8a1dc150c3310fff4b15e1ca5939299'} from 'ACTIONS_MODULE0'\nexport {generateQuestionPaperAction as '401400a6e18bca2ea83d5270232ff04473e1236ffa'} from 'ACTIONS_MODULE0'\nexport {getAttendanceRecords as '002b65b4b4dc82e42d9334c115d6e0819dda0d88e1'} from 'ACTIONS_MODULE0'\nexport {generateAttendanceReportAction as '4023a7c6abb0208ea9c02edf3ca9942360ad2e6476'} from 'ACTIONS_MODULE0'\nexport {saveInternalMarksAction as '4054db5c966332ae1b4e138ed1756aed0a377dbb95'} from 'ACTIONS_MODULE0'\nexport {generateKnowledgeGalaxyAction as '405cd72726b1147728340b50af4081f35921b7a211'} from 'ACTIONS_MODULE0'\nexport {getStudentList as '0051fd3320ee4a841a418f51fcd6fd01fe8208d2cc'} from 'ACTIONS_MODULE0'\nexport {getStudentProfileData as '40a64239c4a8be9240bd70672f3bbcde6843931bbd'} from 'ACTIONS_MODULE0'\nexport {getAcademicEventsAction as '00415d94ceb279c62dfeeeddc7f932358b88e65405'} from 'ACTIONS_MODULE0'\nexport {saveAcademicEventAction as '40fac28372b9de3153ca357e65b29e3c0a425b1472'} from 'ACTIONS_MODULE0'\nexport {gradeAssignmentAction as '4080eaac7c320e416a966e7a113a88b25f70dc49c5'} from 'ACTIONS_MODULE0'\nexport {getProjectTrackerRecords as '00871dacebcf675d14d860291ffee4edde90560522'} from 'ACTIONS_MODULE0'\nexport {getStudentDocumentsAction as '00dc368651ce077a5d8f980d34bce1a6aada27a3fd'} from 'ACTIONS_MODULE0'\nexport {updateDocumentStatusAction as '60d146d0c333a17633b140820d86bd38132c55e3ea'} from 'ACTIONS_MODULE0'\nexport {generateClassroomGameAction as '405972d75ea1bbfac6e527d968208ff18aa12b6927'} from 'ACTIONS_MODULE0'\nexport {getLeaderboardAction as '4063c0f2fb13f97815f1df4b3e6dbba2b0746e564a'} from 'ACTIONS_MODULE0'\nexport {createCustomQuizAction as '40ba14288c134b21b4ff44f27a8cd7b901c13917f3'} from 'ACTIONS_MODULE0'\nexport {checkPlagiarismAction as '4019c74bde07996fc6ba4a7ad00e1bd2775bbad2c5'} from 'ACTIONS_MODULE0'\nexport {saveAttendanceAction as '405d8267c8443e130deee27819438e00d91f229832'} from 'ACTIONS_MODULE0'\nexport {saveOrUpdateProjectTrackerAction as '40db8364d872eda017374019a44dec50acea8f1352'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 2632, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 2646, "column": 0}, "map": {"version":3,"sources":["file:///C:/Downloads/EduBuddy-main/EduBuddy-main/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 2660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}